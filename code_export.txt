/* start: E:/Dev/websites/repairradar\next-env.d.ts*/ /// <reference types="next" /> /// <reference types="next/image-types/global" /> // NOTE: This file should not be edited // see https://nextjs.org/docs/app/api-reference/config/typescript for more information. /* end: E:/Dev/websites/repairradar\next-env.d.ts *//* start: E:/Dev/websites/repairradar\next.config.ts*/ /** @type {import('next').NextConfig} */ const nextConfig = { reactStrictMode: true }; export default nextConfig; /* end: E:/Dev/websites/repairradar\next.config.ts *//* start: E:/Dev/websites/repairradar\prisma\schema.prisma*/ // This is your Prisma schema file, // learn more about it in the docs: https://pris.ly/d/prisma-schema generator client { provider = "prisma-client-js" } datasource db { provider = "postgresql" url = env("DATABASE_URL") } enum AssetStatus { OPERATIONAL MAINTENANCE OUT_OF_SERVICE DECOMMISSIONED } enum CallPriority { LOW MEDIUM HIGH CRITICAL } enum CallStatus { OPEN IN_PROGRESS ON_HOLD CLOSED } enum IndustryType { MANUFACTURING HEALTHCARE FACILITY LABORATORY ENERGY TRANSPORTATION OTHER } enum MaintenanceStatus { SCHEDULED IN_PROGRESS COMPLETED OVERDUE CANCELLED } enum MaintenanceTrigger { TIME_BASED METER_BASED } enum UserRole { TECHNICIAN SUPERVISOR MANAGER ADMIN SUPER_ADMIN } enum WorkOrderStatus { PENDING IN_PROGRESS ON_HOLD COMPLETED CANCELLED } model Tenant { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid name String subdomain String @unique parent Tenant? @relation("TenantParent", fields: [parentId], references: [id]) parentId String? @db.Uuid settings TenantSettings? users User[] categories AssetCategory[] assetTypes AssetType[] assets Asset[] meters Meter[] maintenance MaintenanceSchedule[] workOrders WorkOrder[] parts Part[] vendors Vendor[] incidents Incident[] children Tenant[] @relation("TenantParent") createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) @@map("tenants") } model TenantSettings { tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @id @db.Uuid config Json @default("{}") createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) @@map("tenant_settings") } // Enhanced User model for Next-Auth model User { id String @id @default(uuid()) @db.Uuid name String email String @unique emailVerified DateTime? @map("email_verified") image String? tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid employeeId String @unique password String? @map("password_hash") // Made optional for OAuth users role UserRole firstName String? @map("first_name") lastName String? @map("last_name") // Next-Auth required relations accounts Account[] sessions Session[] // Application relations assignments MaintenanceAssignment[] workOrders WorkOrderAssignment[] labor WorkOrderLabor[] incidents Incident[] workOrderLogs WorkOrderLog[] // Timestamps createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Indexes & Constraints @@unique([tenantId, employeeId]) @@unique([tenantId, email]) // Optimized indexes for query performance @@index([tenantId]) @@index([employeeId]) @@index([email]) @@index([role]) @@map("users") } // Next-Auth Account model (optimized) model Account { id String @id @default(uuid()) @db.Uuid userId String @db.Uuid user User @relation(fields: [userId], references: [id], onDelete: Cascade) type String @db.VarChar(255) provider String @db.VarChar(255) providerAccountId String @db.VarChar(255) refresh_token String? @db.Text access_token String? @db.Text expires_at Int? token_type String? @db.VarChar(255) scope String? @db.VarChar(255) id_token String? @db.Text session_state String? @db.VarChar(255) createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) // Required by Next-Auth @@unique([provider, providerAccountId]) // Performance optimizations @@index([userId]) @@index([provider]) @@map("accounts") } // Next-Auth Session model (optimized) model Session { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid sessionToken String @unique @db.VarChar(255) userId String @db.Uuid user User @relation(fields: [userId], references: [id], onDelete: Cascade) expires DateTime @db.Timestamptz(6) createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) // Performance optimizations @@index([userId]) @@index([sessionToken]) @@map("sessions") } model AssetCategory { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid name String industry IndustryType description String? metadata Json @default("{}") assetTypes AssetType[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) @@unique([tenantId, name]) @@map("asset_categories") } // Next-Auth Verification Token model (required for email verification) model VerificationToken { identifier String @db.VarChar(255) token String @unique @db.VarChar(255) expires DateTime @db.Timestamptz(6) createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) @@unique([identifier, token]) @@map("verification_tokens") } model AssetType { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid category AssetCategory? @relation(fields: [categoryId], references: [id]) categoryId String? @db.Uuid name String description String? expectedLifespan Int? @map("expected_lifespan") maintenanceFrequency Int? @map("maintenance_frequency") criticality Int? customFields Json @default("{}") @map("custom_fields") assets Asset[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) @@unique([tenantId, name]) @@map("asset_types") } model Asset { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid assetType AssetType? @relation(fields: [assetTypeId], references: [id]) assetTypeId String? @db.Uuid name String location String? status AssetStatus @default(OPERATIONAL) serialNumber String? @unique @map("serial_number") purchaseDate DateTime? @map("purchase_date") @db.Date lastMaintenanceDate DateTime? @map("last_maintenance_date") @db.Timestamptz(6) metadata Json @default("{}") assetMeters AssetMeter[] maintenance MaintenanceAssets[] workOrders WorkOrderAssets[] incidents Incident[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) @@map("assets") } model Meter { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid name String unit String assetMeters AssetMeter[] maintenance MaintenanceSchedule[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) @@map("meters") } model AssetMeter { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid asset Asset @relation(fields: [assetId], references: [id]) assetId String @db.Uuid meter Meter @relation(fields: [meterId], references: [id]) meterId String @db.Uuid initialReading Decimal @default(0) @map("initial_reading") @db.Decimal(15, 2) readings MeterReading[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) @@unique([assetId, meterId]) @@map("asset_meters") } model MeterReading { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid assetMeter AssetMeter @relation(fields: [assetMeterId], references: [id]) assetMeterId String @db.Uuid readingValue Decimal @map("reading_value") @db.Decimal(15, 2) readingDate DateTime @default(now()) @map("reading_date") @db.Timestamptz(6) createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) @@map("meter_readings") } model MaintenanceSchedule { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid description String triggerType MaintenanceTrigger @default(TIME_BASED) @map("trigger_type") recurrence Json? meter Meter? @relation(fields: [meterId], references: [id]) meterId String? @db.Uuid thresholdValue Decimal? @map("threshold_value") @db.Decimal(15, 2) nextRun DateTime? @map("next_run") @db.Timestamptz(6) lastRun DateTime? @map("last_run") @db.Timestamptz(6) status MaintenanceStatus @default(SCHEDULED) priority CallPriority @default(MEDIUM) assignments MaintenanceAssignment[] assets MaintenanceAssets[] workOrders WorkOrder[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) @@map("maintenance_schedules") } model MaintenanceAssignment { maintenance MaintenanceSchedule @relation(fields: [maintenanceId], references: [id]) maintenanceId String @db.Uuid user User @relation(fields: [userId], references: [id]) userId String @db.Uuid @@id([maintenanceId, userId]) @@map("maintenance_assignments") } model MaintenanceAssets { maintenance MaintenanceSchedule @relation(fields: [maintenanceId], references: [id]) maintenanceId String @db.Uuid asset Asset @relation(fields: [assetId], references: [id]) assetId String @db.Uuid @@id([maintenanceId, assetId]) @@map("maintenance_assets") } model WorkOrder { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid maintenance MaintenanceSchedule? @relation(fields: [maintenanceId], references: [id]) maintenanceId String? @db.Uuid description String status WorkOrderStatus @default(PENDING) priority CallPriority @default(MEDIUM) dueDate DateTime? @map("due_date") @db.Timestamptz(6) startedAt DateTime? @map("started_at") @db.Timestamptz(6) completedAt DateTime? @map("completed_at") @db.Timestamptz(6) assignments WorkOrderAssignment[] assets WorkOrderAssets[] parts WorkOrderParts[] labor WorkOrderLabor[] logs WorkOrderLog[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) @@map("work_orders") } model WorkOrderAssignment { workOrder WorkOrder @relation(fields: [workOrderId], references: [id]) workOrderId String @db.Uuid user User @relation(fields: [userId], references: [id]) userId String @db.Uuid @@id([workOrderId, userId]) @@map("work_order_assignments") } model WorkOrderAssets { workOrder WorkOrder @relation(fields: [workOrderId], references: [id]) workOrderId String @db.Uuid asset Asset @relation(fields: [assetId], references: [id]) assetId String @db.Uuid @@id([workOrderId, assetId]) @@map("work_order_assets") } model Part { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid name String partNumber String? @unique @map("part_number") description String? quantity Int @default(0) minStock Int @default(0) @map("min_stock") unitCost Decimal? @map("unit_cost") @db.Decimal(10, 2) vendors PartVendor[] workOrders WorkOrderParts[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) @@map("parts") } model WorkOrderParts { workOrder WorkOrder @relation(fields: [workOrderId], references: [id]) workOrderId String @db.Uuid part Part @relation(fields: [partId], references: [id]) partId String @db.Uuid quantityUsed Int @map("quantity_used") @@id([workOrderId, partId]) @@map("work_order_parts") } model Vendor { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid name String contactInfo Json? @map("contact_info") parts PartVendor[] createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) @@map("vendors") } model PartVendor { part Part @relation(fields: [partId], references: [id]) partId String @db.Uuid vendor Vendor @relation(fields: [vendorId], references: [id]) vendorId String @db.Uuid cost Decimal @db.Decimal(10, 2) leadTime Int? @map("lead_time") @@id([partId, vendorId]) @@map("part_vendors") } model WorkOrderLabor { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid workOrder WorkOrder @relation(fields: [workOrderId], references: [id]) workOrderId String @db.Uuid user User? @relation(fields: [userId], references: [id]) userId String? @db.Uuid hours Decimal @db.Decimal(5, 2) taskDescription String? @map("task_description") createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) @@map("work_order_labor") } model Incident { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid tenant Tenant @relation(fields: [tenantId], references: [id]) tenantId String @db.Uuid asset Asset? @relation(fields: [assetId], references: [id]) assetId String? @db.Uuid reportedBy User? @relation(fields: [reportedById], references: [id]) reportedById String? @db.Uuid description String status CallStatus @default(OPEN) priority CallPriority @default(MEDIUM) reportedAt DateTime @default(now()) @map("reported_at") @db.Timestamptz(6) resolvedAt DateTime? @map("resolved_at") @db.Timestamptz(6) createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6) deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) @@map("incidents") } model WorkOrderLog { id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid workOrder WorkOrder @relation(fields: [workOrderId], references: [id]) workOrderId String @db.Uuid user User? @relation(fields: [userId], references: [id]) userId String? @db.Uuid action String details Json? createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6) @@map("work_order_logs") } /* end: E:/Dev/websites/repairradar\prisma\schema.prisma *//* start: E:/Dev/websites/repairradar\prisma\seed.ts*/ import { PrismaClient, User } from '@prisma/client'; import { hashPassword } from '../src/lib/auth-utils'; import { faker } from '@faker-js/faker'; const prisma = new PrismaClient(); // Type-safe model definitions based on your schema type SeedData = { Tenant: { name: string; subdomain: string; parentId?: string; }[]; User: { name?: string; email?: string; employeeId: string; tenantId: string; password: string; role: 'ADMIN' | 'MANAGER' | 'TECHNICIAN' | 'USER'; firstName?: string; lastName?: string; }[]; // Add other models as needed }; async function seed() { // Step 1: Create Tenants const tenants = await prisma.tenant.createMany({ data: [ { name: 'Corporate Headquarters', subdomain: 'corporate', }, { name: 'North Region', subdomain: 'north', }, { name: 'South Region', subdomain: 'south', } ], skipDuplicates: true, }); console.log(`Created ${tenants.count} tenants`); // Step 2: Create Users const corporateTenant = await prisma.tenant.findFirst({ where: { subdomain: 'corporate' }, }); if (!corporateTenant) { throw new Error('Corporate tenant not found'); } const adminPassword = await hashPassword('Admin@123'); const adminUser = await prisma.user.create({ data: { name: 'Admin User', email: 'admin@company.com', employeeId: 'ADMIN001', tenantId: corporateTenant.id, password: adminPassword, role: 'ADMIN', firstName: 'Admin', lastName: 'User' } as User }); console.log(`Created admin user with ID: ${adminUser.id}`); // Step 3: Create other entities const regions = await prisma.tenant.findMany({ where: { subdomain: { in: ['north', 'south'] } }, }); for (const region of regions) { const role = region.subdomain === 'north' ? 'MANAGER' : 'TECHNICIAN'; const password = await hashPassword(`${role}@123`); const user = await prisma.user.create({ data: { name: `${role} ${region.name}`, email: `${role.toLowerCase()}@${region.subdomain}.company.com`, employeeId: `${role.slice(0, 3)}${faker.string.numeric(3)}`, tenantId: region.id, password: password, role, firstName: role, lastName: region.name.split(' ')[0] } as User }); console.log(`Created ${role} user for ${region.subdomain}: ${user.id}`); } // Step 4: Create other entities (assets, work orders, etc.) // Add your specific entity creation logic here console.log('Database seeded successfully!'); } seed() .catch((e) => { console.error('Seeding error:', e); process.exit(1); }) .finally(async () => { await prisma.$disconnect(); }); /* end: E:/Dev/websites/repairradar\prisma\seed.ts *//* start: E:/Dev/websites/repairradar\src\app\layout.tsx*/ import { ThemeProvider } from "@/components/ThemeWrapper"; import "./globals.css"; import { Toaster } from "sonner"; import Footer from "@/components/Footer"; export const metadata = { title: "RepairRadar", description: "A multi-tenant CMMS platform", }; export default async function RootLayout({ children }: { children: React.ReactNode }) { return ( <> <html lang="en" className="dark" style={{ colorScheme: "dark" }}> <head/> <body> <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange > <main>{children}</main> <Toaster/> <Footer/> </ThemeProvider> </body> </html> </> ); } /* end: E:/Dev/websites/repairradar\src\app\layout.tsx *//* start: E:/Dev/websites/repairradar\src\app\page.tsx*/ import Link from "next/link"; import { redirect } from "next/navigation"; export default function Home() { redirect("/dashboard"); } /* end: E:/Dev/websites/repairradar\src\app\page.tsx *//* start: E:/Dev/websites/repairradar\src\components\EditDialog.tsx*/ // src/components/common/EditDialog.tsx 'use client'; import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, } from '@/components/ui/dialog'; import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; import { Label } from '@/components/ui/label'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from '@/components/ui/select'; import { Calendar } from '@/components/ui/calendar'; import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'; import { Loader2, CalendarIcon, Clock } from 'lucide-react'; import { useState } from 'react'; import { format } from 'date-fns'; import { SelectMulti } from './SelectMulti'; type StatusOption = { value: string; label: string; }; type FieldType = 'text' | 'number' | 'select' | 'selectmulti' | 'date' | 'time' | 'datetime'; type EditDialogProps = { open: boolean; onOpenChange: (open: boolean) => void; title: string; description?: string; initialData: Record<string, any>; fields: { name: string; label: string; type: FieldType; required?: boolean; options?: StatusOption[]; }[]; onSubmit: (data: Record<string, any>) => Promise<void>; }; export function EditDialog({ open, onOpenChange, title, description, initialData, fields, onSubmit, }: EditDialogProps) { const [formData, setFormData] = useState(initialData); const [isLoading, setIsLoading] = useState(false); const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); setIsLoading(true); try { await onSubmit(formData); onOpenChange(false); } catch (error) { console.error('Error submitting form:', error); } finally { setIsLoading(false); } }; const handleChange = (name: string, value: string | Date | string[]) => { // Convert Date objects to ISO strings for consistent storage const formattedValue = value instanceof Date ? value.toISOString() : Array.isArray(value) ? value : value; setFormData(prev => ({ ...prev, [name]: formattedValue })); }; const renderField = (field: { name: string; label: string; type: FieldType; required?: boolean; options?: StatusOption[]; }) => { switch (field.type) { case 'select': return ( <Select value={formData[field.name] || ''} onValueChange={(value) => handleChange(field.name, value)} > <SelectTrigger> <SelectValue placeholder={`Select ${field.label.toLowerCase()}`} /> </SelectTrigger> <SelectContent> {field.options?.map(option => ( <SelectItem key={option.value} value={option.value}> {option.label} </SelectItem> ))} </SelectContent> </Select> ); case 'selectmulti': return ( <SelectMulti options={field.options || []} value={formData[field.name] || []} onChange={(value) => handleChange(field.name, value)} placeholder={`Select ${field.label.toLowerCase()}`} /> ); case 'date': return ( <Popover> <PopoverTrigger asChild> <Button variant="outline" className="w-full justify-start text-left font-normal" > <CalendarIcon className="mr-2 h-4 w-4" /> {formData[field.name] ? ( format(new Date(formData[field.name]), 'PPP') ) : ( <span>Pick a date</span> )} </Button> </PopoverTrigger> <PopoverContent className="w-auto p-0"> <Calendar mode="single" selected={formData[field.name] ? new Date(formData[field.name]) : undefined} onSelect={(date) => date && handleChange(field.name, date)} initialFocus /> </PopoverContent> </Popover> ); case 'time': return ( <div className="relative"> <Clock className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" /> <Input type="time" className="pl-9" value={formData[field.name] || ''} onChange={(e) => handleChange(field.name, e.target.value)} required={field.required} /> </div> ); case 'datetime': return ( <div className="flex gap-2"> <Popover> <PopoverTrigger asChild> <Button variant="outline" className="w-full justify-start text-left font-normal" > <CalendarIcon className="mr-2 h-4 w-4" /> {formData[field.name] ? ( format(new Date(formData[field.name]), 'PPP') ) : ( <span>Pick a date</span> )} </Button> </PopoverTrigger> <PopoverContent className="w-auto p-0"> <Calendar mode="single" selected={formData[field.name] ? new Date(formData[field.name]) : undefined} onSelect={(date) => { if (date) { const current = formData[field.name] ? new Date(formData[field.name]) : new Date(); date.setHours(current.getHours()); date.setMinutes(current.getMinutes()); handleChange(field.name, date); } }} initialFocus /> </PopoverContent> </Popover> <div className="relative"> <Clock className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" /> <Input type="time" className="pl-9" value={formData[field.name] ? format(new Date(formData[field.name]), 'HH:mm') : ''} onChange={(e) => { const time = e.target.value; if (time) { const [hours, minutes] = time.split(':'); const date = formData[field.name] ? new Date(formData[field.name]) : new Date(); date.setHours(parseInt(hours, 10)); date.setMinutes(parseInt(minutes, 10)); handleChange(field.name, date); } }} required={field.required} /> </div> </div> ); default: return ( <Input id={field.name} type={field.type} value={formData[field.name] || ''} onChange={(e) => handleChange(field.name, e.target.value)} required={field.required} /> ); } }; return ( <Dialog open={open} onOpenChange={onOpenChange}> <DialogContent> <DialogHeader> <DialogTitle>{title}</DialogTitle> {description && <DialogDescription>{description}</DialogDescription>} </DialogHeader> <form onSubmit={handleSubmit} className="space-y-4"> {fields.map(field => ( <div key={field.name} className="space-y-2"> <Label htmlFor={field.name}> {field.label} {field.required && <span className="text-red-500 ml-1">*</span>} </Label> {renderField(field)} </div> ))} <div className="flex justify-end gap-2 pt-4"> <Button variant="outline" type="button" onClick={() => onOpenChange(false)} disabled={isLoading} > Cancel </Button> <Button type="submit" disabled={isLoading}> {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} Submit </Button> </div> </form> </DialogContent> </Dialog> ); } /* end: E:/Dev/websites/repairradar\src\components\EditDialog.tsx *//* start: E:/Dev/websites/repairradar\src\components\Footer.tsx*/ "use client"; import * as React from "react"; import { Moon, Sun } from "lucide-react"; import { useTheme } from "next-themes"; import { Button } from "@/components/ui/button"; // ModeToggle Component: Simple Light/Dark Switch function ModeToggle() { const { theme, setTheme } = useTheme(); const toggleTheme = () => { setTheme(theme === "dark" ? "light" : "dark"); }; return ( <Button variant="outline" size="icon" onClick={toggleTheme} className="ml-4"> <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" /> <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" /> <span className="sr-only">Toggle theme</span> </Button> ); } // Footer Component export default function Footer() { return ( <footer className="w-full bg-background border-t"> <div className="container mx-auto px-4 h-14 flex items-center justify-center gap-4"> <h3 className="text-lg font-semibold text-foreground">RepairRadar</h3> <ModeToggle /> </div> <div className="container mx-auto px-4 py-2 text-center text-sm text-muted-foreground"> © {new Date().getFullYear()} RepairRadar. All rights reserved. </div> </footer> ); } /* end: E:/Dev/websites/repairradar\src\components\Footer.tsx *//* start: E:/Dev/websites/repairradar\src\components\ModeToggle.tsx*/ "use client" import * as React from "react" import { Moon, Sun } from "lucide-react" import { useTheme } from "next-themes" import { Button } from "@/components/ui/button" import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from "@/components/ui/dropdown-menu" export function ModeToggle() { const { setTheme } = useTheme() return ( <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant="outline" size="icon"> <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" /> <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" /> <span className="sr-only">Toggle theme</span> </Button> </DropdownMenuTrigger> <DropdownMenuContent align="end"> <DropdownMenuItem onClick={() => setTheme("light")}> Light </DropdownMenuItem> <DropdownMenuItem onClick={() => setTheme("dark")}> Dark </DropdownMenuItem> <DropdownMenuItem onClick={() => setTheme("system")}> System </DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> ) } /* end: E:/Dev/websites/repairradar\src\components\ModeToggle.tsx *//* start: E:/Dev/websites/repairradar\src\components\SelectMulti.tsx*/ // src/components/ui/select-multi.tsx 'use client'; import * as React from 'react'; import { Check, ChevronsUpDown } from 'lucide-react'; import { Button } from '@/components/ui/button'; import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, } from '@/components/ui/command'; import { Popover, PopoverContent, PopoverTrigger, } from '@/components/ui/popover'; import { cn } from '@/lib/utils'; type Option = { value: string; label: string; }; interface SelectMultiProps { options: Option[]; value: string[]; onChange: (value: string[]) => void; placeholder?: string; className?: string; } export function SelectMulti({ options, value = [], onChange, placeholder = 'Select options...', className, }: SelectMultiProps) { const [open, setOpen] = React.useState(false); const handleSelect = (optionValue: string) => { const newValue = value.includes(optionValue) ? value.filter(v => v !== optionValue) : [...value, optionValue]; onChange(newValue); }; return ( <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant="outline" role="combobox" aria-expanded={open} className={cn('w-full justify-between', className)} > {value.length > 0 ? options .filter(option => value.includes(option.value)) .map(option => option.label) .join(', ') : placeholder} <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" /> </Button> </PopoverTrigger> <PopoverContent className="w-full p-0"> <Command> <CommandInput placeholder="Search options..." /> <CommandEmpty>No option found.</CommandEmpty> <CommandGroup> {options.map(option => ( <CommandItem key={option.value} onSelect={() => handleSelect(option.value)} > <Check className={cn( 'mr-2 h-4 w-4', value.includes(option.value) ? 'opacity-100' : 'opacity-0' )} /> {option.label} </CommandItem> ))} </CommandGroup> </Command> </PopoverContent> </Popover> ); } /* end: E:/Dev/websites/repairradar\src\components\SelectMulti.tsx *//* start: E:/Dev/websites/repairradar\src\components\ThemeWrapper.tsx*/ "use client" import * as React from "react" import { ThemeProvider as NextThemesProvider } from "next-themes" export function ThemeProvider({ children, ...props }: React.ComponentProps<typeof NextThemesProvider>) { return <NextThemesProvider {...props}>{children}</NextThemesProvider> } /* end: E:/Dev/websites/repairradar\src\components\ThemeWrapper.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\alert.tsx*/ import * as React from "react" import { cva, type VariantProps } from "class-variance-authority" import { cn } from "@/lib/utils" const alertVariants = cva( "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current", { variants: { variant: { default: "bg-card text-card-foreground", destructive: "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90", }, }, defaultVariants: { variant: "default", }, } ) function Alert({ className, variant, ...props }: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) { return ( <div data-slot="alert" role="alert" className={cn(alertVariants({ variant }), className)} {...props} /> ) } function AlertTitle({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="alert-title" className={cn( "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight", className )} {...props} /> ) } function AlertDescription({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="alert-description" className={cn( "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed", className )} {...props} /> ) } export { Alert, AlertTitle, AlertDescription } /* end: E:/Dev/websites/repairradar\src\components\ui\alert.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\avatar.tsx*/ "use client" import * as React from "react" import * as AvatarPrimitive from "@radix-ui/react-avatar" import { cn } from "@/lib/utils" function Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) { return ( <AvatarPrimitive.Root data-slot="avatar" className={cn( "relative flex size-8 shrink-0 overflow-hidden rounded-full", className )} {...props} /> ) } function AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) { return ( <AvatarPrimitive.Image data-slot="avatar-image" className={cn("aspect-square size-full", className)} {...props} /> ) } function AvatarFallback({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) { return ( <AvatarPrimitive.Fallback data-slot="avatar-fallback" className={cn( "bg-muted flex size-full items-center justify-center rounded-full", className )} {...props} /> ) } export { Avatar, AvatarImage, AvatarFallback } /* end: E:/Dev/websites/repairradar\src\components\ui\avatar.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\badge.tsx*/ import * as React from "react" import { Slot } from "@radix-ui/react-slot" import { cva, type VariantProps } from "class-variance-authority" import { cn } from "@/lib/utils" const badgeVariants = cva( "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden", { variants: { variant: { default: "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90", secondary: "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90", destructive: "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/70", outline: "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground", }, }, defaultVariants: { variant: "default", }, } ) function Badge({ className, variant, asChild = false, ...props }: React.ComponentProps<"span"> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) { const Comp = asChild ? Slot : "span" return ( <Comp data-slot="badge" className={cn(badgeVariants({ variant }), className)} {...props} /> ) } export { Badge, badgeVariants } /* end: E:/Dev/websites/repairradar\src\components\ui\badge.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\breadcrumb.tsx*/ // File: E:\Dev\websites\repairradar\src\components\ui\breadcrumb.tsx "use client"; import { ChevronRight } from "lucide-react"; import { usePathname } from "next/navigation"; import { Module } from "@/shared/modules/types"; interface BreadcrumbItem { label: string; module?: Module; // Optional module to switch to href?: string; // Fallback for traditional links (e.g., home) onClick?: () => void; // Optional click handler } interface BreadcrumbProps { tenant?: string; items: BreadcrumbItem[]; onSelectModule?: (module: Module) => void; // Callback from Navbar/TenantPage } export function Breadcrumb({ tenant, items, onSelectModule }: BreadcrumbProps) { const pathname = usePathname(); // Base breadcrumb with tenant context const baseItems: BreadcrumbItem[] = tenant ? [ { label: "RepairRadar", href: "/" }, { label: tenant, href: `/dashboard/${tenant}` }, ] : [{ label: "RepairRadar", href: "/" }]; // Combine base items with provided items const breadcrumbItems = [...baseItems, ...items.filter((item) => item.label)]; return ( <nav className="flex items-center space-x-2 text-sm text-muted-foreground" aria-label="Breadcrumb"> {breadcrumbItems.map((item, index) => ( <div key={index} className="flex items-center"> {item.href && pathname !== item.href ? ( <a href={item.href} className="hover:text-foreground transition-colors"> {item.label} </a> ) : item.module && onSelectModule ? ( <button onClick={() => onSelectModule(item.module)} className="hover:text-foreground transition-colors" > {item.label} </button> ) : ( <span className="text-foreground">{item.label}</span> )} {index < breadcrumbItems.length - 1 && <ChevronRight className="h-4 w-4 mx-1" />} </div> ))} </nav> ); } /* end: E:/Dev/websites/repairradar\src\components\ui\breadcrumb.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\button.tsx*/ import * as React from "react" import { Slot } from "@radix-ui/react-slot" import { cva, type VariantProps } from "class-variance-authority" import { cn } from "@/lib/utils" const buttonVariants = cva( "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive", { variants: { variant: { default: "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90", destructive: "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60", outline: "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50", secondary: "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80", ghost: "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50", link: "text-primary underline-offset-4 hover:underline", }, size: { default: "h-9 px-4 py-2 has-[>svg]:px-3", sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5", lg: "h-10 rounded-md px-6 has-[>svg]:px-4", icon: "size-9", }, }, defaultVariants: { variant: "default", size: "default", }, } ) function Button({ className, variant, size, asChild = false, ...props }: React.ComponentProps<"button"> & VariantProps<typeof buttonVariants> & { asChild?: boolean }) { const Comp = asChild ? Slot : "button" return ( <Comp data-slot="button" className={cn(buttonVariants({ variant, size, className }))} {...props} /> ) } export { Button, buttonVariants } /* end: E:/Dev/websites/repairradar\src\components\ui\button.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\calendar.tsx*/ "use client" import * as React from "react" import { ChevronLeft, ChevronRight } from "lucide-react" import { DayPicker } from "react-day-picker" import { cn } from "@/lib/utils" import { buttonVariants } from "@/components/ui/button" function Calendar({ className, classNames, showOutsideDays = true, ...props }: React.ComponentProps<typeof DayPicker>) { return ( <DayPicker showOutsideDays={showOutsideDays} className={cn("p-3", className)} classNames={{ months: "flex flex-col sm:flex-row gap-2", month: "flex flex-col gap-4", caption: "flex justify-center pt-1 relative items-center w-full", caption_label: "text-sm font-medium", nav: "flex items-center gap-1", nav_button: cn( buttonVariants({ variant: "outline" }), "size-7 bg-transparent p-0 opacity-50 hover:opacity-100" ), nav_button_previous: "absolute left-1", nav_button_next: "absolute right-1", table: "w-full border-collapse space-x-1", head_row: "flex", head_cell: "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]", row: "flex w-full mt-2", cell: cn( "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md", props.mode === "range" ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md" : "[&:has([aria-selected])]:rounded-md" ), day: cn( buttonVariants({ variant: "ghost" }), "size-8 p-0 font-normal aria-selected:opacity-100" ), day_range_start: "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground", day_range_end: "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground", day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground", day_today: "bg-accent text-accent-foreground", day_outside: "day-outside text-muted-foreground aria-selected:text-muted-foreground", day_disabled: "text-muted-foreground opacity-50", day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground", day_hidden: "invisible", ...classNames, }} components={{ IconLeft: ({ className, ...props }) => ( <ChevronLeft className={cn("size-4", className)} {...props} /> ), IconRight: ({ className, ...props }) => ( <ChevronRight className={cn("size-4", className)} {...props} /> ), }} {...props} /> ) } export { Calendar } /* end: E:/Dev/websites/repairradar\src\components\ui\calendar.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\card.tsx*/ import * as React from "react" import { cn } from "@/lib/utils" function Card({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="card" className={cn( "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm", className )} {...props} /> ) } function CardHeader({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="card-header" className={cn( "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6", className )} {...props} /> ) } function CardTitle({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="card-title" className={cn("leading-none font-semibold", className)} {...props} /> ) } function CardDescription({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="card-description" className={cn("text-muted-foreground text-sm", className)} {...props} /> ) } function CardAction({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="card-action" className={cn( "col-start-2 row-span-2 row-start-1 self-start justify-self-end", className )} {...props} /> ) } function CardContent({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="card-content" className={cn("px-6", className)} {...props} /> ) } function CardFooter({ className, ...props }: React.ComponentProps<"div">) { return ( <div data-slot="card-footer" className={cn("flex items-center px-6 [.border-t]:pt-6", className)} {...props} /> ) } export { Card, CardHeader, CardFooter, CardTitle, CardAction, CardDescription, CardContent, } /* end: E:/Dev/websites/repairradar\src\components\ui\card.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\checkbox.tsx*/ "use client" import * as React from "react" import * as CheckboxPrimitive from "@radix-ui/react-checkbox" import { CheckIcon } from "lucide-react" import { cn } from "@/lib/utils" function Checkbox({ className, ...props }: React.ComponentProps<typeof CheckboxPrimitive.Root>) { return ( <CheckboxPrimitive.Root data-slot="checkbox" className={cn( "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50", className )} {...props} > <CheckboxPrimitive.Indicator data-slot="checkbox-indicator" className="flex items-center justify-center text-current transition-none" > <CheckIcon className="size-3.5" /> </CheckboxPrimitive.Indicator> </CheckboxPrimitive.Root> ) } export { Checkbox } /* end: E:/Dev/websites/repairradar\src\components\ui\checkbox.tsx *//* start: E:/Dev/websites/repairradar\src\components\ui\command.tsx*/ "use client" import * as React from "react" import { Command as CommandPrimitive } from "cmdk" import { SearchIcon } from "lucide-react" import { cn } from "@/lib/utils" import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, } from "@/components/ui/dialog" function Command({ className, ...props }: React.ComponentProps<typeof CommandPrimitive>) { return ( <CommandPrimitive data-slot="command" className={cn( "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md", className )} {...props} /> ) } function CommandDialog({ title = "Command Palette", description = "Search for a command to run...", children, ...props }: React.ComponentProps<typeof Dialog> & { title?: string description?: string }) { return ( <Dialog {...props}> <DialogHeader className="sr-only"> <DialogTitle>{title}</DialogTitle> <DialogDescription>{description}</DialogDescription> </DialogHeader> <DialogContent className="overflow-hidden p-0"> <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5"> {children} </Command> </DialogContent> </Dialog> ) } function CommandInput({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Input>) { return ( <div data-slot="command-input-wrapper" className="flex h-9 items-center gap-2 border-b px-3" > <SearchIcon className="size-4 shrink-0 opacity-50" /> <CommandPrimitive.Input data-slot="command-input" className={cn( "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50", className )} {...props} /> </div> ) } function CommandList({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.List>) { return ( <CommandPrimitive.List data-slot="command-list" className={cn( "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto", className )} {...props} /> ) } function CommandEmpty({ ...props }: React.ComponentProps<typeof CommandPrimitive.Empty>) { return ( <CommandPrimitive.Empty data-slot="command-empty" className="py-6 text-center text-sm" {...props} /> ) } function CommandGroup({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Group>) { return ( <CommandPrimitive.Group data-slot="command-group" className={cn( "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium", className )} {...props} /> ) } function CommandSeparator({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Separator>) { return ( <CommandPrimitive.Separator data-slot="command-separator" className={cn("bg-border -mx-1 h-px", className)} {...props} /> ) } function CommandItem({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Item>) { return ( <CommandPrimitive.Item data-slot="command-item" className={cn( "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4", className )} {...props} /> ) } function CommandShortcut({ className, ...props }: React.ComponentProps<"span">) { return ( <span data-slot="command-shortcut" className={cn( "text-muted-foreground ml-auto text-xs tracking-widest", className )} {...props} /> ) } export { Command, CommandDialog, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem, CommandShortcut, CommandSeparator, } /* end: E:/Dev/websites/repairradar\src\components\ui\command.tsx */