/* eslint-disable @typescript-eslint/no-require-imports */
// scripts/generateModuleImports.js
const fs = require("fs");
const path = require("path");

// 1. Define paths - use absolute path from project root
const projectRoot = path.resolve(__dirname, "../"); // Go up two levels from scripts/
const modulesDir = path.join(projectRoot, "src/shared/modules");
const outputFile = path.join(modulesDir, "moduleImports.generated.ts");

console.log(`Looking for modules in: ${modulesDir}`); // Debug log

// 2. Get all module folders
let moduleFolders = [];
try {
  moduleFolders = fs.readdirSync(modulesDir).filter((folder) => {
    const folderPath = path.join(modulesDir, folder);
    return fs.statSync(folderPath).isDirectory();
  });
} catch (err) {
  console.error("❌ Error reading modules directory:", err);
  process.exit(1);
}

console.log("Found modules:", moduleFolders); // Debug log

// 3. Generate import statements
const imports = moduleFolders.map((module) => {
  const componentName = module
    .split("-")
    .map((word) => word[0].toUpperCase() + word.slice(1))
    .join("") + "Page";

  return `  "${module}": () => import("@/shared/modules/${module}/components/${componentName}"),`;
});

const fileContent = `// Auto-generated by scripts/generateModuleImports.js
export const moduleImports: Record<string, () => Promise<{ default: React.ComponentType<{ tenant: string }> }>> = {
${imports.join("\n")}
};
`;

// 4. Write the generated file
try {
  fs.writeFileSync(outputFile, fileContent);
  console.log("✅ Generated module imports at:", outputFile);
} catch (err) {
  console.error("❌ Failed to write generated file:", err);
  process.exit(1);
}