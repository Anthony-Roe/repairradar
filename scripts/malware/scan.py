import os
import hashlib
import re
import sys
import math
import datetime
import magic
import yara
import json
from collections import Counter
import logging

class AdvancedMalwareScanner:
    def __init__(self):
        # Initialize logging
        logging.basicConfig(filename='malware_scan.log', level=logging.INFO,
                          format='%(asctime)s - %(levelname)s - %(message)s')
        
        # Comprehensive malware signatures database
        self.malware_signatures = {
            'eicar': '44d88612fea8a8f36de82e1278abb02f',
            'wannacry': 'db349b97c37d22f5ea1d1841e3c89eb4',
            # Add more real signatures here
        }
        
        # Advanced suspicious patterns
        self.suspicious_patterns = {
            'code_execution': [r'eval\(', r'exec\(', r'execfile\(', r'compile\('],
            'system_access': [r'os\.(system|popen|chmod|chown)', r'syscall\('],
            'network': [r'socket\.', r'http[s]?://', r'ftp://', r'requests\.(get|post)'],
            'obfuscation': [r'base64\.b64decode', r'zlib\.decompress', r'marshal\.loads'],
            'persistence': [r'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run',
                          r'schtasks\s*/create'],
            'crypto': [r'Crypto\.Cipher', r'cryptography\.', r'hashlib\.']
        }
        
        # Initialize YARA rules (you'd need actual .yar rule files)
        try:
            self.yara_rules = yara.compile(filepath='malware_rules.yar')
        except:
            self.yara_rules = None
            logging.warning("YARA rules not loaded - create malware_rules.yar file")

    def calculate_entropy(self, data):
        """Calculate Shannon entropy of data"""
        if not data:
            return 0
        entropy = 0
        for x in range(256):
            p_x = data.count(x) / len(data)
            if p_x > 0:
                entropy -= p_x * math.log2(p_x)
        return entropy

    def get_file_type(self, file_path):
        """Determine file type using libmagic"""
        try:
            return magic.from_file(file_path)
        except:
            return "Unknown"

    def analyze_behavioral_patterns(self, content):
        """Analyze code for suspicious behavioral patterns"""
        detections = []
        
        # Check for multiple suspicious patterns in combination
        pattern_counts = {cat: sum(1 for p in patterns if re.search(p, content)) 
                         for cat, patterns in self.suspicious_patterns.items()}
        
        if pattern_counts.get('code_execution', 0) > 1 and pattern_counts.get('network', 0) > 0:
            detections.append("Potential remote code execution")
            
        if pattern_counts.get('persistence', 0) > 0 and pattern_counts.get('system_access', 0) > 0:
            detections.append("Potential persistence mechanism")
            
        return detections

    def scan_file(self, file_path):
        """Perform advanced scan on a single file"""
        results = {
            'file': file_path,
            'timestamp': datetime.datetime.now().isoformat(),
            'detections': [],
            'metadata': {},
            'risk_score': 0
        }
        
        try:
            # Basic file info
            results['metadata']['size'] = os.path.getsize(file_path)
            results['metadata']['type'] = self.get_file_type(file_path)
            
            # Hash calculation
            with open(file_path, 'rb') as f:
                content = f.read()
                md5_hash = hashlib.md5(content).hexdigest()
                sha256_hash = hashlib.sha256(content).hexdigest()
                results['metadata']['md5'] = md5_hash
                results['metadata']['sha256'] = sha256_hash
                
            # Signature check
            if md5_hash in self.malware_signatures.values():
                results['detections'].append(f"Known malware signature match (MD5: {md5_hash})")
                results['risk_score'] += 50
                
            # Entropy analysis
            entropy = self.calculate_entropy(content)
            results['metadata']['entropy'] = entropy
            if entropy > 7.5:  # High entropy might indicate packing/encryption
                results['detections'].append("High entropy detected - possible packing")
                results['risk_score'] += 20
                
            # YARA rule matching
            if self.yara_rules:
                matches = self.yara_rules.match(data=content)
                for match in matches:
                    results['detections'].append(f"YARA rule match: {match.rule}")
                    results['risk_score'] += 30
                    
            # Pattern analysis (for text files)
            try:
                text_content = content.decode('utf-8', errors='ignore')
                for category, patterns in self.suspicious_patterns.items():
                    for pattern in patterns:
                        if re.search(pattern, text_content):
                            results['detections'].append(f"Suspicious {category} pattern: {pattern}")
                            results['risk_score'] += 10
                            
                # Behavioral analysis
                behavioral_detections = self.analyze_behavioral_patterns(text_content)
                results['detections'].extend(behavioral_detections)
                results['risk_score'] += len(behavioral_detections) * 15
                
            except UnicodeDecodeError:
                pass
                
        except Exception as e:
            results['detections'].append(f"Scan error: {str(e)}")
            
        return results

    def scan_directory(self, directory, output_file=None):
        """Scan directory and generate detailed report"""
        report = {
            'scan_start': datetime.datetime.now().isoformat(),
            'directory': directory,
            'results': []
        }
        
        print(f"Starting advanced scan of {directory}")
        for root, _, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                result = self.scan_file(file_path)
                report['results'].append(result)
                
                # Real-time feedback
                status = "SUSPICIOUS" if result['detections'] else "CLEAN"
                print(f"{status}: {file_path} (Risk Score: {result['risk_score']})")
                if result['detections']:
                    for detection in result['detections']:
                        print(f" - {detection}")
                        
                logging.info(f"Scanned {file_path} - Risk Score: {result['risk_score']}")
                
        # Save report if requested
        if output_file:
            with open(output_file, 'w') as f:
                json.dump(report, f, indent=2)
                
        return report

def main():
    scanner = AdvancedMalwareScanner()
    
    # Command line arguments
    directory = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
    output_file = sys.argv[2] if len(sys.argv) > 2 else None
    
    if not os.path.isdir(directory):
        print(f"Error: '{directory}' is not a valid directory")
        return
        
    scanner.scan_directory(directory, output_file)
    print("\nScan complete. Detailed results logged to malware_scan.log")

if __name__ == "__main__":
    main()