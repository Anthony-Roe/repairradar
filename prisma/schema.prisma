generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenants {
  id                  String                @id @default(uuid())
  name                String
  subdomain           String                @unique
  parentId            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  assets              Asset[]
  calls               Call[]
  MaintenanceSchedule MaintenanceSchedule[]
  parts               Part[]
  config              TenantConfig?
  parent              Tenants?              @relation("TenantsTree", fields: [parentId], references: [id])
  children            Tenants[]             @relation("TenantsTree")
  users               User[]
  vendors             Vendor[]
  workOrders          WorkOrder[]

  @@index([parentId])
}

model TenantConfig {
  id        String    @id @default(uuid())
  tenantId  String    @unique
  modules   Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  tenant    Tenants   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id @default(uuid())
  tenantId            String?
  email               String                @unique
  password            String
  createdAt           DateTime              @default(now())
  deletedAt           DateTime?
  updatedAt           DateTime              @updatedAt
  role                UserRole              @default(USER)
  calls               Call[]
  MaintenanceSchedule MaintenanceSchedule[]
  tenant              Tenants?              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workOrders          WorkOrder[]
  notes               WorkOrderNote[]
}

model Asset {
  id               String             @id @default(uuid())
  tenantId         String
  name             String
  location         String?
  createdAt        DateTime           @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime           @updatedAt
  tenant           Tenants            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  calls            Call[]
  MaintenanceAsset MaintenanceAsset[]
  workOrders       WorkOrderAsset[]
}

model Call {
  id           String     @id @default(uuid())
  tenantId     String
  assetId      String
  reportedById String
  issue        String
  callTime     DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  status       CallStatus @default(OPEN)
  deletedAt    DateTime?
  asset        Asset      @relation(fields: [assetId], references: [id])
  reportedBy   User       @relation(fields: [reportedById], references: [id])
  tenant       Tenants    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model WorkOrder {
  id           String            @id @default(uuid())
  tenantId     String
  description  String
  status       WorkOrderStatus   @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  assignedToId String?
  deletedAt    DateTime?
  dueDate      DateTime?
  priority     WorkOrderPriority @default(MEDIUM)
  assignedTo   User?             @relation(fields: [assignedToId], references: [id])
  tenant       Tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assets       WorkOrderAsset[]
  notes        WorkOrderNote[]
}

model WorkOrderAsset {
  workOrderId String
  assetId     String
  asset       Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@id([workOrderId, assetId])
}

model WorkOrderNote {
  id          String    @id @default(uuid())
  workOrderId String
  note        String
  createdById String?
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  createdBy   User?     @relation(fields: [createdById], references: [id])
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
}

model MaintenanceSchedule {
  id           String              @id @default(uuid())
  tenantId     String
  description  String
  recurrence   Json
  nextRun      DateTime
  lastRun      DateTime?
  status       MaintenanceStatus   @default(SCHEDULED)
  priority     MaintenancePriority @default(MEDIUM)
  assignedToId String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  deletedAt    DateTime?
  assets       MaintenanceAsset[]
  assignedTo   User?               @relation(fields: [assignedToId], references: [id])
  tenant       Tenants             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model MaintenanceAsset {
  maintenanceId String
  assetId       String
  asset         Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  maintenance   MaintenanceSchedule @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)

  @@id([maintenanceId, assetId])
}

model Part {
  id          String       @id @default(uuid())
  name        String
  description String?
  quantity    Int          @default(0)
  minStock    Int          @default(0)
  tenantId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  tenant      Tenants      @relation(fields: [tenantId], references: [id])
  vendors     PartVendor[]
}

model Vendor {
  id        String       @id @default(uuid())
  name      String
  contact   String?
  email     String?
  tenantId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  parts     PartVendor[]
  tenant    Tenants      @relation(fields: [tenantId], references: [id])
}

model PartVendor {
  partId   String
  vendorId String
  cost     Float?
  part     Part   @relation(fields: [partId], references: [id])
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  @@id([partId, vendorId])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum CallStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum WorkOrderPriority {
  LOW
  MEDIUM
  HIGH
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
}
