
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model TenantSettings
 * 
 */
export type TenantSettings = $Result.DefaultSelection<Prisma.$TenantSettingsPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model AssetCategory
 * 
 */
export type AssetCategory = $Result.DefaultSelection<Prisma.$AssetCategoryPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model AssetType
 * 
 */
export type AssetType = $Result.DefaultSelection<Prisma.$AssetTypePayload>
/**
 * Model Asset
 * 
 */
export type Asset = $Result.DefaultSelection<Prisma.$AssetPayload>
/**
 * Model Meter
 * 
 */
export type Meter = $Result.DefaultSelection<Prisma.$MeterPayload>
/**
 * Model AssetMeter
 * 
 */
export type AssetMeter = $Result.DefaultSelection<Prisma.$AssetMeterPayload>
/**
 * Model MeterReading
 * 
 */
export type MeterReading = $Result.DefaultSelection<Prisma.$MeterReadingPayload>
/**
 * Model MaintenanceSchedule
 * 
 */
export type MaintenanceSchedule = $Result.DefaultSelection<Prisma.$MaintenanceSchedulePayload>
/**
 * Model MaintenanceAssignment
 * 
 */
export type MaintenanceAssignment = $Result.DefaultSelection<Prisma.$MaintenanceAssignmentPayload>
/**
 * Model MaintenanceAssets
 * 
 */
export type MaintenanceAssets = $Result.DefaultSelection<Prisma.$MaintenanceAssetsPayload>
/**
 * Model WorkOrder
 * 
 */
export type WorkOrder = $Result.DefaultSelection<Prisma.$WorkOrderPayload>
/**
 * Model WorkOrderAssignment
 * 
 */
export type WorkOrderAssignment = $Result.DefaultSelection<Prisma.$WorkOrderAssignmentPayload>
/**
 * Model WorkOrderAssets
 * 
 */
export type WorkOrderAssets = $Result.DefaultSelection<Prisma.$WorkOrderAssetsPayload>
/**
 * Model WorkOrderParts
 * 
 */
export type WorkOrderParts = $Result.DefaultSelection<Prisma.$WorkOrderPartsPayload>
/**
 * Model Part
 * 
 */
export type Part = $Result.DefaultSelection<Prisma.$PartPayload>
/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model PartVendor
 * 
 */
export type PartVendor = $Result.DefaultSelection<Prisma.$PartVendorPayload>
/**
 * Model WorkOrderLabor
 * 
 */
export type WorkOrderLabor = $Result.DefaultSelection<Prisma.$WorkOrderLaborPayload>
/**
 * Model Incident
 * 
 */
export type Incident = $Result.DefaultSelection<Prisma.$IncidentPayload>
/**
 * Model WorkOrderLog
 * 
 */
export type WorkOrderLog = $Result.DefaultSelection<Prisma.$WorkOrderLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AssetStatus: {
  OPERATIONAL: 'OPERATIONAL',
  MAINTENANCE: 'MAINTENANCE',
  OUT_OF_SERVICE: 'OUT_OF_SERVICE',
  DECOMMISSIONED: 'DECOMMISSIONED'
};

export type AssetStatus = (typeof AssetStatus)[keyof typeof AssetStatus]


export const CallPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type CallPriority = (typeof CallPriority)[keyof typeof CallPriority]


export const CallStatus: {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  CLOSED: 'CLOSED'
};

export type CallStatus = (typeof CallStatus)[keyof typeof CallStatus]


export const IndustryType: {
  MANUFACTURING: 'MANUFACTURING',
  HEALTHCARE: 'HEALTHCARE',
  FACILITY: 'FACILITY',
  LABORATORY: 'LABORATORY',
  ENERGY: 'ENERGY',
  TRANSPORTATION: 'TRANSPORTATION',
  OTHER: 'OTHER'
};

export type IndustryType = (typeof IndustryType)[keyof typeof IndustryType]


export const MaintenanceStatus: {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

export type MaintenanceStatus = (typeof MaintenanceStatus)[keyof typeof MaintenanceStatus]


export const MaintenanceTrigger: {
  TIME_BASED: 'TIME_BASED',
  METER_BASED: 'METER_BASED'
};

export type MaintenanceTrigger = (typeof MaintenanceTrigger)[keyof typeof MaintenanceTrigger]


export const UserRole: {
  TECHNICIAN: 'TECHNICIAN',
  SUPERVISOR: 'SUPERVISOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const WorkOrderStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type WorkOrderStatus = (typeof WorkOrderStatus)[keyof typeof WorkOrderStatus]

}

export type AssetStatus = $Enums.AssetStatus

export const AssetStatus: typeof $Enums.AssetStatus

export type CallPriority = $Enums.CallPriority

export const CallPriority: typeof $Enums.CallPriority

export type CallStatus = $Enums.CallStatus

export const CallStatus: typeof $Enums.CallStatus

export type IndustryType = $Enums.IndustryType

export const IndustryType: typeof $Enums.IndustryType

export type MaintenanceStatus = $Enums.MaintenanceStatus

export const MaintenanceStatus: typeof $Enums.MaintenanceStatus

export type MaintenanceTrigger = $Enums.MaintenanceTrigger

export const MaintenanceTrigger: typeof $Enums.MaintenanceTrigger

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type WorkOrderStatus = $Enums.WorkOrderStatus

export const WorkOrderStatus: typeof $Enums.WorkOrderStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tenants
 * const tenants = await prisma.tenant.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tenants
   * const tenants = await prisma.tenant.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tenantSettings`: Exposes CRUD operations for the **TenantSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TenantSettings
    * const tenantSettings = await prisma.tenantSettings.findMany()
    * ```
    */
  get tenantSettings(): Prisma.TenantSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assetCategory`: Exposes CRUD operations for the **AssetCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetCategories
    * const assetCategories = await prisma.assetCategory.findMany()
    * ```
    */
  get assetCategory(): Prisma.AssetCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assetType`: Exposes CRUD operations for the **AssetType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetTypes
    * const assetTypes = await prisma.assetType.findMany()
    * ```
    */
  get assetType(): Prisma.AssetTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meter`: Exposes CRUD operations for the **Meter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meters
    * const meters = await prisma.meter.findMany()
    * ```
    */
  get meter(): Prisma.MeterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assetMeter`: Exposes CRUD operations for the **AssetMeter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetMeters
    * const assetMeters = await prisma.assetMeter.findMany()
    * ```
    */
  get assetMeter(): Prisma.AssetMeterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meterReading`: Exposes CRUD operations for the **MeterReading** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeterReadings
    * const meterReadings = await prisma.meterReading.findMany()
    * ```
    */
  get meterReading(): Prisma.MeterReadingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.maintenanceSchedule`: Exposes CRUD operations for the **MaintenanceSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaintenanceSchedules
    * const maintenanceSchedules = await prisma.maintenanceSchedule.findMany()
    * ```
    */
  get maintenanceSchedule(): Prisma.MaintenanceScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.maintenanceAssignment`: Exposes CRUD operations for the **MaintenanceAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaintenanceAssignments
    * const maintenanceAssignments = await prisma.maintenanceAssignment.findMany()
    * ```
    */
  get maintenanceAssignment(): Prisma.MaintenanceAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.maintenanceAssets`: Exposes CRUD operations for the **MaintenanceAssets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaintenanceAssets
    * const maintenanceAssets = await prisma.maintenanceAssets.findMany()
    * ```
    */
  get maintenanceAssets(): Prisma.MaintenanceAssetsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workOrder`: Exposes CRUD operations for the **WorkOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrders
    * const workOrders = await prisma.workOrder.findMany()
    * ```
    */
  get workOrder(): Prisma.WorkOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workOrderAssignment`: Exposes CRUD operations for the **WorkOrderAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrderAssignments
    * const workOrderAssignments = await prisma.workOrderAssignment.findMany()
    * ```
    */
  get workOrderAssignment(): Prisma.WorkOrderAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workOrderAssets`: Exposes CRUD operations for the **WorkOrderAssets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrderAssets
    * const workOrderAssets = await prisma.workOrderAssets.findMany()
    * ```
    */
  get workOrderAssets(): Prisma.WorkOrderAssetsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workOrderParts`: Exposes CRUD operations for the **WorkOrderParts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrderParts
    * const workOrderParts = await prisma.workOrderParts.findMany()
    * ```
    */
  get workOrderParts(): Prisma.WorkOrderPartsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.part`: Exposes CRUD operations for the **Part** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parts
    * const parts = await prisma.part.findMany()
    * ```
    */
  get part(): Prisma.PartDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partVendor`: Exposes CRUD operations for the **PartVendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PartVendors
    * const partVendors = await prisma.partVendor.findMany()
    * ```
    */
  get partVendor(): Prisma.PartVendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workOrderLabor`: Exposes CRUD operations for the **WorkOrderLabor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrderLabors
    * const workOrderLabors = await prisma.workOrderLabor.findMany()
    * ```
    */
  get workOrderLabor(): Prisma.WorkOrderLaborDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.incident`: Exposes CRUD operations for the **Incident** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Incidents
    * const incidents = await prisma.incident.findMany()
    * ```
    */
  get incident(): Prisma.IncidentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workOrderLog`: Exposes CRUD operations for the **WorkOrderLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrderLogs
    * const workOrderLogs = await prisma.workOrderLog.findMany()
    * ```
    */
  get workOrderLog(): Prisma.WorkOrderLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tenant: 'Tenant',
    TenantSettings: 'TenantSettings',
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    AssetCategory: 'AssetCategory',
    VerificationToken: 'VerificationToken',
    AssetType: 'AssetType',
    Asset: 'Asset',
    Meter: 'Meter',
    AssetMeter: 'AssetMeter',
    MeterReading: 'MeterReading',
    MaintenanceSchedule: 'MaintenanceSchedule',
    MaintenanceAssignment: 'MaintenanceAssignment',
    MaintenanceAssets: 'MaintenanceAssets',
    WorkOrder: 'WorkOrder',
    WorkOrderAssignment: 'WorkOrderAssignment',
    WorkOrderAssets: 'WorkOrderAssets',
    WorkOrderParts: 'WorkOrderParts',
    Part: 'Part',
    Vendor: 'Vendor',
    PartVendor: 'PartVendor',
    WorkOrderLabor: 'WorkOrderLabor',
    Incident: 'Incident',
    WorkOrderLog: 'WorkOrderLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "tenant" | "tenantSettings" | "user" | "account" | "session" | "assetCategory" | "verificationToken" | "assetType" | "asset" | "meter" | "assetMeter" | "meterReading" | "maintenanceSchedule" | "maintenanceAssignment" | "maintenanceAssets" | "workOrder" | "workOrderAssignment" | "workOrderAssets" | "workOrderParts" | "part" | "vendor" | "partVendor" | "workOrderLabor" | "incident" | "workOrderLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TenantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      TenantSettings: {
        payload: Prisma.$TenantSettingsPayload<ExtArgs>
        fields: Prisma.TenantSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>
          }
          findFirst: {
            args: Prisma.TenantSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>
          }
          findMany: {
            args: Prisma.TenantSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>[]
          }
          create: {
            args: Prisma.TenantSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>
          }
          createMany: {
            args: Prisma.TenantSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>[]
          }
          delete: {
            args: Prisma.TenantSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>
          }
          update: {
            args: Prisma.TenantSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>
          }
          deleteMany: {
            args: Prisma.TenantSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TenantSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>[]
          }
          upsert: {
            args: Prisma.TenantSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantSettingsPayload>
          }
          aggregate: {
            args: Prisma.TenantSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenantSettings>
          }
          groupBy: {
            args: Prisma.TenantSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<TenantSettingsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      AssetCategory: {
        payload: Prisma.$AssetCategoryPayload<ExtArgs>
        fields: Prisma.AssetCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>
          }
          findFirst: {
            args: Prisma.AssetCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>
          }
          findMany: {
            args: Prisma.AssetCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>[]
          }
          create: {
            args: Prisma.AssetCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>
          }
          createMany: {
            args: Prisma.AssetCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>[]
          }
          delete: {
            args: Prisma.AssetCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>
          }
          update: {
            args: Prisma.AssetCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>
          }
          deleteMany: {
            args: Prisma.AssetCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>[]
          }
          upsert: {
            args: Prisma.AssetCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCategoryPayload>
          }
          aggregate: {
            args: Prisma.AssetCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetCategory>
          }
          groupBy: {
            args: Prisma.AssetCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCategoryCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      AssetType: {
        payload: Prisma.$AssetTypePayload<ExtArgs>
        fields: Prisma.AssetTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>
          }
          findFirst: {
            args: Prisma.AssetTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>
          }
          findMany: {
            args: Prisma.AssetTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>[]
          }
          create: {
            args: Prisma.AssetTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>
          }
          createMany: {
            args: Prisma.AssetTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>[]
          }
          delete: {
            args: Prisma.AssetTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>
          }
          update: {
            args: Prisma.AssetTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>
          }
          deleteMany: {
            args: Prisma.AssetTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>[]
          }
          upsert: {
            args: Prisma.AssetTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetTypePayload>
          }
          aggregate: {
            args: Prisma.AssetTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetType>
          }
          groupBy: {
            args: Prisma.AssetTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetTypeCountArgs<ExtArgs>
            result: $Utils.Optional<AssetTypeCountAggregateOutputType> | number
          }
        }
      }
      Asset: {
        payload: Prisma.$AssetPayload<ExtArgs>
        fields: Prisma.AssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findFirst: {
            args: Prisma.AssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findMany: {
            args: Prisma.AssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          create: {
            args: Prisma.AssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          createMany: {
            args: Prisma.AssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          delete: {
            args: Prisma.AssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          update: {
            args: Prisma.AssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          deleteMany: {
            args: Prisma.AssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          upsert: {
            args: Prisma.AssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          aggregate: {
            args: Prisma.AssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsset>
          }
          groupBy: {
            args: Prisma.AssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCountAggregateOutputType> | number
          }
        }
      }
      Meter: {
        payload: Prisma.$MeterPayload<ExtArgs>
        fields: Prisma.MeterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>
          }
          findFirst: {
            args: Prisma.MeterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>
          }
          findMany: {
            args: Prisma.MeterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>[]
          }
          create: {
            args: Prisma.MeterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>
          }
          createMany: {
            args: Prisma.MeterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>[]
          }
          delete: {
            args: Prisma.MeterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>
          }
          update: {
            args: Prisma.MeterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>
          }
          deleteMany: {
            args: Prisma.MeterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MeterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>[]
          }
          upsert: {
            args: Prisma.MeterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterPayload>
          }
          aggregate: {
            args: Prisma.MeterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeter>
          }
          groupBy: {
            args: Prisma.MeterGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeterGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeterCountArgs<ExtArgs>
            result: $Utils.Optional<MeterCountAggregateOutputType> | number
          }
        }
      }
      AssetMeter: {
        payload: Prisma.$AssetMeterPayload<ExtArgs>
        fields: Prisma.AssetMeterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetMeterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetMeterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>
          }
          findFirst: {
            args: Prisma.AssetMeterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetMeterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>
          }
          findMany: {
            args: Prisma.AssetMeterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>[]
          }
          create: {
            args: Prisma.AssetMeterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>
          }
          createMany: {
            args: Prisma.AssetMeterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetMeterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>[]
          }
          delete: {
            args: Prisma.AssetMeterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>
          }
          update: {
            args: Prisma.AssetMeterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>
          }
          deleteMany: {
            args: Prisma.AssetMeterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetMeterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetMeterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>[]
          }
          upsert: {
            args: Prisma.AssetMeterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetMeterPayload>
          }
          aggregate: {
            args: Prisma.AssetMeterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetMeter>
          }
          groupBy: {
            args: Prisma.AssetMeterGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetMeterGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetMeterCountArgs<ExtArgs>
            result: $Utils.Optional<AssetMeterCountAggregateOutputType> | number
          }
        }
      }
      MeterReading: {
        payload: Prisma.$MeterReadingPayload<ExtArgs>
        fields: Prisma.MeterReadingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeterReadingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeterReadingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>
          }
          findFirst: {
            args: Prisma.MeterReadingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeterReadingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>
          }
          findMany: {
            args: Prisma.MeterReadingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>[]
          }
          create: {
            args: Prisma.MeterReadingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>
          }
          createMany: {
            args: Prisma.MeterReadingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeterReadingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>[]
          }
          delete: {
            args: Prisma.MeterReadingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>
          }
          update: {
            args: Prisma.MeterReadingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>
          }
          deleteMany: {
            args: Prisma.MeterReadingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeterReadingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MeterReadingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>[]
          }
          upsert: {
            args: Prisma.MeterReadingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeterReadingPayload>
          }
          aggregate: {
            args: Prisma.MeterReadingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeterReading>
          }
          groupBy: {
            args: Prisma.MeterReadingGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeterReadingGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeterReadingCountArgs<ExtArgs>
            result: $Utils.Optional<MeterReadingCountAggregateOutputType> | number
          }
        }
      }
      MaintenanceSchedule: {
        payload: Prisma.$MaintenanceSchedulePayload<ExtArgs>
        fields: Prisma.MaintenanceScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaintenanceScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaintenanceScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>
          }
          findFirst: {
            args: Prisma.MaintenanceScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaintenanceScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>
          }
          findMany: {
            args: Prisma.MaintenanceScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>[]
          }
          create: {
            args: Prisma.MaintenanceScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>
          }
          createMany: {
            args: Prisma.MaintenanceScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaintenanceScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>[]
          }
          delete: {
            args: Prisma.MaintenanceScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>
          }
          update: {
            args: Prisma.MaintenanceScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>
          }
          deleteMany: {
            args: Prisma.MaintenanceScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaintenanceScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaintenanceScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>[]
          }
          upsert: {
            args: Prisma.MaintenanceScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceSchedulePayload>
          }
          aggregate: {
            args: Prisma.MaintenanceScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaintenanceSchedule>
          }
          groupBy: {
            args: Prisma.MaintenanceScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaintenanceScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceScheduleCountAggregateOutputType> | number
          }
        }
      }
      MaintenanceAssignment: {
        payload: Prisma.$MaintenanceAssignmentPayload<ExtArgs>
        fields: Prisma.MaintenanceAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaintenanceAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaintenanceAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>
          }
          findFirst: {
            args: Prisma.MaintenanceAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaintenanceAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>
          }
          findMany: {
            args: Prisma.MaintenanceAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>[]
          }
          create: {
            args: Prisma.MaintenanceAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>
          }
          createMany: {
            args: Prisma.MaintenanceAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaintenanceAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>[]
          }
          delete: {
            args: Prisma.MaintenanceAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>
          }
          update: {
            args: Prisma.MaintenanceAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.MaintenanceAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaintenanceAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaintenanceAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.MaintenanceAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssignmentPayload>
          }
          aggregate: {
            args: Prisma.MaintenanceAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaintenanceAssignment>
          }
          groupBy: {
            args: Prisma.MaintenanceAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaintenanceAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceAssignmentCountAggregateOutputType> | number
          }
        }
      }
      MaintenanceAssets: {
        payload: Prisma.$MaintenanceAssetsPayload<ExtArgs>
        fields: Prisma.MaintenanceAssetsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaintenanceAssetsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaintenanceAssetsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>
          }
          findFirst: {
            args: Prisma.MaintenanceAssetsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaintenanceAssetsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>
          }
          findMany: {
            args: Prisma.MaintenanceAssetsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>[]
          }
          create: {
            args: Prisma.MaintenanceAssetsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>
          }
          createMany: {
            args: Prisma.MaintenanceAssetsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaintenanceAssetsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>[]
          }
          delete: {
            args: Prisma.MaintenanceAssetsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>
          }
          update: {
            args: Prisma.MaintenanceAssetsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>
          }
          deleteMany: {
            args: Prisma.MaintenanceAssetsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaintenanceAssetsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaintenanceAssetsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>[]
          }
          upsert: {
            args: Prisma.MaintenanceAssetsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceAssetsPayload>
          }
          aggregate: {
            args: Prisma.MaintenanceAssetsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaintenanceAssets>
          }
          groupBy: {
            args: Prisma.MaintenanceAssetsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceAssetsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaintenanceAssetsCountArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceAssetsCountAggregateOutputType> | number
          }
        }
      }
      WorkOrder: {
        payload: Prisma.$WorkOrderPayload<ExtArgs>
        fields: Prisma.WorkOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          findMany: {
            args: Prisma.WorkOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          create: {
            args: Prisma.WorkOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          createMany: {
            args: Prisma.WorkOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          update: {
            args: Prisma.WorkOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          upsert: {
            args: Prisma.WorkOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrder>
          }
          groupBy: {
            args: Prisma.WorkOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderCountAggregateOutputType> | number
          }
        }
      }
      WorkOrderAssignment: {
        payload: Prisma.$WorkOrderAssignmentPayload<ExtArgs>
        fields: Prisma.WorkOrderAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>
          }
          findMany: {
            args: Prisma.WorkOrderAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>[]
          }
          create: {
            args: Prisma.WorkOrderAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>
          }
          createMany: {
            args: Prisma.WorkOrderAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>
          }
          update: {
            args: Prisma.WorkOrderAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkOrderAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.WorkOrderAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssignmentPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrderAssignment>
          }
          groupBy: {
            args: Prisma.WorkOrderAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderAssignmentCountAggregateOutputType> | number
          }
        }
      }
      WorkOrderAssets: {
        payload: Prisma.$WorkOrderAssetsPayload<ExtArgs>
        fields: Prisma.WorkOrderAssetsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderAssetsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderAssetsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderAssetsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderAssetsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>
          }
          findMany: {
            args: Prisma.WorkOrderAssetsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>[]
          }
          create: {
            args: Prisma.WorkOrderAssetsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>
          }
          createMany: {
            args: Prisma.WorkOrderAssetsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderAssetsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderAssetsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>
          }
          update: {
            args: Prisma.WorkOrderAssetsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderAssetsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderAssetsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkOrderAssetsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>[]
          }
          upsert: {
            args: Prisma.WorkOrderAssetsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderAssetsPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderAssetsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrderAssets>
          }
          groupBy: {
            args: Prisma.WorkOrderAssetsGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderAssetsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderAssetsCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderAssetsCountAggregateOutputType> | number
          }
        }
      }
      WorkOrderParts: {
        payload: Prisma.$WorkOrderPartsPayload<ExtArgs>
        fields: Prisma.WorkOrderPartsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderPartsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderPartsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderPartsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderPartsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>
          }
          findMany: {
            args: Prisma.WorkOrderPartsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>[]
          }
          create: {
            args: Prisma.WorkOrderPartsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>
          }
          createMany: {
            args: Prisma.WorkOrderPartsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderPartsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderPartsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>
          }
          update: {
            args: Prisma.WorkOrderPartsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderPartsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderPartsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkOrderPartsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>[]
          }
          upsert: {
            args: Prisma.WorkOrderPartsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPartsPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderPartsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrderParts>
          }
          groupBy: {
            args: Prisma.WorkOrderPartsGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderPartsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderPartsCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderPartsCountAggregateOutputType> | number
          }
        }
      }
      Part: {
        payload: Prisma.$PartPayload<ExtArgs>
        fields: Prisma.PartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          findFirst: {
            args: Prisma.PartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          findMany: {
            args: Prisma.PartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>[]
          }
          create: {
            args: Prisma.PartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          createMany: {
            args: Prisma.PartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>[]
          }
          delete: {
            args: Prisma.PartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          update: {
            args: Prisma.PartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          deleteMany: {
            args: Prisma.PartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>[]
          }
          upsert: {
            args: Prisma.PartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          aggregate: {
            args: Prisma.PartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePart>
          }
          groupBy: {
            args: Prisma.PartGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartCountArgs<ExtArgs>
            result: $Utils.Optional<PartCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      PartVendor: {
        payload: Prisma.$PartVendorPayload<ExtArgs>
        fields: Prisma.PartVendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartVendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartVendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>
          }
          findFirst: {
            args: Prisma.PartVendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartVendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>
          }
          findMany: {
            args: Prisma.PartVendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>[]
          }
          create: {
            args: Prisma.PartVendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>
          }
          createMany: {
            args: Prisma.PartVendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartVendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>[]
          }
          delete: {
            args: Prisma.PartVendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>
          }
          update: {
            args: Prisma.PartVendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>
          }
          deleteMany: {
            args: Prisma.PartVendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartVendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartVendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>[]
          }
          upsert: {
            args: Prisma.PartVendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartVendorPayload>
          }
          aggregate: {
            args: Prisma.PartVendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartVendor>
          }
          groupBy: {
            args: Prisma.PartVendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartVendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartVendorCountArgs<ExtArgs>
            result: $Utils.Optional<PartVendorCountAggregateOutputType> | number
          }
        }
      }
      WorkOrderLabor: {
        payload: Prisma.$WorkOrderLaborPayload<ExtArgs>
        fields: Prisma.WorkOrderLaborFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderLaborFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderLaborFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderLaborFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderLaborFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>
          }
          findMany: {
            args: Prisma.WorkOrderLaborFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>[]
          }
          create: {
            args: Prisma.WorkOrderLaborCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>
          }
          createMany: {
            args: Prisma.WorkOrderLaborCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderLaborCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderLaborDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>
          }
          update: {
            args: Prisma.WorkOrderLaborUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderLaborDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderLaborUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkOrderLaborUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>[]
          }
          upsert: {
            args: Prisma.WorkOrderLaborUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLaborPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderLaborAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrderLabor>
          }
          groupBy: {
            args: Prisma.WorkOrderLaborGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderLaborGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderLaborCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderLaborCountAggregateOutputType> | number
          }
        }
      }
      Incident: {
        payload: Prisma.$IncidentPayload<ExtArgs>
        fields: Prisma.IncidentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IncidentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IncidentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          findFirst: {
            args: Prisma.IncidentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IncidentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          findMany: {
            args: Prisma.IncidentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>[]
          }
          create: {
            args: Prisma.IncidentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          createMany: {
            args: Prisma.IncidentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IncidentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>[]
          }
          delete: {
            args: Prisma.IncidentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          update: {
            args: Prisma.IncidentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          deleteMany: {
            args: Prisma.IncidentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IncidentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IncidentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>[]
          }
          upsert: {
            args: Prisma.IncidentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          aggregate: {
            args: Prisma.IncidentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIncident>
          }
          groupBy: {
            args: Prisma.IncidentGroupByArgs<ExtArgs>
            result: $Utils.Optional<IncidentGroupByOutputType>[]
          }
          count: {
            args: Prisma.IncidentCountArgs<ExtArgs>
            result: $Utils.Optional<IncidentCountAggregateOutputType> | number
          }
        }
      }
      WorkOrderLog: {
        payload: Prisma.$WorkOrderLogPayload<ExtArgs>
        fields: Prisma.WorkOrderLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>
          }
          findMany: {
            args: Prisma.WorkOrderLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>[]
          }
          create: {
            args: Prisma.WorkOrderLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>
          }
          createMany: {
            args: Prisma.WorkOrderLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>
          }
          update: {
            args: Prisma.WorkOrderLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkOrderLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>[]
          }
          upsert: {
            args: Prisma.WorkOrderLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderLogPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrderLog>
          }
          groupBy: {
            args: Prisma.WorkOrderLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderLogCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    tenant?: TenantOmit
    tenantSettings?: TenantSettingsOmit
    user?: UserOmit
    account?: AccountOmit
    session?: SessionOmit
    assetCategory?: AssetCategoryOmit
    verificationToken?: VerificationTokenOmit
    assetType?: AssetTypeOmit
    asset?: AssetOmit
    meter?: MeterOmit
    assetMeter?: AssetMeterOmit
    meterReading?: MeterReadingOmit
    maintenanceSchedule?: MaintenanceScheduleOmit
    maintenanceAssignment?: MaintenanceAssignmentOmit
    maintenanceAssets?: MaintenanceAssetsOmit
    workOrder?: WorkOrderOmit
    workOrderAssignment?: WorkOrderAssignmentOmit
    workOrderAssets?: WorkOrderAssetsOmit
    workOrderParts?: WorkOrderPartsOmit
    part?: PartOmit
    vendor?: VendorOmit
    partVendor?: PartVendorOmit
    workOrderLabor?: WorkOrderLaborOmit
    incident?: IncidentOmit
    workOrderLog?: WorkOrderLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    users: number
    categories: number
    assetTypes: number
    assets: number
    meters: number
    maintenance: number
    workOrders: number
    parts: number
    vendors: number
    incidents: number
    children: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | TenantCountOutputTypeCountUsersArgs
    categories?: boolean | TenantCountOutputTypeCountCategoriesArgs
    assetTypes?: boolean | TenantCountOutputTypeCountAssetTypesArgs
    assets?: boolean | TenantCountOutputTypeCountAssetsArgs
    meters?: boolean | TenantCountOutputTypeCountMetersArgs
    maintenance?: boolean | TenantCountOutputTypeCountMaintenanceArgs
    workOrders?: boolean | TenantCountOutputTypeCountWorkOrdersArgs
    parts?: boolean | TenantCountOutputTypeCountPartsArgs
    vendors?: boolean | TenantCountOutputTypeCountVendorsArgs
    incidents?: boolean | TenantCountOutputTypeCountIncidentsArgs
    children?: boolean | TenantCountOutputTypeCountChildrenArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetCategoryWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountAssetTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetTypeWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountMetersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeterWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountMaintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceScheduleWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountVendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncidentWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    assignments: number
    workOrders: number
    labor: number
    incidents: number
    workOrderLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    assignments?: boolean | UserCountOutputTypeCountAssignmentsArgs
    workOrders?: boolean | UserCountOutputTypeCountWorkOrdersArgs
    labor?: boolean | UserCountOutputTypeCountLaborArgs
    incidents?: boolean | UserCountOutputTypeCountIncidentsArgs
    workOrderLogs?: boolean | UserCountOutputTypeCountWorkOrderLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLaborArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderLaborWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncidentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkOrderLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderLogWhereInput
  }


  /**
   * Count Type AssetCategoryCountOutputType
   */

  export type AssetCategoryCountOutputType = {
    assetTypes: number
  }

  export type AssetCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetTypes?: boolean | AssetCategoryCountOutputTypeCountAssetTypesArgs
  }

  // Custom InputTypes
  /**
   * AssetCategoryCountOutputType without action
   */
  export type AssetCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategoryCountOutputType
     */
    select?: AssetCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetCategoryCountOutputType without action
   */
  export type AssetCategoryCountOutputTypeCountAssetTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetTypeWhereInput
  }


  /**
   * Count Type AssetTypeCountOutputType
   */

  export type AssetTypeCountOutputType = {
    assets: number
  }

  export type AssetTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | AssetTypeCountOutputTypeCountAssetsArgs
  }

  // Custom InputTypes
  /**
   * AssetTypeCountOutputType without action
   */
  export type AssetTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetTypeCountOutputType
     */
    select?: AssetTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetTypeCountOutputType without action
   */
  export type AssetTypeCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }


  /**
   * Count Type AssetCountOutputType
   */

  export type AssetCountOutputType = {
    assetMeters: number
    maintenance: number
    workOrders: number
    incidents: number
  }

  export type AssetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetMeters?: boolean | AssetCountOutputTypeCountAssetMetersArgs
    maintenance?: boolean | AssetCountOutputTypeCountMaintenanceArgs
    workOrders?: boolean | AssetCountOutputTypeCountWorkOrdersArgs
    incidents?: boolean | AssetCountOutputTypeCountIncidentsArgs
  }

  // Custom InputTypes
  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCountOutputType
     */
    select?: AssetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountAssetMetersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetMeterWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountMaintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceAssetsWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderAssetsWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncidentWhereInput
  }


  /**
   * Count Type MeterCountOutputType
   */

  export type MeterCountOutputType = {
    assetMeters: number
    maintenance: number
  }

  export type MeterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetMeters?: boolean | MeterCountOutputTypeCountAssetMetersArgs
    maintenance?: boolean | MeterCountOutputTypeCountMaintenanceArgs
  }

  // Custom InputTypes
  /**
   * MeterCountOutputType without action
   */
  export type MeterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterCountOutputType
     */
    select?: MeterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeterCountOutputType without action
   */
  export type MeterCountOutputTypeCountAssetMetersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetMeterWhereInput
  }

  /**
   * MeterCountOutputType without action
   */
  export type MeterCountOutputTypeCountMaintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceScheduleWhereInput
  }


  /**
   * Count Type AssetMeterCountOutputType
   */

  export type AssetMeterCountOutputType = {
    readings: number
  }

  export type AssetMeterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readings?: boolean | AssetMeterCountOutputTypeCountReadingsArgs
  }

  // Custom InputTypes
  /**
   * AssetMeterCountOutputType without action
   */
  export type AssetMeterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeterCountOutputType
     */
    select?: AssetMeterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetMeterCountOutputType without action
   */
  export type AssetMeterCountOutputTypeCountReadingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeterReadingWhereInput
  }


  /**
   * Count Type MaintenanceScheduleCountOutputType
   */

  export type MaintenanceScheduleCountOutputType = {
    assignments: number
    assets: number
    workOrders: number
  }

  export type MaintenanceScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | MaintenanceScheduleCountOutputTypeCountAssignmentsArgs
    assets?: boolean | MaintenanceScheduleCountOutputTypeCountAssetsArgs
    workOrders?: boolean | MaintenanceScheduleCountOutputTypeCountWorkOrdersArgs
  }

  // Custom InputTypes
  /**
   * MaintenanceScheduleCountOutputType without action
   */
  export type MaintenanceScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceScheduleCountOutputType
     */
    select?: MaintenanceScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaintenanceScheduleCountOutputType without action
   */
  export type MaintenanceScheduleCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceAssignmentWhereInput
  }

  /**
   * MaintenanceScheduleCountOutputType without action
   */
  export type MaintenanceScheduleCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceAssetsWhereInput
  }

  /**
   * MaintenanceScheduleCountOutputType without action
   */
  export type MaintenanceScheduleCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }


  /**
   * Count Type WorkOrderCountOutputType
   */

  export type WorkOrderCountOutputType = {
    assignments: number
    assets: number
    parts: number
    labor: number
    logs: number
  }

  export type WorkOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | WorkOrderCountOutputTypeCountAssignmentsArgs
    assets?: boolean | WorkOrderCountOutputTypeCountAssetsArgs
    parts?: boolean | WorkOrderCountOutputTypeCountPartsArgs
    labor?: boolean | WorkOrderCountOutputTypeCountLaborArgs
    logs?: boolean | WorkOrderCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderCountOutputType
     */
    select?: WorkOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderAssignmentWhereInput
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderAssetsWhereInput
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderPartsWhereInput
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountLaborArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderLaborWhereInput
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderLogWhereInput
  }


  /**
   * Count Type PartCountOutputType
   */

  export type PartCountOutputType = {
    vendors: number
    workOrders: number
  }

  export type PartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendors?: boolean | PartCountOutputTypeCountVendorsArgs
    workOrders?: boolean | PartCountOutputTypeCountWorkOrdersArgs
  }

  // Custom InputTypes
  /**
   * PartCountOutputType without action
   */
  export type PartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartCountOutputType
     */
    select?: PartCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartCountOutputType without action
   */
  export type PartCountOutputTypeCountVendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartVendorWhereInput
  }

  /**
   * PartCountOutputType without action
   */
  export type PartCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderPartsWhereInput
  }


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    parts: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parts?: boolean | VendorCountOutputTypeCountPartsArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartVendorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    subdomain: number
    parentId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    name: string
    subdomain: string
    parentId: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    parent?: boolean | Tenant$parentArgs<ExtArgs>
    settings?: boolean | Tenant$settingsArgs<ExtArgs>
    users?: boolean | Tenant$usersArgs<ExtArgs>
    categories?: boolean | Tenant$categoriesArgs<ExtArgs>
    assetTypes?: boolean | Tenant$assetTypesArgs<ExtArgs>
    assets?: boolean | Tenant$assetsArgs<ExtArgs>
    meters?: boolean | Tenant$metersArgs<ExtArgs>
    maintenance?: boolean | Tenant$maintenanceArgs<ExtArgs>
    workOrders?: boolean | Tenant$workOrdersArgs<ExtArgs>
    parts?: boolean | Tenant$partsArgs<ExtArgs>
    vendors?: boolean | Tenant$vendorsArgs<ExtArgs>
    incidents?: boolean | Tenant$incidentsArgs<ExtArgs>
    children?: boolean | Tenant$childrenArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    parent?: boolean | Tenant$parentArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    parent?: boolean | Tenant$parentArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    subdomain?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type TenantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "subdomain" | "parentId" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["tenant"]>
  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Tenant$parentArgs<ExtArgs>
    settings?: boolean | Tenant$settingsArgs<ExtArgs>
    users?: boolean | Tenant$usersArgs<ExtArgs>
    categories?: boolean | Tenant$categoriesArgs<ExtArgs>
    assetTypes?: boolean | Tenant$assetTypesArgs<ExtArgs>
    assets?: boolean | Tenant$assetsArgs<ExtArgs>
    meters?: boolean | Tenant$metersArgs<ExtArgs>
    maintenance?: boolean | Tenant$maintenanceArgs<ExtArgs>
    workOrders?: boolean | Tenant$workOrdersArgs<ExtArgs>
    parts?: boolean | Tenant$partsArgs<ExtArgs>
    vendors?: boolean | Tenant$vendorsArgs<ExtArgs>
    incidents?: boolean | Tenant$incidentsArgs<ExtArgs>
    children?: boolean | Tenant$childrenArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Tenant$parentArgs<ExtArgs>
  }
  export type TenantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Tenant$parentArgs<ExtArgs>
  }

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      parent: Prisma.$TenantPayload<ExtArgs> | null
      settings: Prisma.$TenantSettingsPayload<ExtArgs> | null
      users: Prisma.$UserPayload<ExtArgs>[]
      categories: Prisma.$AssetCategoryPayload<ExtArgs>[]
      assetTypes: Prisma.$AssetTypePayload<ExtArgs>[]
      assets: Prisma.$AssetPayload<ExtArgs>[]
      meters: Prisma.$MeterPayload<ExtArgs>[]
      maintenance: Prisma.$MaintenanceSchedulePayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
      parts: Prisma.$PartPayload<ExtArgs>[]
      vendors: Prisma.$VendorPayload<ExtArgs>[]
      incidents: Prisma.$IncidentPayload<ExtArgs>[]
      children: Prisma.$TenantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      subdomain: string
      parentId: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants and returns the data updated in the database.
     * @param {TenantUpdateManyAndReturnArgs} args - Arguments to update many Tenants.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TenantUpdateManyAndReturnArgs>(args: SelectSubset<T, TenantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Tenant$parentArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$parentArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    settings<T extends Tenant$settingsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$settingsArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends Tenant$usersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Tenant$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assetTypes<T extends Tenant$assetTypesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$assetTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assets<T extends Tenant$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    meters<T extends Tenant$metersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$metersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    maintenance<T extends Tenant$maintenanceArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$maintenanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workOrders<T extends Tenant$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    parts<T extends Tenant$partsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$partsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vendors<T extends Tenant$vendorsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$vendorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incidents<T extends Tenant$incidentsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$incidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    children<T extends Tenant$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly subdomain: FieldRef<"Tenant", 'String'>
    readonly parentId: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
    readonly deletedAt: FieldRef<"Tenant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
  }

  /**
   * Tenant updateManyAndReturn
   */
  export type TenantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to delete.
     */
    limit?: number
  }

  /**
   * Tenant.parent
   */
  export type Tenant$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * Tenant.settings
   */
  export type Tenant$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    where?: TenantSettingsWhereInput
  }

  /**
   * Tenant.users
   */
  export type Tenant$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tenant.categories
   */
  export type Tenant$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    where?: AssetCategoryWhereInput
    orderBy?: AssetCategoryOrderByWithRelationInput | AssetCategoryOrderByWithRelationInput[]
    cursor?: AssetCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetCategoryScalarFieldEnum | AssetCategoryScalarFieldEnum[]
  }

  /**
   * Tenant.assetTypes
   */
  export type Tenant$assetTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    where?: AssetTypeWhereInput
    orderBy?: AssetTypeOrderByWithRelationInput | AssetTypeOrderByWithRelationInput[]
    cursor?: AssetTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetTypeScalarFieldEnum | AssetTypeScalarFieldEnum[]
  }

  /**
   * Tenant.assets
   */
  export type Tenant$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Tenant.meters
   */
  export type Tenant$metersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    where?: MeterWhereInput
    orderBy?: MeterOrderByWithRelationInput | MeterOrderByWithRelationInput[]
    cursor?: MeterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeterScalarFieldEnum | MeterScalarFieldEnum[]
  }

  /**
   * Tenant.maintenance
   */
  export type Tenant$maintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    where?: MaintenanceScheduleWhereInput
    orderBy?: MaintenanceScheduleOrderByWithRelationInput | MaintenanceScheduleOrderByWithRelationInput[]
    cursor?: MaintenanceScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceScheduleScalarFieldEnum | MaintenanceScheduleScalarFieldEnum[]
  }

  /**
   * Tenant.workOrders
   */
  export type Tenant$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * Tenant.parts
   */
  export type Tenant$partsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    where?: PartWhereInput
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    cursor?: PartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartScalarFieldEnum | PartScalarFieldEnum[]
  }

  /**
   * Tenant.vendors
   */
  export type Tenant$vendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    cursor?: VendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Tenant.incidents
   */
  export type Tenant$incidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    where?: IncidentWhereInput
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    cursor?: IncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * Tenant.children
   */
  export type Tenant$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    cursor?: TenantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model TenantSettings
   */

  export type AggregateTenantSettings = {
    _count: TenantSettingsCountAggregateOutputType | null
    _min: TenantSettingsMinAggregateOutputType | null
    _max: TenantSettingsMaxAggregateOutputType | null
  }

  export type TenantSettingsMinAggregateOutputType = {
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantSettingsMaxAggregateOutputType = {
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantSettingsCountAggregateOutputType = {
    tenantId: number
    config: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantSettingsMinAggregateInputType = {
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantSettingsMaxAggregateInputType = {
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantSettingsCountAggregateInputType = {
    tenantId?: true
    config?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantSettings to aggregate.
     */
    where?: TenantSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantSettings to fetch.
     */
    orderBy?: TenantSettingsOrderByWithRelationInput | TenantSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TenantSettings
    **/
    _count?: true | TenantSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantSettingsMaxAggregateInputType
  }

  export type GetTenantSettingsAggregateType<T extends TenantSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateTenantSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenantSettings[P]>
      : GetScalarType<T[P], AggregateTenantSettings[P]>
  }




  export type TenantSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantSettingsWhereInput
    orderBy?: TenantSettingsOrderByWithAggregationInput | TenantSettingsOrderByWithAggregationInput[]
    by: TenantSettingsScalarFieldEnum[] | TenantSettingsScalarFieldEnum
    having?: TenantSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantSettingsCountAggregateInputType | true
    _min?: TenantSettingsMinAggregateInputType
    _max?: TenantSettingsMaxAggregateInputType
  }

  export type TenantSettingsGroupByOutputType = {
    tenantId: string
    config: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: TenantSettingsCountAggregateOutputType | null
    _min: TenantSettingsMinAggregateOutputType | null
    _max: TenantSettingsMaxAggregateOutputType | null
  }

  type GetTenantSettingsGroupByPayload<T extends TenantSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], TenantSettingsGroupByOutputType[P]>
        }
      >
    >


  export type TenantSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tenantId?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantSettings"]>

  export type TenantSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tenantId?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantSettings"]>

  export type TenantSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tenantId?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantSettings"]>

  export type TenantSettingsSelectScalar = {
    tenantId?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tenantId" | "config" | "createdAt" | "updatedAt", ExtArgs["result"]["tenantSettings"]>
  export type TenantSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type TenantSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type TenantSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $TenantSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TenantSettings"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      tenantId: string
      config: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenantSettings"]>
    composites: {}
  }

  type TenantSettingsGetPayload<S extends boolean | null | undefined | TenantSettingsDefaultArgs> = $Result.GetResult<Prisma.$TenantSettingsPayload, S>

  type TenantSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TenantSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TenantSettingsCountAggregateInputType | true
    }

  export interface TenantSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TenantSettings'], meta: { name: 'TenantSettings' } }
    /**
     * Find zero or one TenantSettings that matches the filter.
     * @param {TenantSettingsFindUniqueArgs} args - Arguments to find a TenantSettings
     * @example
     * // Get one TenantSettings
     * const tenantSettings = await prisma.tenantSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantSettingsFindUniqueArgs>(args: SelectSubset<T, TenantSettingsFindUniqueArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TenantSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TenantSettingsFindUniqueOrThrowArgs} args - Arguments to find a TenantSettings
     * @example
     * // Get one TenantSettings
     * const tenantSettings = await prisma.tenantSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TenantSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantSettingsFindFirstArgs} args - Arguments to find a TenantSettings
     * @example
     * // Get one TenantSettings
     * const tenantSettings = await prisma.tenantSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantSettingsFindFirstArgs>(args?: SelectSubset<T, TenantSettingsFindFirstArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TenantSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantSettingsFindFirstOrThrowArgs} args - Arguments to find a TenantSettings
     * @example
     * // Get one TenantSettings
     * const tenantSettings = await prisma.tenantSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TenantSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TenantSettings
     * const tenantSettings = await prisma.tenantSettings.findMany()
     * 
     * // Get first 10 TenantSettings
     * const tenantSettings = await prisma.tenantSettings.findMany({ take: 10 })
     * 
     * // Only select the `tenantId`
     * const tenantSettingsWithTenantIdOnly = await prisma.tenantSettings.findMany({ select: { tenantId: true } })
     * 
     */
    findMany<T extends TenantSettingsFindManyArgs>(args?: SelectSubset<T, TenantSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TenantSettings.
     * @param {TenantSettingsCreateArgs} args - Arguments to create a TenantSettings.
     * @example
     * // Create one TenantSettings
     * const TenantSettings = await prisma.tenantSettings.create({
     *   data: {
     *     // ... data to create a TenantSettings
     *   }
     * })
     * 
     */
    create<T extends TenantSettingsCreateArgs>(args: SelectSubset<T, TenantSettingsCreateArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TenantSettings.
     * @param {TenantSettingsCreateManyArgs} args - Arguments to create many TenantSettings.
     * @example
     * // Create many TenantSettings
     * const tenantSettings = await prisma.tenantSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantSettingsCreateManyArgs>(args?: SelectSubset<T, TenantSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TenantSettings and returns the data saved in the database.
     * @param {TenantSettingsCreateManyAndReturnArgs} args - Arguments to create many TenantSettings.
     * @example
     * // Create many TenantSettings
     * const tenantSettings = await prisma.tenantSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TenantSettings and only return the `tenantId`
     * const tenantSettingsWithTenantIdOnly = await prisma.tenantSettings.createManyAndReturn({
     *   select: { tenantId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TenantSettings.
     * @param {TenantSettingsDeleteArgs} args - Arguments to delete one TenantSettings.
     * @example
     * // Delete one TenantSettings
     * const TenantSettings = await prisma.tenantSettings.delete({
     *   where: {
     *     // ... filter to delete one TenantSettings
     *   }
     * })
     * 
     */
    delete<T extends TenantSettingsDeleteArgs>(args: SelectSubset<T, TenantSettingsDeleteArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TenantSettings.
     * @param {TenantSettingsUpdateArgs} args - Arguments to update one TenantSettings.
     * @example
     * // Update one TenantSettings
     * const tenantSettings = await prisma.tenantSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantSettingsUpdateArgs>(args: SelectSubset<T, TenantSettingsUpdateArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TenantSettings.
     * @param {TenantSettingsDeleteManyArgs} args - Arguments to filter TenantSettings to delete.
     * @example
     * // Delete a few TenantSettings
     * const { count } = await prisma.tenantSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantSettingsDeleteManyArgs>(args?: SelectSubset<T, TenantSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TenantSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TenantSettings
     * const tenantSettings = await prisma.tenantSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantSettingsUpdateManyArgs>(args: SelectSubset<T, TenantSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TenantSettings and returns the data updated in the database.
     * @param {TenantSettingsUpdateManyAndReturnArgs} args - Arguments to update many TenantSettings.
     * @example
     * // Update many TenantSettings
     * const tenantSettings = await prisma.tenantSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TenantSettings and only return the `tenantId`
     * const tenantSettingsWithTenantIdOnly = await prisma.tenantSettings.updateManyAndReturn({
     *   select: { tenantId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TenantSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, TenantSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TenantSettings.
     * @param {TenantSettingsUpsertArgs} args - Arguments to update or create a TenantSettings.
     * @example
     * // Update or create a TenantSettings
     * const tenantSettings = await prisma.tenantSettings.upsert({
     *   create: {
     *     // ... data to create a TenantSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TenantSettings we want to update
     *   }
     * })
     */
    upsert<T extends TenantSettingsUpsertArgs>(args: SelectSubset<T, TenantSettingsUpsertArgs<ExtArgs>>): Prisma__TenantSettingsClient<$Result.GetResult<Prisma.$TenantSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TenantSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantSettingsCountArgs} args - Arguments to filter TenantSettings to count.
     * @example
     * // Count the number of TenantSettings
     * const count = await prisma.tenantSettings.count({
     *   where: {
     *     // ... the filter for the TenantSettings we want to count
     *   }
     * })
    **/
    count<T extends TenantSettingsCountArgs>(
      args?: Subset<T, TenantSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TenantSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantSettingsAggregateArgs>(args: Subset<T, TenantSettingsAggregateArgs>): Prisma.PrismaPromise<GetTenantSettingsAggregateType<T>>

    /**
     * Group by TenantSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantSettingsGroupByArgs['orderBy'] }
        : { orderBy?: TenantSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TenantSettings model
   */
  readonly fields: TenantSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TenantSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TenantSettings model
   */
  interface TenantSettingsFieldRefs {
    readonly tenantId: FieldRef<"TenantSettings", 'String'>
    readonly config: FieldRef<"TenantSettings", 'Json'>
    readonly createdAt: FieldRef<"TenantSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"TenantSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TenantSettings findUnique
   */
  export type TenantSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * Filter, which TenantSettings to fetch.
     */
    where: TenantSettingsWhereUniqueInput
  }

  /**
   * TenantSettings findUniqueOrThrow
   */
  export type TenantSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * Filter, which TenantSettings to fetch.
     */
    where: TenantSettingsWhereUniqueInput
  }

  /**
   * TenantSettings findFirst
   */
  export type TenantSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * Filter, which TenantSettings to fetch.
     */
    where?: TenantSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantSettings to fetch.
     */
    orderBy?: TenantSettingsOrderByWithRelationInput | TenantSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantSettings.
     */
    cursor?: TenantSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantSettings.
     */
    distinct?: TenantSettingsScalarFieldEnum | TenantSettingsScalarFieldEnum[]
  }

  /**
   * TenantSettings findFirstOrThrow
   */
  export type TenantSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * Filter, which TenantSettings to fetch.
     */
    where?: TenantSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantSettings to fetch.
     */
    orderBy?: TenantSettingsOrderByWithRelationInput | TenantSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantSettings.
     */
    cursor?: TenantSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantSettings.
     */
    distinct?: TenantSettingsScalarFieldEnum | TenantSettingsScalarFieldEnum[]
  }

  /**
   * TenantSettings findMany
   */
  export type TenantSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * Filter, which TenantSettings to fetch.
     */
    where?: TenantSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantSettings to fetch.
     */
    orderBy?: TenantSettingsOrderByWithRelationInput | TenantSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TenantSettings.
     */
    cursor?: TenantSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantSettings.
     */
    skip?: number
    distinct?: TenantSettingsScalarFieldEnum | TenantSettingsScalarFieldEnum[]
  }

  /**
   * TenantSettings create
   */
  export type TenantSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a TenantSettings.
     */
    data: XOR<TenantSettingsCreateInput, TenantSettingsUncheckedCreateInput>
  }

  /**
   * TenantSettings createMany
   */
  export type TenantSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TenantSettings.
     */
    data: TenantSettingsCreateManyInput | TenantSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TenantSettings createManyAndReturn
   */
  export type TenantSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many TenantSettings.
     */
    data: TenantSettingsCreateManyInput | TenantSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TenantSettings update
   */
  export type TenantSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a TenantSettings.
     */
    data: XOR<TenantSettingsUpdateInput, TenantSettingsUncheckedUpdateInput>
    /**
     * Choose, which TenantSettings to update.
     */
    where: TenantSettingsWhereUniqueInput
  }

  /**
   * TenantSettings updateMany
   */
  export type TenantSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TenantSettings.
     */
    data: XOR<TenantSettingsUpdateManyMutationInput, TenantSettingsUncheckedUpdateManyInput>
    /**
     * Filter which TenantSettings to update
     */
    where?: TenantSettingsWhereInput
    /**
     * Limit how many TenantSettings to update.
     */
    limit?: number
  }

  /**
   * TenantSettings updateManyAndReturn
   */
  export type TenantSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * The data used to update TenantSettings.
     */
    data: XOR<TenantSettingsUpdateManyMutationInput, TenantSettingsUncheckedUpdateManyInput>
    /**
     * Filter which TenantSettings to update
     */
    where?: TenantSettingsWhereInput
    /**
     * Limit how many TenantSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TenantSettings upsert
   */
  export type TenantSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the TenantSettings to update in case it exists.
     */
    where: TenantSettingsWhereUniqueInput
    /**
     * In case the TenantSettings found by the `where` argument doesn't exist, create a new TenantSettings with this data.
     */
    create: XOR<TenantSettingsCreateInput, TenantSettingsUncheckedCreateInput>
    /**
     * In case the TenantSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantSettingsUpdateInput, TenantSettingsUncheckedUpdateInput>
  }

  /**
   * TenantSettings delete
   */
  export type TenantSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
    /**
     * Filter which TenantSettings to delete.
     */
    where: TenantSettingsWhereUniqueInput
  }

  /**
   * TenantSettings deleteMany
   */
  export type TenantSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantSettings to delete
     */
    where?: TenantSettingsWhereInput
    /**
     * Limit how many TenantSettings to delete.
     */
    limit?: number
  }

  /**
   * TenantSettings without action
   */
  export type TenantSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantSettings
     */
    select?: TenantSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TenantSettings
     */
    omit?: TenantSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantSettingsInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    tenantId: string | null
    employeeId: string | null
    password: string | null
    role: $Enums.UserRole | null
    firstName: string | null
    lastName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    tenantId: string | null
    employeeId: string | null
    password: string | null
    role: $Enums.UserRole | null
    firstName: string | null
    lastName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    tenantId: number
    employeeId: number
    password: number
    role: number
    firstName: number
    lastName: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    tenantId?: true
    employeeId?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    tenantId?: true
    employeeId?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    tenantId?: true
    employeeId?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    emailVerified: Date | null
    image: string | null
    tenantId: string
    employeeId: string
    password: string | null
    role: $Enums.UserRole
    firstName: string | null
    lastName: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    tenantId?: boolean
    employeeId?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    assignments?: boolean | User$assignmentsArgs<ExtArgs>
    workOrders?: boolean | User$workOrdersArgs<ExtArgs>
    labor?: boolean | User$laborArgs<ExtArgs>
    incidents?: boolean | User$incidentsArgs<ExtArgs>
    workOrderLogs?: boolean | User$workOrderLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    tenantId?: boolean
    employeeId?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    tenantId?: boolean
    employeeId?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    tenantId?: boolean
    employeeId?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "tenantId" | "employeeId" | "password" | "role" | "firstName" | "lastName" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    assignments?: boolean | User$assignmentsArgs<ExtArgs>
    workOrders?: boolean | User$workOrdersArgs<ExtArgs>
    labor?: boolean | User$laborArgs<ExtArgs>
    incidents?: boolean | User$incidentsArgs<ExtArgs>
    workOrderLogs?: boolean | User$workOrderLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      assignments: Prisma.$MaintenanceAssignmentPayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderAssignmentPayload<ExtArgs>[]
      labor: Prisma.$WorkOrderLaborPayload<ExtArgs>[]
      incidents: Prisma.$IncidentPayload<ExtArgs>[]
      workOrderLogs: Prisma.$WorkOrderLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      emailVerified: Date | null
      image: string | null
      tenantId: string
      employeeId: string
      password: string | null
      role: $Enums.UserRole
      firstName: string | null
      lastName: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignments<T extends User$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workOrders<T extends User$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    labor<T extends User$laborArgs<ExtArgs> = {}>(args?: Subset<T, User$laborArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incidents<T extends User$incidentsArgs<ExtArgs> = {}>(args?: Subset<T, User$incidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workOrderLogs<T extends User$workOrderLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$workOrderLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly tenantId: FieldRef<"User", 'String'>
    readonly employeeId: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.assignments
   */
  export type User$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    where?: MaintenanceAssignmentWhereInput
    orderBy?: MaintenanceAssignmentOrderByWithRelationInput | MaintenanceAssignmentOrderByWithRelationInput[]
    cursor?: MaintenanceAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceAssignmentScalarFieldEnum | MaintenanceAssignmentScalarFieldEnum[]
  }

  /**
   * User.workOrders
   */
  export type User$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    where?: WorkOrderAssignmentWhereInput
    orderBy?: WorkOrderAssignmentOrderByWithRelationInput | WorkOrderAssignmentOrderByWithRelationInput[]
    cursor?: WorkOrderAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderAssignmentScalarFieldEnum | WorkOrderAssignmentScalarFieldEnum[]
  }

  /**
   * User.labor
   */
  export type User$laborArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    where?: WorkOrderLaborWhereInput
    orderBy?: WorkOrderLaborOrderByWithRelationInput | WorkOrderLaborOrderByWithRelationInput[]
    cursor?: WorkOrderLaborWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderLaborScalarFieldEnum | WorkOrderLaborScalarFieldEnum[]
  }

  /**
   * User.incidents
   */
  export type User$incidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    where?: IncidentWhereInput
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    cursor?: IncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * User.workOrderLogs
   */
  export type User$workOrderLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    where?: WorkOrderLogWhereInput
    orderBy?: WorkOrderLogOrderByWithRelationInput | WorkOrderLogOrderByWithRelationInput[]
    cursor?: WorkOrderLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderLogScalarFieldEnum | WorkOrderLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires" | "createdAt" | "updatedAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model AssetCategory
   */

  export type AggregateAssetCategory = {
    _count: AssetCategoryCountAggregateOutputType | null
    _min: AssetCategoryMinAggregateOutputType | null
    _max: AssetCategoryMaxAggregateOutputType | null
  }

  export type AssetCategoryMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    industry: $Enums.IndustryType | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetCategoryMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    industry: $Enums.IndustryType | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetCategoryCountAggregateOutputType = {
    id: number
    tenantId: number
    name: number
    industry: number
    description: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetCategoryMinAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    industry?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetCategoryMaxAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    industry?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetCategoryCountAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    industry?: true
    description?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetCategory to aggregate.
     */
    where?: AssetCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetCategories to fetch.
     */
    orderBy?: AssetCategoryOrderByWithRelationInput | AssetCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetCategories
    **/
    _count?: true | AssetCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetCategoryMaxAggregateInputType
  }

  export type GetAssetCategoryAggregateType<T extends AssetCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetCategory[P]>
      : GetScalarType<T[P], AggregateAssetCategory[P]>
  }




  export type AssetCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetCategoryWhereInput
    orderBy?: AssetCategoryOrderByWithAggregationInput | AssetCategoryOrderByWithAggregationInput[]
    by: AssetCategoryScalarFieldEnum[] | AssetCategoryScalarFieldEnum
    having?: AssetCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCategoryCountAggregateInputType | true
    _min?: AssetCategoryMinAggregateInputType
    _max?: AssetCategoryMaxAggregateInputType
  }

  export type AssetCategoryGroupByOutputType = {
    id: string
    tenantId: string
    name: string
    industry: $Enums.IndustryType
    description: string | null
    metadata: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: AssetCategoryCountAggregateOutputType | null
    _min: AssetCategoryMinAggregateOutputType | null
    _max: AssetCategoryMaxAggregateOutputType | null
  }

  type GetAssetCategoryGroupByPayload<T extends AssetCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], AssetCategoryGroupByOutputType[P]>
        }
      >
    >


  export type AssetCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    industry?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetTypes?: boolean | AssetCategory$assetTypesArgs<ExtArgs>
    _count?: boolean | AssetCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetCategory"]>

  export type AssetCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    industry?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetCategory"]>

  export type AssetCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    industry?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetCategory"]>

  export type AssetCategorySelectScalar = {
    id?: boolean
    tenantId?: boolean
    name?: boolean
    industry?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "name" | "industry" | "description" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["assetCategory"]>
  export type AssetCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetTypes?: boolean | AssetCategory$assetTypesArgs<ExtArgs>
    _count?: boolean | AssetCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type AssetCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $AssetCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetCategory"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      assetTypes: Prisma.$AssetTypePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      name: string
      industry: $Enums.IndustryType
      description: string | null
      metadata: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assetCategory"]>
    composites: {}
  }

  type AssetCategoryGetPayload<S extends boolean | null | undefined | AssetCategoryDefaultArgs> = $Result.GetResult<Prisma.$AssetCategoryPayload, S>

  type AssetCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetCategoryCountAggregateInputType | true
    }

  export interface AssetCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetCategory'], meta: { name: 'AssetCategory' } }
    /**
     * Find zero or one AssetCategory that matches the filter.
     * @param {AssetCategoryFindUniqueArgs} args - Arguments to find a AssetCategory
     * @example
     * // Get one AssetCategory
     * const assetCategory = await prisma.assetCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetCategoryFindUniqueArgs>(args: SelectSubset<T, AssetCategoryFindUniqueArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssetCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetCategoryFindUniqueOrThrowArgs} args - Arguments to find a AssetCategory
     * @example
     * // Get one AssetCategory
     * const assetCategory = await prisma.assetCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCategoryFindFirstArgs} args - Arguments to find a AssetCategory
     * @example
     * // Get one AssetCategory
     * const assetCategory = await prisma.assetCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetCategoryFindFirstArgs>(args?: SelectSubset<T, AssetCategoryFindFirstArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCategoryFindFirstOrThrowArgs} args - Arguments to find a AssetCategory
     * @example
     * // Get one AssetCategory
     * const assetCategory = await prisma.assetCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssetCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetCategories
     * const assetCategories = await prisma.assetCategory.findMany()
     * 
     * // Get first 10 AssetCategories
     * const assetCategories = await prisma.assetCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetCategoryWithIdOnly = await prisma.assetCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetCategoryFindManyArgs>(args?: SelectSubset<T, AssetCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssetCategory.
     * @param {AssetCategoryCreateArgs} args - Arguments to create a AssetCategory.
     * @example
     * // Create one AssetCategory
     * const AssetCategory = await prisma.assetCategory.create({
     *   data: {
     *     // ... data to create a AssetCategory
     *   }
     * })
     * 
     */
    create<T extends AssetCategoryCreateArgs>(args: SelectSubset<T, AssetCategoryCreateArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssetCategories.
     * @param {AssetCategoryCreateManyArgs} args - Arguments to create many AssetCategories.
     * @example
     * // Create many AssetCategories
     * const assetCategory = await prisma.assetCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCategoryCreateManyArgs>(args?: SelectSubset<T, AssetCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetCategories and returns the data saved in the database.
     * @param {AssetCategoryCreateManyAndReturnArgs} args - Arguments to create many AssetCategories.
     * @example
     * // Create many AssetCategories
     * const assetCategory = await prisma.assetCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetCategories and only return the `id`
     * const assetCategoryWithIdOnly = await prisma.assetCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssetCategory.
     * @param {AssetCategoryDeleteArgs} args - Arguments to delete one AssetCategory.
     * @example
     * // Delete one AssetCategory
     * const AssetCategory = await prisma.assetCategory.delete({
     *   where: {
     *     // ... filter to delete one AssetCategory
     *   }
     * })
     * 
     */
    delete<T extends AssetCategoryDeleteArgs>(args: SelectSubset<T, AssetCategoryDeleteArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssetCategory.
     * @param {AssetCategoryUpdateArgs} args - Arguments to update one AssetCategory.
     * @example
     * // Update one AssetCategory
     * const assetCategory = await prisma.assetCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetCategoryUpdateArgs>(args: SelectSubset<T, AssetCategoryUpdateArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssetCategories.
     * @param {AssetCategoryDeleteManyArgs} args - Arguments to filter AssetCategories to delete.
     * @example
     * // Delete a few AssetCategories
     * const { count } = await prisma.assetCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetCategoryDeleteManyArgs>(args?: SelectSubset<T, AssetCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetCategories
     * const assetCategory = await prisma.assetCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetCategoryUpdateManyArgs>(args: SelectSubset<T, AssetCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetCategories and returns the data updated in the database.
     * @param {AssetCategoryUpdateManyAndReturnArgs} args - Arguments to update many AssetCategories.
     * @example
     * // Update many AssetCategories
     * const assetCategory = await prisma.assetCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssetCategories and only return the `id`
     * const assetCategoryWithIdOnly = await prisma.assetCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssetCategory.
     * @param {AssetCategoryUpsertArgs} args - Arguments to update or create a AssetCategory.
     * @example
     * // Update or create a AssetCategory
     * const assetCategory = await prisma.assetCategory.upsert({
     *   create: {
     *     // ... data to create a AssetCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetCategory we want to update
     *   }
     * })
     */
    upsert<T extends AssetCategoryUpsertArgs>(args: SelectSubset<T, AssetCategoryUpsertArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssetCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCategoryCountArgs} args - Arguments to filter AssetCategories to count.
     * @example
     * // Count the number of AssetCategories
     * const count = await prisma.assetCategory.count({
     *   where: {
     *     // ... the filter for the AssetCategories we want to count
     *   }
     * })
    **/
    count<T extends AssetCategoryCountArgs>(
      args?: Subset<T, AssetCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetCategoryAggregateArgs>(args: Subset<T, AssetCategoryAggregateArgs>): Prisma.PrismaPromise<GetAssetCategoryAggregateType<T>>

    /**
     * Group by AssetCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetCategoryGroupByArgs['orderBy'] }
        : { orderBy?: AssetCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetCategory model
   */
  readonly fields: AssetCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assetTypes<T extends AssetCategory$assetTypesArgs<ExtArgs> = {}>(args?: Subset<T, AssetCategory$assetTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetCategory model
   */
  interface AssetCategoryFieldRefs {
    readonly id: FieldRef<"AssetCategory", 'String'>
    readonly tenantId: FieldRef<"AssetCategory", 'String'>
    readonly name: FieldRef<"AssetCategory", 'String'>
    readonly industry: FieldRef<"AssetCategory", 'IndustryType'>
    readonly description: FieldRef<"AssetCategory", 'String'>
    readonly metadata: FieldRef<"AssetCategory", 'Json'>
    readonly createdAt: FieldRef<"AssetCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"AssetCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssetCategory findUnique
   */
  export type AssetCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * Filter, which AssetCategory to fetch.
     */
    where: AssetCategoryWhereUniqueInput
  }

  /**
   * AssetCategory findUniqueOrThrow
   */
  export type AssetCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * Filter, which AssetCategory to fetch.
     */
    where: AssetCategoryWhereUniqueInput
  }

  /**
   * AssetCategory findFirst
   */
  export type AssetCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * Filter, which AssetCategory to fetch.
     */
    where?: AssetCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetCategories to fetch.
     */
    orderBy?: AssetCategoryOrderByWithRelationInput | AssetCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetCategories.
     */
    cursor?: AssetCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetCategories.
     */
    distinct?: AssetCategoryScalarFieldEnum | AssetCategoryScalarFieldEnum[]
  }

  /**
   * AssetCategory findFirstOrThrow
   */
  export type AssetCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * Filter, which AssetCategory to fetch.
     */
    where?: AssetCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetCategories to fetch.
     */
    orderBy?: AssetCategoryOrderByWithRelationInput | AssetCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetCategories.
     */
    cursor?: AssetCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetCategories.
     */
    distinct?: AssetCategoryScalarFieldEnum | AssetCategoryScalarFieldEnum[]
  }

  /**
   * AssetCategory findMany
   */
  export type AssetCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * Filter, which AssetCategories to fetch.
     */
    where?: AssetCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetCategories to fetch.
     */
    orderBy?: AssetCategoryOrderByWithRelationInput | AssetCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetCategories.
     */
    cursor?: AssetCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetCategories.
     */
    skip?: number
    distinct?: AssetCategoryScalarFieldEnum | AssetCategoryScalarFieldEnum[]
  }

  /**
   * AssetCategory create
   */
  export type AssetCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetCategory.
     */
    data: XOR<AssetCategoryCreateInput, AssetCategoryUncheckedCreateInput>
  }

  /**
   * AssetCategory createMany
   */
  export type AssetCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetCategories.
     */
    data: AssetCategoryCreateManyInput | AssetCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetCategory createManyAndReturn
   */
  export type AssetCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many AssetCategories.
     */
    data: AssetCategoryCreateManyInput | AssetCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetCategory update
   */
  export type AssetCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetCategory.
     */
    data: XOR<AssetCategoryUpdateInput, AssetCategoryUncheckedUpdateInput>
    /**
     * Choose, which AssetCategory to update.
     */
    where: AssetCategoryWhereUniqueInput
  }

  /**
   * AssetCategory updateMany
   */
  export type AssetCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetCategories.
     */
    data: XOR<AssetCategoryUpdateManyMutationInput, AssetCategoryUncheckedUpdateManyInput>
    /**
     * Filter which AssetCategories to update
     */
    where?: AssetCategoryWhereInput
    /**
     * Limit how many AssetCategories to update.
     */
    limit?: number
  }

  /**
   * AssetCategory updateManyAndReturn
   */
  export type AssetCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * The data used to update AssetCategories.
     */
    data: XOR<AssetCategoryUpdateManyMutationInput, AssetCategoryUncheckedUpdateManyInput>
    /**
     * Filter which AssetCategories to update
     */
    where?: AssetCategoryWhereInput
    /**
     * Limit how many AssetCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetCategory upsert
   */
  export type AssetCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetCategory to update in case it exists.
     */
    where: AssetCategoryWhereUniqueInput
    /**
     * In case the AssetCategory found by the `where` argument doesn't exist, create a new AssetCategory with this data.
     */
    create: XOR<AssetCategoryCreateInput, AssetCategoryUncheckedCreateInput>
    /**
     * In case the AssetCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetCategoryUpdateInput, AssetCategoryUncheckedUpdateInput>
  }

  /**
   * AssetCategory delete
   */
  export type AssetCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    /**
     * Filter which AssetCategory to delete.
     */
    where: AssetCategoryWhereUniqueInput
  }

  /**
   * AssetCategory deleteMany
   */
  export type AssetCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetCategories to delete
     */
    where?: AssetCategoryWhereInput
    /**
     * Limit how many AssetCategories to delete.
     */
    limit?: number
  }

  /**
   * AssetCategory.assetTypes
   */
  export type AssetCategory$assetTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    where?: AssetTypeWhereInput
    orderBy?: AssetTypeOrderByWithRelationInput | AssetTypeOrderByWithRelationInput[]
    cursor?: AssetTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetTypeScalarFieldEnum | AssetTypeScalarFieldEnum[]
  }

  /**
   * AssetCategory without action
   */
  export type AssetCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    createdAt: Date
    updatedAt: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires" | "createdAt" | "updatedAt", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
    readonly createdAt: FieldRef<"VerificationToken", 'DateTime'>
    readonly updatedAt: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model AssetType
   */

  export type AggregateAssetType = {
    _count: AssetTypeCountAggregateOutputType | null
    _avg: AssetTypeAvgAggregateOutputType | null
    _sum: AssetTypeSumAggregateOutputType | null
    _min: AssetTypeMinAggregateOutputType | null
    _max: AssetTypeMaxAggregateOutputType | null
  }

  export type AssetTypeAvgAggregateOutputType = {
    expectedLifespan: number | null
    maintenanceFrequency: number | null
    criticality: number | null
  }

  export type AssetTypeSumAggregateOutputType = {
    expectedLifespan: number | null
    maintenanceFrequency: number | null
    criticality: number | null
  }

  export type AssetTypeMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    categoryId: string | null
    name: string | null
    description: string | null
    expectedLifespan: number | null
    maintenanceFrequency: number | null
    criticality: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetTypeMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    categoryId: string | null
    name: string | null
    description: string | null
    expectedLifespan: number | null
    maintenanceFrequency: number | null
    criticality: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetTypeCountAggregateOutputType = {
    id: number
    tenantId: number
    categoryId: number
    name: number
    description: number
    expectedLifespan: number
    maintenanceFrequency: number
    criticality: number
    customFields: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetTypeAvgAggregateInputType = {
    expectedLifespan?: true
    maintenanceFrequency?: true
    criticality?: true
  }

  export type AssetTypeSumAggregateInputType = {
    expectedLifespan?: true
    maintenanceFrequency?: true
    criticality?: true
  }

  export type AssetTypeMinAggregateInputType = {
    id?: true
    tenantId?: true
    categoryId?: true
    name?: true
    description?: true
    expectedLifespan?: true
    maintenanceFrequency?: true
    criticality?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetTypeMaxAggregateInputType = {
    id?: true
    tenantId?: true
    categoryId?: true
    name?: true
    description?: true
    expectedLifespan?: true
    maintenanceFrequency?: true
    criticality?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetTypeCountAggregateInputType = {
    id?: true
    tenantId?: true
    categoryId?: true
    name?: true
    description?: true
    expectedLifespan?: true
    maintenanceFrequency?: true
    criticality?: true
    customFields?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetType to aggregate.
     */
    where?: AssetTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetTypes to fetch.
     */
    orderBy?: AssetTypeOrderByWithRelationInput | AssetTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetTypes
    **/
    _count?: true | AssetTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetTypeMaxAggregateInputType
  }

  export type GetAssetTypeAggregateType<T extends AssetTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetType[P]>
      : GetScalarType<T[P], AggregateAssetType[P]>
  }




  export type AssetTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetTypeWhereInput
    orderBy?: AssetTypeOrderByWithAggregationInput | AssetTypeOrderByWithAggregationInput[]
    by: AssetTypeScalarFieldEnum[] | AssetTypeScalarFieldEnum
    having?: AssetTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetTypeCountAggregateInputType | true
    _avg?: AssetTypeAvgAggregateInputType
    _sum?: AssetTypeSumAggregateInputType
    _min?: AssetTypeMinAggregateInputType
    _max?: AssetTypeMaxAggregateInputType
  }

  export type AssetTypeGroupByOutputType = {
    id: string
    tenantId: string
    categoryId: string | null
    name: string
    description: string | null
    expectedLifespan: number | null
    maintenanceFrequency: number | null
    criticality: number | null
    customFields: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: AssetTypeCountAggregateOutputType | null
    _avg: AssetTypeAvgAggregateOutputType | null
    _sum: AssetTypeSumAggregateOutputType | null
    _min: AssetTypeMinAggregateOutputType | null
    _max: AssetTypeMaxAggregateOutputType | null
  }

  type GetAssetTypeGroupByPayload<T extends AssetTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetTypeGroupByOutputType[P]>
            : GetScalarType<T[P], AssetTypeGroupByOutputType[P]>
        }
      >
    >


  export type AssetTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    expectedLifespan?: boolean
    maintenanceFrequency?: boolean
    criticality?: boolean
    customFields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    category?: boolean | AssetType$categoryArgs<ExtArgs>
    assets?: boolean | AssetType$assetsArgs<ExtArgs>
    _count?: boolean | AssetTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetType"]>

  export type AssetTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    expectedLifespan?: boolean
    maintenanceFrequency?: boolean
    criticality?: boolean
    customFields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    category?: boolean | AssetType$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["assetType"]>

  export type AssetTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    expectedLifespan?: boolean
    maintenanceFrequency?: boolean
    criticality?: boolean
    customFields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    category?: boolean | AssetType$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["assetType"]>

  export type AssetTypeSelectScalar = {
    id?: boolean
    tenantId?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    expectedLifespan?: boolean
    maintenanceFrequency?: boolean
    criticality?: boolean
    customFields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "categoryId" | "name" | "description" | "expectedLifespan" | "maintenanceFrequency" | "criticality" | "customFields" | "createdAt" | "updatedAt", ExtArgs["result"]["assetType"]>
  export type AssetTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    category?: boolean | AssetType$categoryArgs<ExtArgs>
    assets?: boolean | AssetType$assetsArgs<ExtArgs>
    _count?: boolean | AssetTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    category?: boolean | AssetType$categoryArgs<ExtArgs>
  }
  export type AssetTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    category?: boolean | AssetType$categoryArgs<ExtArgs>
  }

  export type $AssetTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetType"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      category: Prisma.$AssetCategoryPayload<ExtArgs> | null
      assets: Prisma.$AssetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      categoryId: string | null
      name: string
      description: string | null
      expectedLifespan: number | null
      maintenanceFrequency: number | null
      criticality: number | null
      customFields: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assetType"]>
    composites: {}
  }

  type AssetTypeGetPayload<S extends boolean | null | undefined | AssetTypeDefaultArgs> = $Result.GetResult<Prisma.$AssetTypePayload, S>

  type AssetTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetTypeCountAggregateInputType | true
    }

  export interface AssetTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetType'], meta: { name: 'AssetType' } }
    /**
     * Find zero or one AssetType that matches the filter.
     * @param {AssetTypeFindUniqueArgs} args - Arguments to find a AssetType
     * @example
     * // Get one AssetType
     * const assetType = await prisma.assetType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetTypeFindUniqueArgs>(args: SelectSubset<T, AssetTypeFindUniqueArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssetType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetTypeFindUniqueOrThrowArgs} args - Arguments to find a AssetType
     * @example
     * // Get one AssetType
     * const assetType = await prisma.assetType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetTypeFindFirstArgs} args - Arguments to find a AssetType
     * @example
     * // Get one AssetType
     * const assetType = await prisma.assetType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetTypeFindFirstArgs>(args?: SelectSubset<T, AssetTypeFindFirstArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetTypeFindFirstOrThrowArgs} args - Arguments to find a AssetType
     * @example
     * // Get one AssetType
     * const assetType = await prisma.assetType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssetTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetTypes
     * const assetTypes = await prisma.assetType.findMany()
     * 
     * // Get first 10 AssetTypes
     * const assetTypes = await prisma.assetType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetTypeWithIdOnly = await prisma.assetType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetTypeFindManyArgs>(args?: SelectSubset<T, AssetTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssetType.
     * @param {AssetTypeCreateArgs} args - Arguments to create a AssetType.
     * @example
     * // Create one AssetType
     * const AssetType = await prisma.assetType.create({
     *   data: {
     *     // ... data to create a AssetType
     *   }
     * })
     * 
     */
    create<T extends AssetTypeCreateArgs>(args: SelectSubset<T, AssetTypeCreateArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssetTypes.
     * @param {AssetTypeCreateManyArgs} args - Arguments to create many AssetTypes.
     * @example
     * // Create many AssetTypes
     * const assetType = await prisma.assetType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetTypeCreateManyArgs>(args?: SelectSubset<T, AssetTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetTypes and returns the data saved in the database.
     * @param {AssetTypeCreateManyAndReturnArgs} args - Arguments to create many AssetTypes.
     * @example
     * // Create many AssetTypes
     * const assetType = await prisma.assetType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetTypes and only return the `id`
     * const assetTypeWithIdOnly = await prisma.assetType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssetType.
     * @param {AssetTypeDeleteArgs} args - Arguments to delete one AssetType.
     * @example
     * // Delete one AssetType
     * const AssetType = await prisma.assetType.delete({
     *   where: {
     *     // ... filter to delete one AssetType
     *   }
     * })
     * 
     */
    delete<T extends AssetTypeDeleteArgs>(args: SelectSubset<T, AssetTypeDeleteArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssetType.
     * @param {AssetTypeUpdateArgs} args - Arguments to update one AssetType.
     * @example
     * // Update one AssetType
     * const assetType = await prisma.assetType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetTypeUpdateArgs>(args: SelectSubset<T, AssetTypeUpdateArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssetTypes.
     * @param {AssetTypeDeleteManyArgs} args - Arguments to filter AssetTypes to delete.
     * @example
     * // Delete a few AssetTypes
     * const { count } = await prisma.assetType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetTypeDeleteManyArgs>(args?: SelectSubset<T, AssetTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetTypes
     * const assetType = await prisma.assetType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetTypeUpdateManyArgs>(args: SelectSubset<T, AssetTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetTypes and returns the data updated in the database.
     * @param {AssetTypeUpdateManyAndReturnArgs} args - Arguments to update many AssetTypes.
     * @example
     * // Update many AssetTypes
     * const assetType = await prisma.assetType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssetTypes and only return the `id`
     * const assetTypeWithIdOnly = await prisma.assetType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssetType.
     * @param {AssetTypeUpsertArgs} args - Arguments to update or create a AssetType.
     * @example
     * // Update or create a AssetType
     * const assetType = await prisma.assetType.upsert({
     *   create: {
     *     // ... data to create a AssetType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetType we want to update
     *   }
     * })
     */
    upsert<T extends AssetTypeUpsertArgs>(args: SelectSubset<T, AssetTypeUpsertArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssetTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetTypeCountArgs} args - Arguments to filter AssetTypes to count.
     * @example
     * // Count the number of AssetTypes
     * const count = await prisma.assetType.count({
     *   where: {
     *     // ... the filter for the AssetTypes we want to count
     *   }
     * })
    **/
    count<T extends AssetTypeCountArgs>(
      args?: Subset<T, AssetTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetTypeAggregateArgs>(args: Subset<T, AssetTypeAggregateArgs>): Prisma.PrismaPromise<GetAssetTypeAggregateType<T>>

    /**
     * Group by AssetType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetTypeGroupByArgs['orderBy'] }
        : { orderBy?: AssetTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetType model
   */
  readonly fields: AssetTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends AssetType$categoryArgs<ExtArgs> = {}>(args?: Subset<T, AssetType$categoryArgs<ExtArgs>>): Prisma__AssetCategoryClient<$Result.GetResult<Prisma.$AssetCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assets<T extends AssetType$assetsArgs<ExtArgs> = {}>(args?: Subset<T, AssetType$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetType model
   */
  interface AssetTypeFieldRefs {
    readonly id: FieldRef<"AssetType", 'String'>
    readonly tenantId: FieldRef<"AssetType", 'String'>
    readonly categoryId: FieldRef<"AssetType", 'String'>
    readonly name: FieldRef<"AssetType", 'String'>
    readonly description: FieldRef<"AssetType", 'String'>
    readonly expectedLifespan: FieldRef<"AssetType", 'Int'>
    readonly maintenanceFrequency: FieldRef<"AssetType", 'Int'>
    readonly criticality: FieldRef<"AssetType", 'Int'>
    readonly customFields: FieldRef<"AssetType", 'Json'>
    readonly createdAt: FieldRef<"AssetType", 'DateTime'>
    readonly updatedAt: FieldRef<"AssetType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssetType findUnique
   */
  export type AssetTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * Filter, which AssetType to fetch.
     */
    where: AssetTypeWhereUniqueInput
  }

  /**
   * AssetType findUniqueOrThrow
   */
  export type AssetTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * Filter, which AssetType to fetch.
     */
    where: AssetTypeWhereUniqueInput
  }

  /**
   * AssetType findFirst
   */
  export type AssetTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * Filter, which AssetType to fetch.
     */
    where?: AssetTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetTypes to fetch.
     */
    orderBy?: AssetTypeOrderByWithRelationInput | AssetTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetTypes.
     */
    cursor?: AssetTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetTypes.
     */
    distinct?: AssetTypeScalarFieldEnum | AssetTypeScalarFieldEnum[]
  }

  /**
   * AssetType findFirstOrThrow
   */
  export type AssetTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * Filter, which AssetType to fetch.
     */
    where?: AssetTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetTypes to fetch.
     */
    orderBy?: AssetTypeOrderByWithRelationInput | AssetTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetTypes.
     */
    cursor?: AssetTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetTypes.
     */
    distinct?: AssetTypeScalarFieldEnum | AssetTypeScalarFieldEnum[]
  }

  /**
   * AssetType findMany
   */
  export type AssetTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * Filter, which AssetTypes to fetch.
     */
    where?: AssetTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetTypes to fetch.
     */
    orderBy?: AssetTypeOrderByWithRelationInput | AssetTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetTypes.
     */
    cursor?: AssetTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetTypes.
     */
    skip?: number
    distinct?: AssetTypeScalarFieldEnum | AssetTypeScalarFieldEnum[]
  }

  /**
   * AssetType create
   */
  export type AssetTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetType.
     */
    data: XOR<AssetTypeCreateInput, AssetTypeUncheckedCreateInput>
  }

  /**
   * AssetType createMany
   */
  export type AssetTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetTypes.
     */
    data: AssetTypeCreateManyInput | AssetTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetType createManyAndReturn
   */
  export type AssetTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * The data used to create many AssetTypes.
     */
    data: AssetTypeCreateManyInput | AssetTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetType update
   */
  export type AssetTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetType.
     */
    data: XOR<AssetTypeUpdateInput, AssetTypeUncheckedUpdateInput>
    /**
     * Choose, which AssetType to update.
     */
    where: AssetTypeWhereUniqueInput
  }

  /**
   * AssetType updateMany
   */
  export type AssetTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetTypes.
     */
    data: XOR<AssetTypeUpdateManyMutationInput, AssetTypeUncheckedUpdateManyInput>
    /**
     * Filter which AssetTypes to update
     */
    where?: AssetTypeWhereInput
    /**
     * Limit how many AssetTypes to update.
     */
    limit?: number
  }

  /**
   * AssetType updateManyAndReturn
   */
  export type AssetTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * The data used to update AssetTypes.
     */
    data: XOR<AssetTypeUpdateManyMutationInput, AssetTypeUncheckedUpdateManyInput>
    /**
     * Filter which AssetTypes to update
     */
    where?: AssetTypeWhereInput
    /**
     * Limit how many AssetTypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetType upsert
   */
  export type AssetTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetType to update in case it exists.
     */
    where: AssetTypeWhereUniqueInput
    /**
     * In case the AssetType found by the `where` argument doesn't exist, create a new AssetType with this data.
     */
    create: XOR<AssetTypeCreateInput, AssetTypeUncheckedCreateInput>
    /**
     * In case the AssetType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetTypeUpdateInput, AssetTypeUncheckedUpdateInput>
  }

  /**
   * AssetType delete
   */
  export type AssetTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    /**
     * Filter which AssetType to delete.
     */
    where: AssetTypeWhereUniqueInput
  }

  /**
   * AssetType deleteMany
   */
  export type AssetTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetTypes to delete
     */
    where?: AssetTypeWhereInput
    /**
     * Limit how many AssetTypes to delete.
     */
    limit?: number
  }

  /**
   * AssetType.category
   */
  export type AssetType$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCategory
     */
    select?: AssetCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetCategory
     */
    omit?: AssetCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCategoryInclude<ExtArgs> | null
    where?: AssetCategoryWhereInput
  }

  /**
   * AssetType.assets
   */
  export type AssetType$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * AssetType without action
   */
  export type AssetTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
  }


  /**
   * Model Asset
   */

  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    assetTypeId: string | null
    name: string | null
    location: string | null
    status: $Enums.AssetStatus | null
    serialNumber: string | null
    purchaseDate: Date | null
    lastMaintenanceDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type AssetMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    assetTypeId: string | null
    name: string | null
    location: string | null
    status: $Enums.AssetStatus | null
    serialNumber: string | null
    purchaseDate: Date | null
    lastMaintenanceDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    tenantId: number
    assetTypeId: number
    name: number
    location: number
    status: number
    serialNumber: number
    purchaseDate: number
    lastMaintenanceDate: number
    metadata: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type AssetMinAggregateInputType = {
    id?: true
    tenantId?: true
    assetTypeId?: true
    name?: true
    location?: true
    status?: true
    serialNumber?: true
    purchaseDate?: true
    lastMaintenanceDate?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    tenantId?: true
    assetTypeId?: true
    name?: true
    location?: true
    status?: true
    serialNumber?: true
    purchaseDate?: true
    lastMaintenanceDate?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    tenantId?: true
    assetTypeId?: true
    name?: true
    location?: true
    status?: true
    serialNumber?: true
    purchaseDate?: true
    lastMaintenanceDate?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type AssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asset to aggregate.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithAggregationInput | AssetOrderByWithAggregationInput[]
    by: AssetScalarFieldEnum[] | AssetScalarFieldEnum
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }

  export type AssetGroupByOutputType = {
    id: string
    tenantId: string
    assetTypeId: string | null
    name: string
    location: string | null
    status: $Enums.AssetStatus
    serialNumber: string | null
    purchaseDate: Date | null
    lastMaintenanceDate: Date | null
    metadata: JsonValue
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: AssetCountAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    assetTypeId?: boolean
    name?: boolean
    location?: boolean
    status?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    lastMaintenanceDate?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetType?: boolean | Asset$assetTypeArgs<ExtArgs>
    assetMeters?: boolean | Asset$assetMetersArgs<ExtArgs>
    maintenance?: boolean | Asset$maintenanceArgs<ExtArgs>
    workOrders?: boolean | Asset$workOrdersArgs<ExtArgs>
    incidents?: boolean | Asset$incidentsArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    assetTypeId?: boolean
    name?: boolean
    location?: boolean
    status?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    lastMaintenanceDate?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetType?: boolean | Asset$assetTypeArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    assetTypeId?: boolean
    name?: boolean
    location?: boolean
    status?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    lastMaintenanceDate?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetType?: boolean | Asset$assetTypeArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectScalar = {
    id?: boolean
    tenantId?: boolean
    assetTypeId?: boolean
    name?: boolean
    location?: boolean
    status?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    lastMaintenanceDate?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type AssetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "assetTypeId" | "name" | "location" | "status" | "serialNumber" | "purchaseDate" | "lastMaintenanceDate" | "metadata" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["asset"]>
  export type AssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetType?: boolean | Asset$assetTypeArgs<ExtArgs>
    assetMeters?: boolean | Asset$assetMetersArgs<ExtArgs>
    maintenance?: boolean | Asset$maintenanceArgs<ExtArgs>
    workOrders?: boolean | Asset$workOrdersArgs<ExtArgs>
    incidents?: boolean | Asset$incidentsArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetType?: boolean | Asset$assetTypeArgs<ExtArgs>
  }
  export type AssetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetType?: boolean | Asset$assetTypeArgs<ExtArgs>
  }

  export type $AssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asset"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      assetType: Prisma.$AssetTypePayload<ExtArgs> | null
      assetMeters: Prisma.$AssetMeterPayload<ExtArgs>[]
      maintenance: Prisma.$MaintenanceAssetsPayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderAssetsPayload<ExtArgs>[]
      incidents: Prisma.$IncidentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      assetTypeId: string | null
      name: string
      location: string | null
      status: $Enums.AssetStatus
      serialNumber: string | null
      purchaseDate: Date | null
      lastMaintenanceDate: Date | null
      metadata: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["asset"]>
    composites: {}
  }

  type AssetGetPayload<S extends boolean | null | undefined | AssetDefaultArgs> = $Result.GetResult<Prisma.$AssetPayload, S>

  type AssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetCountAggregateInputType | true
    }

  export interface AssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } }
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetFindUniqueArgs>(args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Asset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetFindFirstArgs>(args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
     */
    create<T extends AssetCreateArgs>(args: SelectSubset<T, AssetCreateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assets.
     * @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCreateManyArgs>(args?: SelectSubset<T, AssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assets and returns the data saved in the database.
     * @param {AssetCreateManyAndReturnArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
     */
    delete<T extends AssetDeleteArgs>(args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetUpdateArgs>(args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetDeleteManyArgs>(args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetUpdateManyArgs>(args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets and returns the data updated in the database.
     * @param {AssetUpdateManyAndReturnArgs} args - Arguments to update many Assets.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
     */
    upsert<T extends AssetUpsertArgs>(args: SelectSubset<T, AssetUpsertArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asset model
   */
  readonly fields: AssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assetType<T extends Asset$assetTypeArgs<ExtArgs> = {}>(args?: Subset<T, Asset$assetTypeArgs<ExtArgs>>): Prisma__AssetTypeClient<$Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assetMeters<T extends Asset$assetMetersArgs<ExtArgs> = {}>(args?: Subset<T, Asset$assetMetersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    maintenance<T extends Asset$maintenanceArgs<ExtArgs> = {}>(args?: Subset<T, Asset$maintenanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workOrders<T extends Asset$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Asset$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incidents<T extends Asset$incidentsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$incidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asset model
   */
  interface AssetFieldRefs {
    readonly id: FieldRef<"Asset", 'String'>
    readonly tenantId: FieldRef<"Asset", 'String'>
    readonly assetTypeId: FieldRef<"Asset", 'String'>
    readonly name: FieldRef<"Asset", 'String'>
    readonly location: FieldRef<"Asset", 'String'>
    readonly status: FieldRef<"Asset", 'AssetStatus'>
    readonly serialNumber: FieldRef<"Asset", 'String'>
    readonly purchaseDate: FieldRef<"Asset", 'DateTime'>
    readonly lastMaintenanceDate: FieldRef<"Asset", 'DateTime'>
    readonly metadata: FieldRef<"Asset", 'Json'>
    readonly createdAt: FieldRef<"Asset", 'DateTime'>
    readonly updatedAt: FieldRef<"Asset", 'DateTime'>
    readonly deletedAt: FieldRef<"Asset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Asset findUnique
   */
  export type AssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findUniqueOrThrow
   */
  export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findFirst
   */
  export type AssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findFirstOrThrow
   */
  export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findMany
   */
  export type AssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Assets to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset create
   */
  export type AssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to create a Asset.
     */
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }

  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Asset createManyAndReturn
   */
  export type AssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset update
   */
  export type AssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to update a Asset.
     */
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to update.
     */
    limit?: number
  }

  /**
   * Asset updateManyAndReturn
   */
  export type AssetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset upsert
   */
  export type AssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The filter to search for the Asset to update in case it exists.
     */
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     */
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }

  /**
   * Asset delete
   */
  export type AssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter which Asset to delete.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assets to delete
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to delete.
     */
    limit?: number
  }

  /**
   * Asset.assetType
   */
  export type Asset$assetTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetType
     */
    select?: AssetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetType
     */
    omit?: AssetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetTypeInclude<ExtArgs> | null
    where?: AssetTypeWhereInput
  }

  /**
   * Asset.assetMeters
   */
  export type Asset$assetMetersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    where?: AssetMeterWhereInput
    orderBy?: AssetMeterOrderByWithRelationInput | AssetMeterOrderByWithRelationInput[]
    cursor?: AssetMeterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetMeterScalarFieldEnum | AssetMeterScalarFieldEnum[]
  }

  /**
   * Asset.maintenance
   */
  export type Asset$maintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    where?: MaintenanceAssetsWhereInput
    orderBy?: MaintenanceAssetsOrderByWithRelationInput | MaintenanceAssetsOrderByWithRelationInput[]
    cursor?: MaintenanceAssetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceAssetsScalarFieldEnum | MaintenanceAssetsScalarFieldEnum[]
  }

  /**
   * Asset.workOrders
   */
  export type Asset$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    where?: WorkOrderAssetsWhereInput
    orderBy?: WorkOrderAssetsOrderByWithRelationInput | WorkOrderAssetsOrderByWithRelationInput[]
    cursor?: WorkOrderAssetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderAssetsScalarFieldEnum | WorkOrderAssetsScalarFieldEnum[]
  }

  /**
   * Asset.incidents
   */
  export type Asset$incidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    where?: IncidentWhereInput
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    cursor?: IncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * Asset without action
   */
  export type AssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
  }


  /**
   * Model Meter
   */

  export type AggregateMeter = {
    _count: MeterCountAggregateOutputType | null
    _min: MeterMinAggregateOutputType | null
    _max: MeterMaxAggregateOutputType | null
  }

  export type MeterMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    unit: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeterMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    unit: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeterCountAggregateOutputType = {
    id: number
    tenantId: number
    name: number
    unit: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeterMinAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    unit?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeterMaxAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    unit?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeterCountAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    unit?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meter to aggregate.
     */
    where?: MeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meters to fetch.
     */
    orderBy?: MeterOrderByWithRelationInput | MeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meters
    **/
    _count?: true | MeterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeterMaxAggregateInputType
  }

  export type GetMeterAggregateType<T extends MeterAggregateArgs> = {
        [P in keyof T & keyof AggregateMeter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeter[P]>
      : GetScalarType<T[P], AggregateMeter[P]>
  }




  export type MeterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeterWhereInput
    orderBy?: MeterOrderByWithAggregationInput | MeterOrderByWithAggregationInput[]
    by: MeterScalarFieldEnum[] | MeterScalarFieldEnum
    having?: MeterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeterCountAggregateInputType | true
    _min?: MeterMinAggregateInputType
    _max?: MeterMaxAggregateInputType
  }

  export type MeterGroupByOutputType = {
    id: string
    tenantId: string
    name: string
    unit: string
    createdAt: Date
    updatedAt: Date
    _count: MeterCountAggregateOutputType | null
    _min: MeterMinAggregateOutputType | null
    _max: MeterMaxAggregateOutputType | null
  }

  type GetMeterGroupByPayload<T extends MeterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeterGroupByOutputType[P]>
            : GetScalarType<T[P], MeterGroupByOutputType[P]>
        }
      >
    >


  export type MeterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    unit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetMeters?: boolean | Meter$assetMetersArgs<ExtArgs>
    maintenance?: boolean | Meter$maintenanceArgs<ExtArgs>
    _count?: boolean | MeterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meter"]>

  export type MeterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    unit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meter"]>

  export type MeterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    unit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meter"]>

  export type MeterSelectScalar = {
    id?: boolean
    tenantId?: boolean
    name?: boolean
    unit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MeterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "name" | "unit" | "createdAt" | "updatedAt", ExtArgs["result"]["meter"]>
  export type MeterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    assetMeters?: boolean | Meter$assetMetersArgs<ExtArgs>
    maintenance?: boolean | Meter$maintenanceArgs<ExtArgs>
    _count?: boolean | MeterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MeterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type MeterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $MeterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meter"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      assetMeters: Prisma.$AssetMeterPayload<ExtArgs>[]
      maintenance: Prisma.$MaintenanceSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      name: string
      unit: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meter"]>
    composites: {}
  }

  type MeterGetPayload<S extends boolean | null | undefined | MeterDefaultArgs> = $Result.GetResult<Prisma.$MeterPayload, S>

  type MeterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeterCountAggregateInputType | true
    }

  export interface MeterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meter'], meta: { name: 'Meter' } }
    /**
     * Find zero or one Meter that matches the filter.
     * @param {MeterFindUniqueArgs} args - Arguments to find a Meter
     * @example
     * // Get one Meter
     * const meter = await prisma.meter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeterFindUniqueArgs>(args: SelectSubset<T, MeterFindUniqueArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Meter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeterFindUniqueOrThrowArgs} args - Arguments to find a Meter
     * @example
     * // Get one Meter
     * const meter = await prisma.meter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeterFindUniqueOrThrowArgs>(args: SelectSubset<T, MeterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterFindFirstArgs} args - Arguments to find a Meter
     * @example
     * // Get one Meter
     * const meter = await prisma.meter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeterFindFirstArgs>(args?: SelectSubset<T, MeterFindFirstArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterFindFirstOrThrowArgs} args - Arguments to find a Meter
     * @example
     * // Get one Meter
     * const meter = await prisma.meter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeterFindFirstOrThrowArgs>(args?: SelectSubset<T, MeterFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Meters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meters
     * const meters = await prisma.meter.findMany()
     * 
     * // Get first 10 Meters
     * const meters = await prisma.meter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meterWithIdOnly = await prisma.meter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeterFindManyArgs>(args?: SelectSubset<T, MeterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Meter.
     * @param {MeterCreateArgs} args - Arguments to create a Meter.
     * @example
     * // Create one Meter
     * const Meter = await prisma.meter.create({
     *   data: {
     *     // ... data to create a Meter
     *   }
     * })
     * 
     */
    create<T extends MeterCreateArgs>(args: SelectSubset<T, MeterCreateArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Meters.
     * @param {MeterCreateManyArgs} args - Arguments to create many Meters.
     * @example
     * // Create many Meters
     * const meter = await prisma.meter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeterCreateManyArgs>(args?: SelectSubset<T, MeterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Meters and returns the data saved in the database.
     * @param {MeterCreateManyAndReturnArgs} args - Arguments to create many Meters.
     * @example
     * // Create many Meters
     * const meter = await prisma.meter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Meters and only return the `id`
     * const meterWithIdOnly = await prisma.meter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeterCreateManyAndReturnArgs>(args?: SelectSubset<T, MeterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Meter.
     * @param {MeterDeleteArgs} args - Arguments to delete one Meter.
     * @example
     * // Delete one Meter
     * const Meter = await prisma.meter.delete({
     *   where: {
     *     // ... filter to delete one Meter
     *   }
     * })
     * 
     */
    delete<T extends MeterDeleteArgs>(args: SelectSubset<T, MeterDeleteArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Meter.
     * @param {MeterUpdateArgs} args - Arguments to update one Meter.
     * @example
     * // Update one Meter
     * const meter = await prisma.meter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeterUpdateArgs>(args: SelectSubset<T, MeterUpdateArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Meters.
     * @param {MeterDeleteManyArgs} args - Arguments to filter Meters to delete.
     * @example
     * // Delete a few Meters
     * const { count } = await prisma.meter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeterDeleteManyArgs>(args?: SelectSubset<T, MeterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meters
     * const meter = await prisma.meter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeterUpdateManyArgs>(args: SelectSubset<T, MeterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meters and returns the data updated in the database.
     * @param {MeterUpdateManyAndReturnArgs} args - Arguments to update many Meters.
     * @example
     * // Update many Meters
     * const meter = await prisma.meter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Meters and only return the `id`
     * const meterWithIdOnly = await prisma.meter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MeterUpdateManyAndReturnArgs>(args: SelectSubset<T, MeterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Meter.
     * @param {MeterUpsertArgs} args - Arguments to update or create a Meter.
     * @example
     * // Update or create a Meter
     * const meter = await prisma.meter.upsert({
     *   create: {
     *     // ... data to create a Meter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meter we want to update
     *   }
     * })
     */
    upsert<T extends MeterUpsertArgs>(args: SelectSubset<T, MeterUpsertArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Meters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterCountArgs} args - Arguments to filter Meters to count.
     * @example
     * // Count the number of Meters
     * const count = await prisma.meter.count({
     *   where: {
     *     // ... the filter for the Meters we want to count
     *   }
     * })
    **/
    count<T extends MeterCountArgs>(
      args?: Subset<T, MeterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeterAggregateArgs>(args: Subset<T, MeterAggregateArgs>): Prisma.PrismaPromise<GetMeterAggregateType<T>>

    /**
     * Group by Meter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeterGroupByArgs['orderBy'] }
        : { orderBy?: MeterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meter model
   */
  readonly fields: MeterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assetMeters<T extends Meter$assetMetersArgs<ExtArgs> = {}>(args?: Subset<T, Meter$assetMetersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    maintenance<T extends Meter$maintenanceArgs<ExtArgs> = {}>(args?: Subset<T, Meter$maintenanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meter model
   */
  interface MeterFieldRefs {
    readonly id: FieldRef<"Meter", 'String'>
    readonly tenantId: FieldRef<"Meter", 'String'>
    readonly name: FieldRef<"Meter", 'String'>
    readonly unit: FieldRef<"Meter", 'String'>
    readonly createdAt: FieldRef<"Meter", 'DateTime'>
    readonly updatedAt: FieldRef<"Meter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Meter findUnique
   */
  export type MeterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * Filter, which Meter to fetch.
     */
    where: MeterWhereUniqueInput
  }

  /**
   * Meter findUniqueOrThrow
   */
  export type MeterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * Filter, which Meter to fetch.
     */
    where: MeterWhereUniqueInput
  }

  /**
   * Meter findFirst
   */
  export type MeterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * Filter, which Meter to fetch.
     */
    where?: MeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meters to fetch.
     */
    orderBy?: MeterOrderByWithRelationInput | MeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meters.
     */
    cursor?: MeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meters.
     */
    distinct?: MeterScalarFieldEnum | MeterScalarFieldEnum[]
  }

  /**
   * Meter findFirstOrThrow
   */
  export type MeterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * Filter, which Meter to fetch.
     */
    where?: MeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meters to fetch.
     */
    orderBy?: MeterOrderByWithRelationInput | MeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meters.
     */
    cursor?: MeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meters.
     */
    distinct?: MeterScalarFieldEnum | MeterScalarFieldEnum[]
  }

  /**
   * Meter findMany
   */
  export type MeterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * Filter, which Meters to fetch.
     */
    where?: MeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meters to fetch.
     */
    orderBy?: MeterOrderByWithRelationInput | MeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meters.
     */
    cursor?: MeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meters.
     */
    skip?: number
    distinct?: MeterScalarFieldEnum | MeterScalarFieldEnum[]
  }

  /**
   * Meter create
   */
  export type MeterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * The data needed to create a Meter.
     */
    data: XOR<MeterCreateInput, MeterUncheckedCreateInput>
  }

  /**
   * Meter createMany
   */
  export type MeterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meters.
     */
    data: MeterCreateManyInput | MeterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meter createManyAndReturn
   */
  export type MeterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * The data used to create many Meters.
     */
    data: MeterCreateManyInput | MeterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meter update
   */
  export type MeterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * The data needed to update a Meter.
     */
    data: XOR<MeterUpdateInput, MeterUncheckedUpdateInput>
    /**
     * Choose, which Meter to update.
     */
    where: MeterWhereUniqueInput
  }

  /**
   * Meter updateMany
   */
  export type MeterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meters.
     */
    data: XOR<MeterUpdateManyMutationInput, MeterUncheckedUpdateManyInput>
    /**
     * Filter which Meters to update
     */
    where?: MeterWhereInput
    /**
     * Limit how many Meters to update.
     */
    limit?: number
  }

  /**
   * Meter updateManyAndReturn
   */
  export type MeterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * The data used to update Meters.
     */
    data: XOR<MeterUpdateManyMutationInput, MeterUncheckedUpdateManyInput>
    /**
     * Filter which Meters to update
     */
    where?: MeterWhereInput
    /**
     * Limit how many Meters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meter upsert
   */
  export type MeterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * The filter to search for the Meter to update in case it exists.
     */
    where: MeterWhereUniqueInput
    /**
     * In case the Meter found by the `where` argument doesn't exist, create a new Meter with this data.
     */
    create: XOR<MeterCreateInput, MeterUncheckedCreateInput>
    /**
     * In case the Meter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeterUpdateInput, MeterUncheckedUpdateInput>
  }

  /**
   * Meter delete
   */
  export type MeterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    /**
     * Filter which Meter to delete.
     */
    where: MeterWhereUniqueInput
  }

  /**
   * Meter deleteMany
   */
  export type MeterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meters to delete
     */
    where?: MeterWhereInput
    /**
     * Limit how many Meters to delete.
     */
    limit?: number
  }

  /**
   * Meter.assetMeters
   */
  export type Meter$assetMetersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    where?: AssetMeterWhereInput
    orderBy?: AssetMeterOrderByWithRelationInput | AssetMeterOrderByWithRelationInput[]
    cursor?: AssetMeterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetMeterScalarFieldEnum | AssetMeterScalarFieldEnum[]
  }

  /**
   * Meter.maintenance
   */
  export type Meter$maintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    where?: MaintenanceScheduleWhereInput
    orderBy?: MaintenanceScheduleOrderByWithRelationInput | MaintenanceScheduleOrderByWithRelationInput[]
    cursor?: MaintenanceScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceScheduleScalarFieldEnum | MaintenanceScheduleScalarFieldEnum[]
  }

  /**
   * Meter without action
   */
  export type MeterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
  }


  /**
   * Model AssetMeter
   */

  export type AggregateAssetMeter = {
    _count: AssetMeterCountAggregateOutputType | null
    _avg: AssetMeterAvgAggregateOutputType | null
    _sum: AssetMeterSumAggregateOutputType | null
    _min: AssetMeterMinAggregateOutputType | null
    _max: AssetMeterMaxAggregateOutputType | null
  }

  export type AssetMeterAvgAggregateOutputType = {
    initialReading: Decimal | null
  }

  export type AssetMeterSumAggregateOutputType = {
    initialReading: Decimal | null
  }

  export type AssetMeterMinAggregateOutputType = {
    id: string | null
    assetId: string | null
    meterId: string | null
    initialReading: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetMeterMaxAggregateOutputType = {
    id: string | null
    assetId: string | null
    meterId: string | null
    initialReading: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetMeterCountAggregateOutputType = {
    id: number
    assetId: number
    meterId: number
    initialReading: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetMeterAvgAggregateInputType = {
    initialReading?: true
  }

  export type AssetMeterSumAggregateInputType = {
    initialReading?: true
  }

  export type AssetMeterMinAggregateInputType = {
    id?: true
    assetId?: true
    meterId?: true
    initialReading?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetMeterMaxAggregateInputType = {
    id?: true
    assetId?: true
    meterId?: true
    initialReading?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetMeterCountAggregateInputType = {
    id?: true
    assetId?: true
    meterId?: true
    initialReading?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetMeterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetMeter to aggregate.
     */
    where?: AssetMeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetMeters to fetch.
     */
    orderBy?: AssetMeterOrderByWithRelationInput | AssetMeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetMeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetMeters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetMeters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetMeters
    **/
    _count?: true | AssetMeterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetMeterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetMeterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMeterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMeterMaxAggregateInputType
  }

  export type GetAssetMeterAggregateType<T extends AssetMeterAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetMeter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetMeter[P]>
      : GetScalarType<T[P], AggregateAssetMeter[P]>
  }




  export type AssetMeterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetMeterWhereInput
    orderBy?: AssetMeterOrderByWithAggregationInput | AssetMeterOrderByWithAggregationInput[]
    by: AssetMeterScalarFieldEnum[] | AssetMeterScalarFieldEnum
    having?: AssetMeterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetMeterCountAggregateInputType | true
    _avg?: AssetMeterAvgAggregateInputType
    _sum?: AssetMeterSumAggregateInputType
    _min?: AssetMeterMinAggregateInputType
    _max?: AssetMeterMaxAggregateInputType
  }

  export type AssetMeterGroupByOutputType = {
    id: string
    assetId: string
    meterId: string
    initialReading: Decimal
    createdAt: Date
    updatedAt: Date
    _count: AssetMeterCountAggregateOutputType | null
    _avg: AssetMeterAvgAggregateOutputType | null
    _sum: AssetMeterSumAggregateOutputType | null
    _min: AssetMeterMinAggregateOutputType | null
    _max: AssetMeterMaxAggregateOutputType | null
  }

  type GetAssetMeterGroupByPayload<T extends AssetMeterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetMeterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetMeterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetMeterGroupByOutputType[P]>
            : GetScalarType<T[P], AssetMeterGroupByOutputType[P]>
        }
      >
    >


  export type AssetMeterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    meterId?: boolean
    initialReading?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    meter?: boolean | MeterDefaultArgs<ExtArgs>
    readings?: boolean | AssetMeter$readingsArgs<ExtArgs>
    _count?: boolean | AssetMeterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetMeter"]>

  export type AssetMeterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    meterId?: boolean
    initialReading?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    meter?: boolean | MeterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetMeter"]>

  export type AssetMeterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    meterId?: boolean
    initialReading?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    meter?: boolean | MeterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetMeter"]>

  export type AssetMeterSelectScalar = {
    id?: boolean
    assetId?: boolean
    meterId?: boolean
    initialReading?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetMeterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assetId" | "meterId" | "initialReading" | "createdAt" | "updatedAt", ExtArgs["result"]["assetMeter"]>
  export type AssetMeterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    meter?: boolean | MeterDefaultArgs<ExtArgs>
    readings?: boolean | AssetMeter$readingsArgs<ExtArgs>
    _count?: boolean | AssetMeterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetMeterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    meter?: boolean | MeterDefaultArgs<ExtArgs>
  }
  export type AssetMeterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    meter?: boolean | MeterDefaultArgs<ExtArgs>
  }

  export type $AssetMeterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetMeter"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      meter: Prisma.$MeterPayload<ExtArgs>
      readings: Prisma.$MeterReadingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assetId: string
      meterId: string
      initialReading: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assetMeter"]>
    composites: {}
  }

  type AssetMeterGetPayload<S extends boolean | null | undefined | AssetMeterDefaultArgs> = $Result.GetResult<Prisma.$AssetMeterPayload, S>

  type AssetMeterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetMeterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetMeterCountAggregateInputType | true
    }

  export interface AssetMeterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetMeter'], meta: { name: 'AssetMeter' } }
    /**
     * Find zero or one AssetMeter that matches the filter.
     * @param {AssetMeterFindUniqueArgs} args - Arguments to find a AssetMeter
     * @example
     * // Get one AssetMeter
     * const assetMeter = await prisma.assetMeter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetMeterFindUniqueArgs>(args: SelectSubset<T, AssetMeterFindUniqueArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssetMeter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetMeterFindUniqueOrThrowArgs} args - Arguments to find a AssetMeter
     * @example
     * // Get one AssetMeter
     * const assetMeter = await prisma.assetMeter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetMeterFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetMeterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetMeter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetMeterFindFirstArgs} args - Arguments to find a AssetMeter
     * @example
     * // Get one AssetMeter
     * const assetMeter = await prisma.assetMeter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetMeterFindFirstArgs>(args?: SelectSubset<T, AssetMeterFindFirstArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetMeter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetMeterFindFirstOrThrowArgs} args - Arguments to find a AssetMeter
     * @example
     * // Get one AssetMeter
     * const assetMeter = await prisma.assetMeter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetMeterFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetMeterFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssetMeters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetMeterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetMeters
     * const assetMeters = await prisma.assetMeter.findMany()
     * 
     * // Get first 10 AssetMeters
     * const assetMeters = await prisma.assetMeter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetMeterWithIdOnly = await prisma.assetMeter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetMeterFindManyArgs>(args?: SelectSubset<T, AssetMeterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssetMeter.
     * @param {AssetMeterCreateArgs} args - Arguments to create a AssetMeter.
     * @example
     * // Create one AssetMeter
     * const AssetMeter = await prisma.assetMeter.create({
     *   data: {
     *     // ... data to create a AssetMeter
     *   }
     * })
     * 
     */
    create<T extends AssetMeterCreateArgs>(args: SelectSubset<T, AssetMeterCreateArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssetMeters.
     * @param {AssetMeterCreateManyArgs} args - Arguments to create many AssetMeters.
     * @example
     * // Create many AssetMeters
     * const assetMeter = await prisma.assetMeter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetMeterCreateManyArgs>(args?: SelectSubset<T, AssetMeterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetMeters and returns the data saved in the database.
     * @param {AssetMeterCreateManyAndReturnArgs} args - Arguments to create many AssetMeters.
     * @example
     * // Create many AssetMeters
     * const assetMeter = await prisma.assetMeter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetMeters and only return the `id`
     * const assetMeterWithIdOnly = await prisma.assetMeter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetMeterCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetMeterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssetMeter.
     * @param {AssetMeterDeleteArgs} args - Arguments to delete one AssetMeter.
     * @example
     * // Delete one AssetMeter
     * const AssetMeter = await prisma.assetMeter.delete({
     *   where: {
     *     // ... filter to delete one AssetMeter
     *   }
     * })
     * 
     */
    delete<T extends AssetMeterDeleteArgs>(args: SelectSubset<T, AssetMeterDeleteArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssetMeter.
     * @param {AssetMeterUpdateArgs} args - Arguments to update one AssetMeter.
     * @example
     * // Update one AssetMeter
     * const assetMeter = await prisma.assetMeter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetMeterUpdateArgs>(args: SelectSubset<T, AssetMeterUpdateArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssetMeters.
     * @param {AssetMeterDeleteManyArgs} args - Arguments to filter AssetMeters to delete.
     * @example
     * // Delete a few AssetMeters
     * const { count } = await prisma.assetMeter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetMeterDeleteManyArgs>(args?: SelectSubset<T, AssetMeterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetMeters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetMeterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetMeters
     * const assetMeter = await prisma.assetMeter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetMeterUpdateManyArgs>(args: SelectSubset<T, AssetMeterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetMeters and returns the data updated in the database.
     * @param {AssetMeterUpdateManyAndReturnArgs} args - Arguments to update many AssetMeters.
     * @example
     * // Update many AssetMeters
     * const assetMeter = await prisma.assetMeter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssetMeters and only return the `id`
     * const assetMeterWithIdOnly = await prisma.assetMeter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetMeterUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetMeterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssetMeter.
     * @param {AssetMeterUpsertArgs} args - Arguments to update or create a AssetMeter.
     * @example
     * // Update or create a AssetMeter
     * const assetMeter = await prisma.assetMeter.upsert({
     *   create: {
     *     // ... data to create a AssetMeter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetMeter we want to update
     *   }
     * })
     */
    upsert<T extends AssetMeterUpsertArgs>(args: SelectSubset<T, AssetMeterUpsertArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssetMeters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetMeterCountArgs} args - Arguments to filter AssetMeters to count.
     * @example
     * // Count the number of AssetMeters
     * const count = await prisma.assetMeter.count({
     *   where: {
     *     // ... the filter for the AssetMeters we want to count
     *   }
     * })
    **/
    count<T extends AssetMeterCountArgs>(
      args?: Subset<T, AssetMeterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetMeterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetMeter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetMeterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetMeterAggregateArgs>(args: Subset<T, AssetMeterAggregateArgs>): Prisma.PrismaPromise<GetAssetMeterAggregateType<T>>

    /**
     * Group by AssetMeter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetMeterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetMeterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetMeterGroupByArgs['orderBy'] }
        : { orderBy?: AssetMeterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetMeterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetMeterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetMeter model
   */
  readonly fields: AssetMeterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetMeter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetMeterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    meter<T extends MeterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeterDefaultArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    readings<T extends AssetMeter$readingsArgs<ExtArgs> = {}>(args?: Subset<T, AssetMeter$readingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetMeter model
   */
  interface AssetMeterFieldRefs {
    readonly id: FieldRef<"AssetMeter", 'String'>
    readonly assetId: FieldRef<"AssetMeter", 'String'>
    readonly meterId: FieldRef<"AssetMeter", 'String'>
    readonly initialReading: FieldRef<"AssetMeter", 'Decimal'>
    readonly createdAt: FieldRef<"AssetMeter", 'DateTime'>
    readonly updatedAt: FieldRef<"AssetMeter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssetMeter findUnique
   */
  export type AssetMeterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * Filter, which AssetMeter to fetch.
     */
    where: AssetMeterWhereUniqueInput
  }

  /**
   * AssetMeter findUniqueOrThrow
   */
  export type AssetMeterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * Filter, which AssetMeter to fetch.
     */
    where: AssetMeterWhereUniqueInput
  }

  /**
   * AssetMeter findFirst
   */
  export type AssetMeterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * Filter, which AssetMeter to fetch.
     */
    where?: AssetMeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetMeters to fetch.
     */
    orderBy?: AssetMeterOrderByWithRelationInput | AssetMeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetMeters.
     */
    cursor?: AssetMeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetMeters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetMeters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetMeters.
     */
    distinct?: AssetMeterScalarFieldEnum | AssetMeterScalarFieldEnum[]
  }

  /**
   * AssetMeter findFirstOrThrow
   */
  export type AssetMeterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * Filter, which AssetMeter to fetch.
     */
    where?: AssetMeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetMeters to fetch.
     */
    orderBy?: AssetMeterOrderByWithRelationInput | AssetMeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetMeters.
     */
    cursor?: AssetMeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetMeters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetMeters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetMeters.
     */
    distinct?: AssetMeterScalarFieldEnum | AssetMeterScalarFieldEnum[]
  }

  /**
   * AssetMeter findMany
   */
  export type AssetMeterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * Filter, which AssetMeters to fetch.
     */
    where?: AssetMeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetMeters to fetch.
     */
    orderBy?: AssetMeterOrderByWithRelationInput | AssetMeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetMeters.
     */
    cursor?: AssetMeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetMeters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetMeters.
     */
    skip?: number
    distinct?: AssetMeterScalarFieldEnum | AssetMeterScalarFieldEnum[]
  }

  /**
   * AssetMeter create
   */
  export type AssetMeterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetMeter.
     */
    data: XOR<AssetMeterCreateInput, AssetMeterUncheckedCreateInput>
  }

  /**
   * AssetMeter createMany
   */
  export type AssetMeterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetMeters.
     */
    data: AssetMeterCreateManyInput | AssetMeterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetMeter createManyAndReturn
   */
  export type AssetMeterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * The data used to create many AssetMeters.
     */
    data: AssetMeterCreateManyInput | AssetMeterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetMeter update
   */
  export type AssetMeterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetMeter.
     */
    data: XOR<AssetMeterUpdateInput, AssetMeterUncheckedUpdateInput>
    /**
     * Choose, which AssetMeter to update.
     */
    where: AssetMeterWhereUniqueInput
  }

  /**
   * AssetMeter updateMany
   */
  export type AssetMeterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetMeters.
     */
    data: XOR<AssetMeterUpdateManyMutationInput, AssetMeterUncheckedUpdateManyInput>
    /**
     * Filter which AssetMeters to update
     */
    where?: AssetMeterWhereInput
    /**
     * Limit how many AssetMeters to update.
     */
    limit?: number
  }

  /**
   * AssetMeter updateManyAndReturn
   */
  export type AssetMeterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * The data used to update AssetMeters.
     */
    data: XOR<AssetMeterUpdateManyMutationInput, AssetMeterUncheckedUpdateManyInput>
    /**
     * Filter which AssetMeters to update
     */
    where?: AssetMeterWhereInput
    /**
     * Limit how many AssetMeters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetMeter upsert
   */
  export type AssetMeterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetMeter to update in case it exists.
     */
    where: AssetMeterWhereUniqueInput
    /**
     * In case the AssetMeter found by the `where` argument doesn't exist, create a new AssetMeter with this data.
     */
    create: XOR<AssetMeterCreateInput, AssetMeterUncheckedCreateInput>
    /**
     * In case the AssetMeter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetMeterUpdateInput, AssetMeterUncheckedUpdateInput>
  }

  /**
   * AssetMeter delete
   */
  export type AssetMeterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
    /**
     * Filter which AssetMeter to delete.
     */
    where: AssetMeterWhereUniqueInput
  }

  /**
   * AssetMeter deleteMany
   */
  export type AssetMeterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetMeters to delete
     */
    where?: AssetMeterWhereInput
    /**
     * Limit how many AssetMeters to delete.
     */
    limit?: number
  }

  /**
   * AssetMeter.readings
   */
  export type AssetMeter$readingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    where?: MeterReadingWhereInput
    orderBy?: MeterReadingOrderByWithRelationInput | MeterReadingOrderByWithRelationInput[]
    cursor?: MeterReadingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeterReadingScalarFieldEnum | MeterReadingScalarFieldEnum[]
  }

  /**
   * AssetMeter without action
   */
  export type AssetMeterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetMeter
     */
    select?: AssetMeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetMeter
     */
    omit?: AssetMeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetMeterInclude<ExtArgs> | null
  }


  /**
   * Model MeterReading
   */

  export type AggregateMeterReading = {
    _count: MeterReadingCountAggregateOutputType | null
    _avg: MeterReadingAvgAggregateOutputType | null
    _sum: MeterReadingSumAggregateOutputType | null
    _min: MeterReadingMinAggregateOutputType | null
    _max: MeterReadingMaxAggregateOutputType | null
  }

  export type MeterReadingAvgAggregateOutputType = {
    readingValue: Decimal | null
  }

  export type MeterReadingSumAggregateOutputType = {
    readingValue: Decimal | null
  }

  export type MeterReadingMinAggregateOutputType = {
    id: string | null
    assetMeterId: string | null
    readingValue: Decimal | null
    readingDate: Date | null
    createdAt: Date | null
  }

  export type MeterReadingMaxAggregateOutputType = {
    id: string | null
    assetMeterId: string | null
    readingValue: Decimal | null
    readingDate: Date | null
    createdAt: Date | null
  }

  export type MeterReadingCountAggregateOutputType = {
    id: number
    assetMeterId: number
    readingValue: number
    readingDate: number
    createdAt: number
    _all: number
  }


  export type MeterReadingAvgAggregateInputType = {
    readingValue?: true
  }

  export type MeterReadingSumAggregateInputType = {
    readingValue?: true
  }

  export type MeterReadingMinAggregateInputType = {
    id?: true
    assetMeterId?: true
    readingValue?: true
    readingDate?: true
    createdAt?: true
  }

  export type MeterReadingMaxAggregateInputType = {
    id?: true
    assetMeterId?: true
    readingValue?: true
    readingDate?: true
    createdAt?: true
  }

  export type MeterReadingCountAggregateInputType = {
    id?: true
    assetMeterId?: true
    readingValue?: true
    readingDate?: true
    createdAt?: true
    _all?: true
  }

  export type MeterReadingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeterReading to aggregate.
     */
    where?: MeterReadingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeterReadings to fetch.
     */
    orderBy?: MeterReadingOrderByWithRelationInput | MeterReadingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeterReadingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeterReadings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeterReadings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeterReadings
    **/
    _count?: true | MeterReadingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeterReadingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeterReadingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeterReadingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeterReadingMaxAggregateInputType
  }

  export type GetMeterReadingAggregateType<T extends MeterReadingAggregateArgs> = {
        [P in keyof T & keyof AggregateMeterReading]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeterReading[P]>
      : GetScalarType<T[P], AggregateMeterReading[P]>
  }




  export type MeterReadingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeterReadingWhereInput
    orderBy?: MeterReadingOrderByWithAggregationInput | MeterReadingOrderByWithAggregationInput[]
    by: MeterReadingScalarFieldEnum[] | MeterReadingScalarFieldEnum
    having?: MeterReadingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeterReadingCountAggregateInputType | true
    _avg?: MeterReadingAvgAggregateInputType
    _sum?: MeterReadingSumAggregateInputType
    _min?: MeterReadingMinAggregateInputType
    _max?: MeterReadingMaxAggregateInputType
  }

  export type MeterReadingGroupByOutputType = {
    id: string
    assetMeterId: string
    readingValue: Decimal
    readingDate: Date
    createdAt: Date
    _count: MeterReadingCountAggregateOutputType | null
    _avg: MeterReadingAvgAggregateOutputType | null
    _sum: MeterReadingSumAggregateOutputType | null
    _min: MeterReadingMinAggregateOutputType | null
    _max: MeterReadingMaxAggregateOutputType | null
  }

  type GetMeterReadingGroupByPayload<T extends MeterReadingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeterReadingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeterReadingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeterReadingGroupByOutputType[P]>
            : GetScalarType<T[P], MeterReadingGroupByOutputType[P]>
        }
      >
    >


  export type MeterReadingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetMeterId?: boolean
    readingValue?: boolean
    readingDate?: boolean
    createdAt?: boolean
    assetMeter?: boolean | AssetMeterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meterReading"]>

  export type MeterReadingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetMeterId?: boolean
    readingValue?: boolean
    readingDate?: boolean
    createdAt?: boolean
    assetMeter?: boolean | AssetMeterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meterReading"]>

  export type MeterReadingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetMeterId?: boolean
    readingValue?: boolean
    readingDate?: boolean
    createdAt?: boolean
    assetMeter?: boolean | AssetMeterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meterReading"]>

  export type MeterReadingSelectScalar = {
    id?: boolean
    assetMeterId?: boolean
    readingValue?: boolean
    readingDate?: boolean
    createdAt?: boolean
  }

  export type MeterReadingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assetMeterId" | "readingValue" | "readingDate" | "createdAt", ExtArgs["result"]["meterReading"]>
  export type MeterReadingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetMeter?: boolean | AssetMeterDefaultArgs<ExtArgs>
  }
  export type MeterReadingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetMeter?: boolean | AssetMeterDefaultArgs<ExtArgs>
  }
  export type MeterReadingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetMeter?: boolean | AssetMeterDefaultArgs<ExtArgs>
  }

  export type $MeterReadingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeterReading"
    objects: {
      assetMeter: Prisma.$AssetMeterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assetMeterId: string
      readingValue: Prisma.Decimal
      readingDate: Date
      createdAt: Date
    }, ExtArgs["result"]["meterReading"]>
    composites: {}
  }

  type MeterReadingGetPayload<S extends boolean | null | undefined | MeterReadingDefaultArgs> = $Result.GetResult<Prisma.$MeterReadingPayload, S>

  type MeterReadingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeterReadingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeterReadingCountAggregateInputType | true
    }

  export interface MeterReadingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeterReading'], meta: { name: 'MeterReading' } }
    /**
     * Find zero or one MeterReading that matches the filter.
     * @param {MeterReadingFindUniqueArgs} args - Arguments to find a MeterReading
     * @example
     * // Get one MeterReading
     * const meterReading = await prisma.meterReading.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeterReadingFindUniqueArgs>(args: SelectSubset<T, MeterReadingFindUniqueArgs<ExtArgs>>): Prisma__MeterReadingClient<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeterReading that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeterReadingFindUniqueOrThrowArgs} args - Arguments to find a MeterReading
     * @example
     * // Get one MeterReading
     * const meterReading = await prisma.meterReading.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeterReadingFindUniqueOrThrowArgs>(args: SelectSubset<T, MeterReadingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeterReadingClient<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeterReading that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterReadingFindFirstArgs} args - Arguments to find a MeterReading
     * @example
     * // Get one MeterReading
     * const meterReading = await prisma.meterReading.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeterReadingFindFirstArgs>(args?: SelectSubset<T, MeterReadingFindFirstArgs<ExtArgs>>): Prisma__MeterReadingClient<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeterReading that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterReadingFindFirstOrThrowArgs} args - Arguments to find a MeterReading
     * @example
     * // Get one MeterReading
     * const meterReading = await prisma.meterReading.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeterReadingFindFirstOrThrowArgs>(args?: SelectSubset<T, MeterReadingFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeterReadingClient<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeterReadings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterReadingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeterReadings
     * const meterReadings = await prisma.meterReading.findMany()
     * 
     * // Get first 10 MeterReadings
     * const meterReadings = await prisma.meterReading.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meterReadingWithIdOnly = await prisma.meterReading.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeterReadingFindManyArgs>(args?: SelectSubset<T, MeterReadingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeterReading.
     * @param {MeterReadingCreateArgs} args - Arguments to create a MeterReading.
     * @example
     * // Create one MeterReading
     * const MeterReading = await prisma.meterReading.create({
     *   data: {
     *     // ... data to create a MeterReading
     *   }
     * })
     * 
     */
    create<T extends MeterReadingCreateArgs>(args: SelectSubset<T, MeterReadingCreateArgs<ExtArgs>>): Prisma__MeterReadingClient<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeterReadings.
     * @param {MeterReadingCreateManyArgs} args - Arguments to create many MeterReadings.
     * @example
     * // Create many MeterReadings
     * const meterReading = await prisma.meterReading.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeterReadingCreateManyArgs>(args?: SelectSubset<T, MeterReadingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MeterReadings and returns the data saved in the database.
     * @param {MeterReadingCreateManyAndReturnArgs} args - Arguments to create many MeterReadings.
     * @example
     * // Create many MeterReadings
     * const meterReading = await prisma.meterReading.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MeterReadings and only return the `id`
     * const meterReadingWithIdOnly = await prisma.meterReading.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeterReadingCreateManyAndReturnArgs>(args?: SelectSubset<T, MeterReadingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MeterReading.
     * @param {MeterReadingDeleteArgs} args - Arguments to delete one MeterReading.
     * @example
     * // Delete one MeterReading
     * const MeterReading = await prisma.meterReading.delete({
     *   where: {
     *     // ... filter to delete one MeterReading
     *   }
     * })
     * 
     */
    delete<T extends MeterReadingDeleteArgs>(args: SelectSubset<T, MeterReadingDeleteArgs<ExtArgs>>): Prisma__MeterReadingClient<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeterReading.
     * @param {MeterReadingUpdateArgs} args - Arguments to update one MeterReading.
     * @example
     * // Update one MeterReading
     * const meterReading = await prisma.meterReading.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeterReadingUpdateArgs>(args: SelectSubset<T, MeterReadingUpdateArgs<ExtArgs>>): Prisma__MeterReadingClient<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeterReadings.
     * @param {MeterReadingDeleteManyArgs} args - Arguments to filter MeterReadings to delete.
     * @example
     * // Delete a few MeterReadings
     * const { count } = await prisma.meterReading.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeterReadingDeleteManyArgs>(args?: SelectSubset<T, MeterReadingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeterReadings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterReadingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeterReadings
     * const meterReading = await prisma.meterReading.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeterReadingUpdateManyArgs>(args: SelectSubset<T, MeterReadingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeterReadings and returns the data updated in the database.
     * @param {MeterReadingUpdateManyAndReturnArgs} args - Arguments to update many MeterReadings.
     * @example
     * // Update many MeterReadings
     * const meterReading = await prisma.meterReading.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MeterReadings and only return the `id`
     * const meterReadingWithIdOnly = await prisma.meterReading.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MeterReadingUpdateManyAndReturnArgs>(args: SelectSubset<T, MeterReadingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MeterReading.
     * @param {MeterReadingUpsertArgs} args - Arguments to update or create a MeterReading.
     * @example
     * // Update or create a MeterReading
     * const meterReading = await prisma.meterReading.upsert({
     *   create: {
     *     // ... data to create a MeterReading
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeterReading we want to update
     *   }
     * })
     */
    upsert<T extends MeterReadingUpsertArgs>(args: SelectSubset<T, MeterReadingUpsertArgs<ExtArgs>>): Prisma__MeterReadingClient<$Result.GetResult<Prisma.$MeterReadingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeterReadings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterReadingCountArgs} args - Arguments to filter MeterReadings to count.
     * @example
     * // Count the number of MeterReadings
     * const count = await prisma.meterReading.count({
     *   where: {
     *     // ... the filter for the MeterReadings we want to count
     *   }
     * })
    **/
    count<T extends MeterReadingCountArgs>(
      args?: Subset<T, MeterReadingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeterReadingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeterReading.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterReadingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeterReadingAggregateArgs>(args: Subset<T, MeterReadingAggregateArgs>): Prisma.PrismaPromise<GetMeterReadingAggregateType<T>>

    /**
     * Group by MeterReading.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeterReadingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeterReadingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeterReadingGroupByArgs['orderBy'] }
        : { orderBy?: MeterReadingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeterReadingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeterReadingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeterReading model
   */
  readonly fields: MeterReadingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeterReading.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeterReadingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assetMeter<T extends AssetMeterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetMeterDefaultArgs<ExtArgs>>): Prisma__AssetMeterClient<$Result.GetResult<Prisma.$AssetMeterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeterReading model
   */
  interface MeterReadingFieldRefs {
    readonly id: FieldRef<"MeterReading", 'String'>
    readonly assetMeterId: FieldRef<"MeterReading", 'String'>
    readonly readingValue: FieldRef<"MeterReading", 'Decimal'>
    readonly readingDate: FieldRef<"MeterReading", 'DateTime'>
    readonly createdAt: FieldRef<"MeterReading", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MeterReading findUnique
   */
  export type MeterReadingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * Filter, which MeterReading to fetch.
     */
    where: MeterReadingWhereUniqueInput
  }

  /**
   * MeterReading findUniqueOrThrow
   */
  export type MeterReadingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * Filter, which MeterReading to fetch.
     */
    where: MeterReadingWhereUniqueInput
  }

  /**
   * MeterReading findFirst
   */
  export type MeterReadingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * Filter, which MeterReading to fetch.
     */
    where?: MeterReadingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeterReadings to fetch.
     */
    orderBy?: MeterReadingOrderByWithRelationInput | MeterReadingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeterReadings.
     */
    cursor?: MeterReadingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeterReadings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeterReadings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeterReadings.
     */
    distinct?: MeterReadingScalarFieldEnum | MeterReadingScalarFieldEnum[]
  }

  /**
   * MeterReading findFirstOrThrow
   */
  export type MeterReadingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * Filter, which MeterReading to fetch.
     */
    where?: MeterReadingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeterReadings to fetch.
     */
    orderBy?: MeterReadingOrderByWithRelationInput | MeterReadingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeterReadings.
     */
    cursor?: MeterReadingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeterReadings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeterReadings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeterReadings.
     */
    distinct?: MeterReadingScalarFieldEnum | MeterReadingScalarFieldEnum[]
  }

  /**
   * MeterReading findMany
   */
  export type MeterReadingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * Filter, which MeterReadings to fetch.
     */
    where?: MeterReadingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeterReadings to fetch.
     */
    orderBy?: MeterReadingOrderByWithRelationInput | MeterReadingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeterReadings.
     */
    cursor?: MeterReadingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeterReadings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeterReadings.
     */
    skip?: number
    distinct?: MeterReadingScalarFieldEnum | MeterReadingScalarFieldEnum[]
  }

  /**
   * MeterReading create
   */
  export type MeterReadingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * The data needed to create a MeterReading.
     */
    data: XOR<MeterReadingCreateInput, MeterReadingUncheckedCreateInput>
  }

  /**
   * MeterReading createMany
   */
  export type MeterReadingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeterReadings.
     */
    data: MeterReadingCreateManyInput | MeterReadingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeterReading createManyAndReturn
   */
  export type MeterReadingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * The data used to create many MeterReadings.
     */
    data: MeterReadingCreateManyInput | MeterReadingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MeterReading update
   */
  export type MeterReadingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * The data needed to update a MeterReading.
     */
    data: XOR<MeterReadingUpdateInput, MeterReadingUncheckedUpdateInput>
    /**
     * Choose, which MeterReading to update.
     */
    where: MeterReadingWhereUniqueInput
  }

  /**
   * MeterReading updateMany
   */
  export type MeterReadingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeterReadings.
     */
    data: XOR<MeterReadingUpdateManyMutationInput, MeterReadingUncheckedUpdateManyInput>
    /**
     * Filter which MeterReadings to update
     */
    where?: MeterReadingWhereInput
    /**
     * Limit how many MeterReadings to update.
     */
    limit?: number
  }

  /**
   * MeterReading updateManyAndReturn
   */
  export type MeterReadingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * The data used to update MeterReadings.
     */
    data: XOR<MeterReadingUpdateManyMutationInput, MeterReadingUncheckedUpdateManyInput>
    /**
     * Filter which MeterReadings to update
     */
    where?: MeterReadingWhereInput
    /**
     * Limit how many MeterReadings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MeterReading upsert
   */
  export type MeterReadingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * The filter to search for the MeterReading to update in case it exists.
     */
    where: MeterReadingWhereUniqueInput
    /**
     * In case the MeterReading found by the `where` argument doesn't exist, create a new MeterReading with this data.
     */
    create: XOR<MeterReadingCreateInput, MeterReadingUncheckedCreateInput>
    /**
     * In case the MeterReading was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeterReadingUpdateInput, MeterReadingUncheckedUpdateInput>
  }

  /**
   * MeterReading delete
   */
  export type MeterReadingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
    /**
     * Filter which MeterReading to delete.
     */
    where: MeterReadingWhereUniqueInput
  }

  /**
   * MeterReading deleteMany
   */
  export type MeterReadingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeterReadings to delete
     */
    where?: MeterReadingWhereInput
    /**
     * Limit how many MeterReadings to delete.
     */
    limit?: number
  }

  /**
   * MeterReading without action
   */
  export type MeterReadingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeterReading
     */
    select?: MeterReadingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeterReading
     */
    omit?: MeterReadingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterReadingInclude<ExtArgs> | null
  }


  /**
   * Model MaintenanceSchedule
   */

  export type AggregateMaintenanceSchedule = {
    _count: MaintenanceScheduleCountAggregateOutputType | null
    _avg: MaintenanceScheduleAvgAggregateOutputType | null
    _sum: MaintenanceScheduleSumAggregateOutputType | null
    _min: MaintenanceScheduleMinAggregateOutputType | null
    _max: MaintenanceScheduleMaxAggregateOutputType | null
  }

  export type MaintenanceScheduleAvgAggregateOutputType = {
    thresholdValue: Decimal | null
  }

  export type MaintenanceScheduleSumAggregateOutputType = {
    thresholdValue: Decimal | null
  }

  export type MaintenanceScheduleMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    description: string | null
    triggerType: $Enums.MaintenanceTrigger | null
    meterId: string | null
    thresholdValue: Decimal | null
    nextRun: Date | null
    lastRun: Date | null
    status: $Enums.MaintenanceStatus | null
    priority: $Enums.CallPriority | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type MaintenanceScheduleMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    description: string | null
    triggerType: $Enums.MaintenanceTrigger | null
    meterId: string | null
    thresholdValue: Decimal | null
    nextRun: Date | null
    lastRun: Date | null
    status: $Enums.MaintenanceStatus | null
    priority: $Enums.CallPriority | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type MaintenanceScheduleCountAggregateOutputType = {
    id: number
    tenantId: number
    description: number
    triggerType: number
    recurrence: number
    meterId: number
    thresholdValue: number
    nextRun: number
    lastRun: number
    status: number
    priority: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type MaintenanceScheduleAvgAggregateInputType = {
    thresholdValue?: true
  }

  export type MaintenanceScheduleSumAggregateInputType = {
    thresholdValue?: true
  }

  export type MaintenanceScheduleMinAggregateInputType = {
    id?: true
    tenantId?: true
    description?: true
    triggerType?: true
    meterId?: true
    thresholdValue?: true
    nextRun?: true
    lastRun?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type MaintenanceScheduleMaxAggregateInputType = {
    id?: true
    tenantId?: true
    description?: true
    triggerType?: true
    meterId?: true
    thresholdValue?: true
    nextRun?: true
    lastRun?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type MaintenanceScheduleCountAggregateInputType = {
    id?: true
    tenantId?: true
    description?: true
    triggerType?: true
    recurrence?: true
    meterId?: true
    thresholdValue?: true
    nextRun?: true
    lastRun?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type MaintenanceScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceSchedule to aggregate.
     */
    where?: MaintenanceScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceSchedules to fetch.
     */
    orderBy?: MaintenanceScheduleOrderByWithRelationInput | MaintenanceScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaintenanceScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaintenanceSchedules
    **/
    _count?: true | MaintenanceScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaintenanceScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaintenanceScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceScheduleMaxAggregateInputType
  }

  export type GetMaintenanceScheduleAggregateType<T extends MaintenanceScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenanceSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenanceSchedule[P]>
      : GetScalarType<T[P], AggregateMaintenanceSchedule[P]>
  }




  export type MaintenanceScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceScheduleWhereInput
    orderBy?: MaintenanceScheduleOrderByWithAggregationInput | MaintenanceScheduleOrderByWithAggregationInput[]
    by: MaintenanceScheduleScalarFieldEnum[] | MaintenanceScheduleScalarFieldEnum
    having?: MaintenanceScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceScheduleCountAggregateInputType | true
    _avg?: MaintenanceScheduleAvgAggregateInputType
    _sum?: MaintenanceScheduleSumAggregateInputType
    _min?: MaintenanceScheduleMinAggregateInputType
    _max?: MaintenanceScheduleMaxAggregateInputType
  }

  export type MaintenanceScheduleGroupByOutputType = {
    id: string
    tenantId: string
    description: string
    triggerType: $Enums.MaintenanceTrigger
    recurrence: JsonValue | null
    meterId: string | null
    thresholdValue: Decimal | null
    nextRun: Date | null
    lastRun: Date | null
    status: $Enums.MaintenanceStatus
    priority: $Enums.CallPriority
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: MaintenanceScheduleCountAggregateOutputType | null
    _avg: MaintenanceScheduleAvgAggregateOutputType | null
    _sum: MaintenanceScheduleSumAggregateOutputType | null
    _min: MaintenanceScheduleMinAggregateOutputType | null
    _max: MaintenanceScheduleMaxAggregateOutputType | null
  }

  type GetMaintenanceScheduleGroupByPayload<T extends MaintenanceScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaintenanceScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceScheduleGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    description?: boolean
    triggerType?: boolean
    recurrence?: boolean
    meterId?: boolean
    thresholdValue?: boolean
    nextRun?: boolean
    lastRun?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    meter?: boolean | MaintenanceSchedule$meterArgs<ExtArgs>
    assignments?: boolean | MaintenanceSchedule$assignmentsArgs<ExtArgs>
    assets?: boolean | MaintenanceSchedule$assetsArgs<ExtArgs>
    workOrders?: boolean | MaintenanceSchedule$workOrdersArgs<ExtArgs>
    _count?: boolean | MaintenanceScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceSchedule"]>

  export type MaintenanceScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    description?: boolean
    triggerType?: boolean
    recurrence?: boolean
    meterId?: boolean
    thresholdValue?: boolean
    nextRun?: boolean
    lastRun?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    meter?: boolean | MaintenanceSchedule$meterArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceSchedule"]>

  export type MaintenanceScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    description?: boolean
    triggerType?: boolean
    recurrence?: boolean
    meterId?: boolean
    thresholdValue?: boolean
    nextRun?: boolean
    lastRun?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    meter?: boolean | MaintenanceSchedule$meterArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceSchedule"]>

  export type MaintenanceScheduleSelectScalar = {
    id?: boolean
    tenantId?: boolean
    description?: boolean
    triggerType?: boolean
    recurrence?: boolean
    meterId?: boolean
    thresholdValue?: boolean
    nextRun?: boolean
    lastRun?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type MaintenanceScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "description" | "triggerType" | "recurrence" | "meterId" | "thresholdValue" | "nextRun" | "lastRun" | "status" | "priority" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["maintenanceSchedule"]>
  export type MaintenanceScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    meter?: boolean | MaintenanceSchedule$meterArgs<ExtArgs>
    assignments?: boolean | MaintenanceSchedule$assignmentsArgs<ExtArgs>
    assets?: boolean | MaintenanceSchedule$assetsArgs<ExtArgs>
    workOrders?: boolean | MaintenanceSchedule$workOrdersArgs<ExtArgs>
    _count?: boolean | MaintenanceScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MaintenanceScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    meter?: boolean | MaintenanceSchedule$meterArgs<ExtArgs>
  }
  export type MaintenanceScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    meter?: boolean | MaintenanceSchedule$meterArgs<ExtArgs>
  }

  export type $MaintenanceSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaintenanceSchedule"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      meter: Prisma.$MeterPayload<ExtArgs> | null
      assignments: Prisma.$MaintenanceAssignmentPayload<ExtArgs>[]
      assets: Prisma.$MaintenanceAssetsPayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      description: string
      triggerType: $Enums.MaintenanceTrigger
      recurrence: Prisma.JsonValue | null
      meterId: string | null
      thresholdValue: Prisma.Decimal | null
      nextRun: Date | null
      lastRun: Date | null
      status: $Enums.MaintenanceStatus
      priority: $Enums.CallPriority
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["maintenanceSchedule"]>
    composites: {}
  }

  type MaintenanceScheduleGetPayload<S extends boolean | null | undefined | MaintenanceScheduleDefaultArgs> = $Result.GetResult<Prisma.$MaintenanceSchedulePayload, S>

  type MaintenanceScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaintenanceScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaintenanceScheduleCountAggregateInputType | true
    }

  export interface MaintenanceScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaintenanceSchedule'], meta: { name: 'MaintenanceSchedule' } }
    /**
     * Find zero or one MaintenanceSchedule that matches the filter.
     * @param {MaintenanceScheduleFindUniqueArgs} args - Arguments to find a MaintenanceSchedule
     * @example
     * // Get one MaintenanceSchedule
     * const maintenanceSchedule = await prisma.maintenanceSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaintenanceScheduleFindUniqueArgs>(args: SelectSubset<T, MaintenanceScheduleFindUniqueArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaintenanceSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaintenanceScheduleFindUniqueOrThrowArgs} args - Arguments to find a MaintenanceSchedule
     * @example
     * // Get one MaintenanceSchedule
     * const maintenanceSchedule = await prisma.maintenanceSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaintenanceScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, MaintenanceScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaintenanceSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceScheduleFindFirstArgs} args - Arguments to find a MaintenanceSchedule
     * @example
     * // Get one MaintenanceSchedule
     * const maintenanceSchedule = await prisma.maintenanceSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaintenanceScheduleFindFirstArgs>(args?: SelectSubset<T, MaintenanceScheduleFindFirstArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaintenanceSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceScheduleFindFirstOrThrowArgs} args - Arguments to find a MaintenanceSchedule
     * @example
     * // Get one MaintenanceSchedule
     * const maintenanceSchedule = await prisma.maintenanceSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaintenanceScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, MaintenanceScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaintenanceSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaintenanceSchedules
     * const maintenanceSchedules = await prisma.maintenanceSchedule.findMany()
     * 
     * // Get first 10 MaintenanceSchedules
     * const maintenanceSchedules = await prisma.maintenanceSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const maintenanceScheduleWithIdOnly = await prisma.maintenanceSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaintenanceScheduleFindManyArgs>(args?: SelectSubset<T, MaintenanceScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaintenanceSchedule.
     * @param {MaintenanceScheduleCreateArgs} args - Arguments to create a MaintenanceSchedule.
     * @example
     * // Create one MaintenanceSchedule
     * const MaintenanceSchedule = await prisma.maintenanceSchedule.create({
     *   data: {
     *     // ... data to create a MaintenanceSchedule
     *   }
     * })
     * 
     */
    create<T extends MaintenanceScheduleCreateArgs>(args: SelectSubset<T, MaintenanceScheduleCreateArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaintenanceSchedules.
     * @param {MaintenanceScheduleCreateManyArgs} args - Arguments to create many MaintenanceSchedules.
     * @example
     * // Create many MaintenanceSchedules
     * const maintenanceSchedule = await prisma.maintenanceSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaintenanceScheduleCreateManyArgs>(args?: SelectSubset<T, MaintenanceScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaintenanceSchedules and returns the data saved in the database.
     * @param {MaintenanceScheduleCreateManyAndReturnArgs} args - Arguments to create many MaintenanceSchedules.
     * @example
     * // Create many MaintenanceSchedules
     * const maintenanceSchedule = await prisma.maintenanceSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaintenanceSchedules and only return the `id`
     * const maintenanceScheduleWithIdOnly = await prisma.maintenanceSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaintenanceScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, MaintenanceScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaintenanceSchedule.
     * @param {MaintenanceScheduleDeleteArgs} args - Arguments to delete one MaintenanceSchedule.
     * @example
     * // Delete one MaintenanceSchedule
     * const MaintenanceSchedule = await prisma.maintenanceSchedule.delete({
     *   where: {
     *     // ... filter to delete one MaintenanceSchedule
     *   }
     * })
     * 
     */
    delete<T extends MaintenanceScheduleDeleteArgs>(args: SelectSubset<T, MaintenanceScheduleDeleteArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaintenanceSchedule.
     * @param {MaintenanceScheduleUpdateArgs} args - Arguments to update one MaintenanceSchedule.
     * @example
     * // Update one MaintenanceSchedule
     * const maintenanceSchedule = await prisma.maintenanceSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaintenanceScheduleUpdateArgs>(args: SelectSubset<T, MaintenanceScheduleUpdateArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaintenanceSchedules.
     * @param {MaintenanceScheduleDeleteManyArgs} args - Arguments to filter MaintenanceSchedules to delete.
     * @example
     * // Delete a few MaintenanceSchedules
     * const { count } = await prisma.maintenanceSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaintenanceScheduleDeleteManyArgs>(args?: SelectSubset<T, MaintenanceScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaintenanceSchedules
     * const maintenanceSchedule = await prisma.maintenanceSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaintenanceScheduleUpdateManyArgs>(args: SelectSubset<T, MaintenanceScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceSchedules and returns the data updated in the database.
     * @param {MaintenanceScheduleUpdateManyAndReturnArgs} args - Arguments to update many MaintenanceSchedules.
     * @example
     * // Update many MaintenanceSchedules
     * const maintenanceSchedule = await prisma.maintenanceSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaintenanceSchedules and only return the `id`
     * const maintenanceScheduleWithIdOnly = await prisma.maintenanceSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaintenanceScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, MaintenanceScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaintenanceSchedule.
     * @param {MaintenanceScheduleUpsertArgs} args - Arguments to update or create a MaintenanceSchedule.
     * @example
     * // Update or create a MaintenanceSchedule
     * const maintenanceSchedule = await prisma.maintenanceSchedule.upsert({
     *   create: {
     *     // ... data to create a MaintenanceSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaintenanceSchedule we want to update
     *   }
     * })
     */
    upsert<T extends MaintenanceScheduleUpsertArgs>(args: SelectSubset<T, MaintenanceScheduleUpsertArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaintenanceSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceScheduleCountArgs} args - Arguments to filter MaintenanceSchedules to count.
     * @example
     * // Count the number of MaintenanceSchedules
     * const count = await prisma.maintenanceSchedule.count({
     *   where: {
     *     // ... the filter for the MaintenanceSchedules we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceScheduleCountArgs>(
      args?: Subset<T, MaintenanceScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaintenanceSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceScheduleAggregateArgs>(args: Subset<T, MaintenanceScheduleAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceScheduleAggregateType<T>>

    /**
     * Group by MaintenanceSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceScheduleGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaintenanceSchedule model
   */
  readonly fields: MaintenanceScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaintenanceSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaintenanceScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    meter<T extends MaintenanceSchedule$meterArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceSchedule$meterArgs<ExtArgs>>): Prisma__MeterClient<$Result.GetResult<Prisma.$MeterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignments<T extends MaintenanceSchedule$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceSchedule$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assets<T extends MaintenanceSchedule$assetsArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceSchedule$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workOrders<T extends MaintenanceSchedule$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceSchedule$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaintenanceSchedule model
   */
  interface MaintenanceScheduleFieldRefs {
    readonly id: FieldRef<"MaintenanceSchedule", 'String'>
    readonly tenantId: FieldRef<"MaintenanceSchedule", 'String'>
    readonly description: FieldRef<"MaintenanceSchedule", 'String'>
    readonly triggerType: FieldRef<"MaintenanceSchedule", 'MaintenanceTrigger'>
    readonly recurrence: FieldRef<"MaintenanceSchedule", 'Json'>
    readonly meterId: FieldRef<"MaintenanceSchedule", 'String'>
    readonly thresholdValue: FieldRef<"MaintenanceSchedule", 'Decimal'>
    readonly nextRun: FieldRef<"MaintenanceSchedule", 'DateTime'>
    readonly lastRun: FieldRef<"MaintenanceSchedule", 'DateTime'>
    readonly status: FieldRef<"MaintenanceSchedule", 'MaintenanceStatus'>
    readonly priority: FieldRef<"MaintenanceSchedule", 'CallPriority'>
    readonly createdAt: FieldRef<"MaintenanceSchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"MaintenanceSchedule", 'DateTime'>
    readonly deletedAt: FieldRef<"MaintenanceSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MaintenanceSchedule findUnique
   */
  export type MaintenanceScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceSchedule to fetch.
     */
    where: MaintenanceScheduleWhereUniqueInput
  }

  /**
   * MaintenanceSchedule findUniqueOrThrow
   */
  export type MaintenanceScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceSchedule to fetch.
     */
    where: MaintenanceScheduleWhereUniqueInput
  }

  /**
   * MaintenanceSchedule findFirst
   */
  export type MaintenanceScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceSchedule to fetch.
     */
    where?: MaintenanceScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceSchedules to fetch.
     */
    orderBy?: MaintenanceScheduleOrderByWithRelationInput | MaintenanceScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceSchedules.
     */
    cursor?: MaintenanceScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceSchedules.
     */
    distinct?: MaintenanceScheduleScalarFieldEnum | MaintenanceScheduleScalarFieldEnum[]
  }

  /**
   * MaintenanceSchedule findFirstOrThrow
   */
  export type MaintenanceScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceSchedule to fetch.
     */
    where?: MaintenanceScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceSchedules to fetch.
     */
    orderBy?: MaintenanceScheduleOrderByWithRelationInput | MaintenanceScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceSchedules.
     */
    cursor?: MaintenanceScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceSchedules.
     */
    distinct?: MaintenanceScheduleScalarFieldEnum | MaintenanceScheduleScalarFieldEnum[]
  }

  /**
   * MaintenanceSchedule findMany
   */
  export type MaintenanceScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceSchedules to fetch.
     */
    where?: MaintenanceScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceSchedules to fetch.
     */
    orderBy?: MaintenanceScheduleOrderByWithRelationInput | MaintenanceScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaintenanceSchedules.
     */
    cursor?: MaintenanceScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceSchedules.
     */
    skip?: number
    distinct?: MaintenanceScheduleScalarFieldEnum | MaintenanceScheduleScalarFieldEnum[]
  }

  /**
   * MaintenanceSchedule create
   */
  export type MaintenanceScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a MaintenanceSchedule.
     */
    data: XOR<MaintenanceScheduleCreateInput, MaintenanceScheduleUncheckedCreateInput>
  }

  /**
   * MaintenanceSchedule createMany
   */
  export type MaintenanceScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaintenanceSchedules.
     */
    data: MaintenanceScheduleCreateManyInput | MaintenanceScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaintenanceSchedule createManyAndReturn
   */
  export type MaintenanceScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many MaintenanceSchedules.
     */
    data: MaintenanceScheduleCreateManyInput | MaintenanceScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceSchedule update
   */
  export type MaintenanceScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a MaintenanceSchedule.
     */
    data: XOR<MaintenanceScheduleUpdateInput, MaintenanceScheduleUncheckedUpdateInput>
    /**
     * Choose, which MaintenanceSchedule to update.
     */
    where: MaintenanceScheduleWhereUniqueInput
  }

  /**
   * MaintenanceSchedule updateMany
   */
  export type MaintenanceScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaintenanceSchedules.
     */
    data: XOR<MaintenanceScheduleUpdateManyMutationInput, MaintenanceScheduleUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceSchedules to update
     */
    where?: MaintenanceScheduleWhereInput
    /**
     * Limit how many MaintenanceSchedules to update.
     */
    limit?: number
  }

  /**
   * MaintenanceSchedule updateManyAndReturn
   */
  export type MaintenanceScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * The data used to update MaintenanceSchedules.
     */
    data: XOR<MaintenanceScheduleUpdateManyMutationInput, MaintenanceScheduleUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceSchedules to update
     */
    where?: MaintenanceScheduleWhereInput
    /**
     * Limit how many MaintenanceSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceSchedule upsert
   */
  export type MaintenanceScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the MaintenanceSchedule to update in case it exists.
     */
    where: MaintenanceScheduleWhereUniqueInput
    /**
     * In case the MaintenanceSchedule found by the `where` argument doesn't exist, create a new MaintenanceSchedule with this data.
     */
    create: XOR<MaintenanceScheduleCreateInput, MaintenanceScheduleUncheckedCreateInput>
    /**
     * In case the MaintenanceSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaintenanceScheduleUpdateInput, MaintenanceScheduleUncheckedUpdateInput>
  }

  /**
   * MaintenanceSchedule delete
   */
  export type MaintenanceScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    /**
     * Filter which MaintenanceSchedule to delete.
     */
    where: MaintenanceScheduleWhereUniqueInput
  }

  /**
   * MaintenanceSchedule deleteMany
   */
  export type MaintenanceScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceSchedules to delete
     */
    where?: MaintenanceScheduleWhereInput
    /**
     * Limit how many MaintenanceSchedules to delete.
     */
    limit?: number
  }

  /**
   * MaintenanceSchedule.meter
   */
  export type MaintenanceSchedule$meterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meter
     */
    select?: MeterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meter
     */
    omit?: MeterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeterInclude<ExtArgs> | null
    where?: MeterWhereInput
  }

  /**
   * MaintenanceSchedule.assignments
   */
  export type MaintenanceSchedule$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    where?: MaintenanceAssignmentWhereInput
    orderBy?: MaintenanceAssignmentOrderByWithRelationInput | MaintenanceAssignmentOrderByWithRelationInput[]
    cursor?: MaintenanceAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceAssignmentScalarFieldEnum | MaintenanceAssignmentScalarFieldEnum[]
  }

  /**
   * MaintenanceSchedule.assets
   */
  export type MaintenanceSchedule$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    where?: MaintenanceAssetsWhereInput
    orderBy?: MaintenanceAssetsOrderByWithRelationInput | MaintenanceAssetsOrderByWithRelationInput[]
    cursor?: MaintenanceAssetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceAssetsScalarFieldEnum | MaintenanceAssetsScalarFieldEnum[]
  }

  /**
   * MaintenanceSchedule.workOrders
   */
  export type MaintenanceSchedule$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * MaintenanceSchedule without action
   */
  export type MaintenanceScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
  }


  /**
   * Model MaintenanceAssignment
   */

  export type AggregateMaintenanceAssignment = {
    _count: MaintenanceAssignmentCountAggregateOutputType | null
    _min: MaintenanceAssignmentMinAggregateOutputType | null
    _max: MaintenanceAssignmentMaxAggregateOutputType | null
  }

  export type MaintenanceAssignmentMinAggregateOutputType = {
    maintenanceId: string | null
    userId: string | null
  }

  export type MaintenanceAssignmentMaxAggregateOutputType = {
    maintenanceId: string | null
    userId: string | null
  }

  export type MaintenanceAssignmentCountAggregateOutputType = {
    maintenanceId: number
    userId: number
    _all: number
  }


  export type MaintenanceAssignmentMinAggregateInputType = {
    maintenanceId?: true
    userId?: true
  }

  export type MaintenanceAssignmentMaxAggregateInputType = {
    maintenanceId?: true
    userId?: true
  }

  export type MaintenanceAssignmentCountAggregateInputType = {
    maintenanceId?: true
    userId?: true
    _all?: true
  }

  export type MaintenanceAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceAssignment to aggregate.
     */
    where?: MaintenanceAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceAssignments to fetch.
     */
    orderBy?: MaintenanceAssignmentOrderByWithRelationInput | MaintenanceAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaintenanceAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaintenanceAssignments
    **/
    _count?: true | MaintenanceAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceAssignmentMaxAggregateInputType
  }

  export type GetMaintenanceAssignmentAggregateType<T extends MaintenanceAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenanceAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenanceAssignment[P]>
      : GetScalarType<T[P], AggregateMaintenanceAssignment[P]>
  }




  export type MaintenanceAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceAssignmentWhereInput
    orderBy?: MaintenanceAssignmentOrderByWithAggregationInput | MaintenanceAssignmentOrderByWithAggregationInput[]
    by: MaintenanceAssignmentScalarFieldEnum[] | MaintenanceAssignmentScalarFieldEnum
    having?: MaintenanceAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceAssignmentCountAggregateInputType | true
    _min?: MaintenanceAssignmentMinAggregateInputType
    _max?: MaintenanceAssignmentMaxAggregateInputType
  }

  export type MaintenanceAssignmentGroupByOutputType = {
    maintenanceId: string
    userId: string
    _count: MaintenanceAssignmentCountAggregateOutputType | null
    _min: MaintenanceAssignmentMinAggregateOutputType | null
    _max: MaintenanceAssignmentMaxAggregateOutputType | null
  }

  type GetMaintenanceAssignmentGroupByPayload<T extends MaintenanceAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaintenanceAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    maintenanceId?: boolean
    userId?: boolean
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceAssignment"]>

  export type MaintenanceAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    maintenanceId?: boolean
    userId?: boolean
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceAssignment"]>

  export type MaintenanceAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    maintenanceId?: boolean
    userId?: boolean
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceAssignment"]>

  export type MaintenanceAssignmentSelectScalar = {
    maintenanceId?: boolean
    userId?: boolean
  }

  export type MaintenanceAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"maintenanceId" | "userId", ExtArgs["result"]["maintenanceAssignment"]>
  export type MaintenanceAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MaintenanceAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MaintenanceAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MaintenanceAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaintenanceAssignment"
    objects: {
      maintenance: Prisma.$MaintenanceSchedulePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      maintenanceId: string
      userId: string
    }, ExtArgs["result"]["maintenanceAssignment"]>
    composites: {}
  }

  type MaintenanceAssignmentGetPayload<S extends boolean | null | undefined | MaintenanceAssignmentDefaultArgs> = $Result.GetResult<Prisma.$MaintenanceAssignmentPayload, S>

  type MaintenanceAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaintenanceAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaintenanceAssignmentCountAggregateInputType | true
    }

  export interface MaintenanceAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaintenanceAssignment'], meta: { name: 'MaintenanceAssignment' } }
    /**
     * Find zero or one MaintenanceAssignment that matches the filter.
     * @param {MaintenanceAssignmentFindUniqueArgs} args - Arguments to find a MaintenanceAssignment
     * @example
     * // Get one MaintenanceAssignment
     * const maintenanceAssignment = await prisma.maintenanceAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaintenanceAssignmentFindUniqueArgs>(args: SelectSubset<T, MaintenanceAssignmentFindUniqueArgs<ExtArgs>>): Prisma__MaintenanceAssignmentClient<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaintenanceAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaintenanceAssignmentFindUniqueOrThrowArgs} args - Arguments to find a MaintenanceAssignment
     * @example
     * // Get one MaintenanceAssignment
     * const maintenanceAssignment = await prisma.maintenanceAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaintenanceAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, MaintenanceAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaintenanceAssignmentClient<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaintenanceAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssignmentFindFirstArgs} args - Arguments to find a MaintenanceAssignment
     * @example
     * // Get one MaintenanceAssignment
     * const maintenanceAssignment = await prisma.maintenanceAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaintenanceAssignmentFindFirstArgs>(args?: SelectSubset<T, MaintenanceAssignmentFindFirstArgs<ExtArgs>>): Prisma__MaintenanceAssignmentClient<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaintenanceAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssignmentFindFirstOrThrowArgs} args - Arguments to find a MaintenanceAssignment
     * @example
     * // Get one MaintenanceAssignment
     * const maintenanceAssignment = await prisma.maintenanceAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaintenanceAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, MaintenanceAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaintenanceAssignmentClient<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaintenanceAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaintenanceAssignments
     * const maintenanceAssignments = await prisma.maintenanceAssignment.findMany()
     * 
     * // Get first 10 MaintenanceAssignments
     * const maintenanceAssignments = await prisma.maintenanceAssignment.findMany({ take: 10 })
     * 
     * // Only select the `maintenanceId`
     * const maintenanceAssignmentWithMaintenanceIdOnly = await prisma.maintenanceAssignment.findMany({ select: { maintenanceId: true } })
     * 
     */
    findMany<T extends MaintenanceAssignmentFindManyArgs>(args?: SelectSubset<T, MaintenanceAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaintenanceAssignment.
     * @param {MaintenanceAssignmentCreateArgs} args - Arguments to create a MaintenanceAssignment.
     * @example
     * // Create one MaintenanceAssignment
     * const MaintenanceAssignment = await prisma.maintenanceAssignment.create({
     *   data: {
     *     // ... data to create a MaintenanceAssignment
     *   }
     * })
     * 
     */
    create<T extends MaintenanceAssignmentCreateArgs>(args: SelectSubset<T, MaintenanceAssignmentCreateArgs<ExtArgs>>): Prisma__MaintenanceAssignmentClient<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaintenanceAssignments.
     * @param {MaintenanceAssignmentCreateManyArgs} args - Arguments to create many MaintenanceAssignments.
     * @example
     * // Create many MaintenanceAssignments
     * const maintenanceAssignment = await prisma.maintenanceAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaintenanceAssignmentCreateManyArgs>(args?: SelectSubset<T, MaintenanceAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaintenanceAssignments and returns the data saved in the database.
     * @param {MaintenanceAssignmentCreateManyAndReturnArgs} args - Arguments to create many MaintenanceAssignments.
     * @example
     * // Create many MaintenanceAssignments
     * const maintenanceAssignment = await prisma.maintenanceAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaintenanceAssignments and only return the `maintenanceId`
     * const maintenanceAssignmentWithMaintenanceIdOnly = await prisma.maintenanceAssignment.createManyAndReturn({
     *   select: { maintenanceId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaintenanceAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, MaintenanceAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaintenanceAssignment.
     * @param {MaintenanceAssignmentDeleteArgs} args - Arguments to delete one MaintenanceAssignment.
     * @example
     * // Delete one MaintenanceAssignment
     * const MaintenanceAssignment = await prisma.maintenanceAssignment.delete({
     *   where: {
     *     // ... filter to delete one MaintenanceAssignment
     *   }
     * })
     * 
     */
    delete<T extends MaintenanceAssignmentDeleteArgs>(args: SelectSubset<T, MaintenanceAssignmentDeleteArgs<ExtArgs>>): Prisma__MaintenanceAssignmentClient<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaintenanceAssignment.
     * @param {MaintenanceAssignmentUpdateArgs} args - Arguments to update one MaintenanceAssignment.
     * @example
     * // Update one MaintenanceAssignment
     * const maintenanceAssignment = await prisma.maintenanceAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaintenanceAssignmentUpdateArgs>(args: SelectSubset<T, MaintenanceAssignmentUpdateArgs<ExtArgs>>): Prisma__MaintenanceAssignmentClient<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaintenanceAssignments.
     * @param {MaintenanceAssignmentDeleteManyArgs} args - Arguments to filter MaintenanceAssignments to delete.
     * @example
     * // Delete a few MaintenanceAssignments
     * const { count } = await prisma.maintenanceAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaintenanceAssignmentDeleteManyArgs>(args?: SelectSubset<T, MaintenanceAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaintenanceAssignments
     * const maintenanceAssignment = await prisma.maintenanceAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaintenanceAssignmentUpdateManyArgs>(args: SelectSubset<T, MaintenanceAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceAssignments and returns the data updated in the database.
     * @param {MaintenanceAssignmentUpdateManyAndReturnArgs} args - Arguments to update many MaintenanceAssignments.
     * @example
     * // Update many MaintenanceAssignments
     * const maintenanceAssignment = await prisma.maintenanceAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaintenanceAssignments and only return the `maintenanceId`
     * const maintenanceAssignmentWithMaintenanceIdOnly = await prisma.maintenanceAssignment.updateManyAndReturn({
     *   select: { maintenanceId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaintenanceAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, MaintenanceAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaintenanceAssignment.
     * @param {MaintenanceAssignmentUpsertArgs} args - Arguments to update or create a MaintenanceAssignment.
     * @example
     * // Update or create a MaintenanceAssignment
     * const maintenanceAssignment = await prisma.maintenanceAssignment.upsert({
     *   create: {
     *     // ... data to create a MaintenanceAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaintenanceAssignment we want to update
     *   }
     * })
     */
    upsert<T extends MaintenanceAssignmentUpsertArgs>(args: SelectSubset<T, MaintenanceAssignmentUpsertArgs<ExtArgs>>): Prisma__MaintenanceAssignmentClient<$Result.GetResult<Prisma.$MaintenanceAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaintenanceAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssignmentCountArgs} args - Arguments to filter MaintenanceAssignments to count.
     * @example
     * // Count the number of MaintenanceAssignments
     * const count = await prisma.maintenanceAssignment.count({
     *   where: {
     *     // ... the filter for the MaintenanceAssignments we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceAssignmentCountArgs>(
      args?: Subset<T, MaintenanceAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaintenanceAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceAssignmentAggregateArgs>(args: Subset<T, MaintenanceAssignmentAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceAssignmentAggregateType<T>>

    /**
     * Group by MaintenanceAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaintenanceAssignment model
   */
  readonly fields: MaintenanceAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaintenanceAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaintenanceAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    maintenance<T extends MaintenanceScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceScheduleDefaultArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaintenanceAssignment model
   */
  interface MaintenanceAssignmentFieldRefs {
    readonly maintenanceId: FieldRef<"MaintenanceAssignment", 'String'>
    readonly userId: FieldRef<"MaintenanceAssignment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MaintenanceAssignment findUnique
   */
  export type MaintenanceAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssignment to fetch.
     */
    where: MaintenanceAssignmentWhereUniqueInput
  }

  /**
   * MaintenanceAssignment findUniqueOrThrow
   */
  export type MaintenanceAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssignment to fetch.
     */
    where: MaintenanceAssignmentWhereUniqueInput
  }

  /**
   * MaintenanceAssignment findFirst
   */
  export type MaintenanceAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssignment to fetch.
     */
    where?: MaintenanceAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceAssignments to fetch.
     */
    orderBy?: MaintenanceAssignmentOrderByWithRelationInput | MaintenanceAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceAssignments.
     */
    cursor?: MaintenanceAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceAssignments.
     */
    distinct?: MaintenanceAssignmentScalarFieldEnum | MaintenanceAssignmentScalarFieldEnum[]
  }

  /**
   * MaintenanceAssignment findFirstOrThrow
   */
  export type MaintenanceAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssignment to fetch.
     */
    where?: MaintenanceAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceAssignments to fetch.
     */
    orderBy?: MaintenanceAssignmentOrderByWithRelationInput | MaintenanceAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceAssignments.
     */
    cursor?: MaintenanceAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceAssignments.
     */
    distinct?: MaintenanceAssignmentScalarFieldEnum | MaintenanceAssignmentScalarFieldEnum[]
  }

  /**
   * MaintenanceAssignment findMany
   */
  export type MaintenanceAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssignments to fetch.
     */
    where?: MaintenanceAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceAssignments to fetch.
     */
    orderBy?: MaintenanceAssignmentOrderByWithRelationInput | MaintenanceAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaintenanceAssignments.
     */
    cursor?: MaintenanceAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceAssignments.
     */
    skip?: number
    distinct?: MaintenanceAssignmentScalarFieldEnum | MaintenanceAssignmentScalarFieldEnum[]
  }

  /**
   * MaintenanceAssignment create
   */
  export type MaintenanceAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a MaintenanceAssignment.
     */
    data: XOR<MaintenanceAssignmentCreateInput, MaintenanceAssignmentUncheckedCreateInput>
  }

  /**
   * MaintenanceAssignment createMany
   */
  export type MaintenanceAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaintenanceAssignments.
     */
    data: MaintenanceAssignmentCreateManyInput | MaintenanceAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaintenanceAssignment createManyAndReturn
   */
  export type MaintenanceAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many MaintenanceAssignments.
     */
    data: MaintenanceAssignmentCreateManyInput | MaintenanceAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceAssignment update
   */
  export type MaintenanceAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a MaintenanceAssignment.
     */
    data: XOR<MaintenanceAssignmentUpdateInput, MaintenanceAssignmentUncheckedUpdateInput>
    /**
     * Choose, which MaintenanceAssignment to update.
     */
    where: MaintenanceAssignmentWhereUniqueInput
  }

  /**
   * MaintenanceAssignment updateMany
   */
  export type MaintenanceAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaintenanceAssignments.
     */
    data: XOR<MaintenanceAssignmentUpdateManyMutationInput, MaintenanceAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceAssignments to update
     */
    where?: MaintenanceAssignmentWhereInput
    /**
     * Limit how many MaintenanceAssignments to update.
     */
    limit?: number
  }

  /**
   * MaintenanceAssignment updateManyAndReturn
   */
  export type MaintenanceAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update MaintenanceAssignments.
     */
    data: XOR<MaintenanceAssignmentUpdateManyMutationInput, MaintenanceAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceAssignments to update
     */
    where?: MaintenanceAssignmentWhereInput
    /**
     * Limit how many MaintenanceAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceAssignment upsert
   */
  export type MaintenanceAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the MaintenanceAssignment to update in case it exists.
     */
    where: MaintenanceAssignmentWhereUniqueInput
    /**
     * In case the MaintenanceAssignment found by the `where` argument doesn't exist, create a new MaintenanceAssignment with this data.
     */
    create: XOR<MaintenanceAssignmentCreateInput, MaintenanceAssignmentUncheckedCreateInput>
    /**
     * In case the MaintenanceAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaintenanceAssignmentUpdateInput, MaintenanceAssignmentUncheckedUpdateInput>
  }

  /**
   * MaintenanceAssignment delete
   */
  export type MaintenanceAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
    /**
     * Filter which MaintenanceAssignment to delete.
     */
    where: MaintenanceAssignmentWhereUniqueInput
  }

  /**
   * MaintenanceAssignment deleteMany
   */
  export type MaintenanceAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceAssignments to delete
     */
    where?: MaintenanceAssignmentWhereInput
    /**
     * Limit how many MaintenanceAssignments to delete.
     */
    limit?: number
  }

  /**
   * MaintenanceAssignment without action
   */
  export type MaintenanceAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssignment
     */
    select?: MaintenanceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssignment
     */
    omit?: MaintenanceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model MaintenanceAssets
   */

  export type AggregateMaintenanceAssets = {
    _count: MaintenanceAssetsCountAggregateOutputType | null
    _min: MaintenanceAssetsMinAggregateOutputType | null
    _max: MaintenanceAssetsMaxAggregateOutputType | null
  }

  export type MaintenanceAssetsMinAggregateOutputType = {
    maintenanceId: string | null
    assetId: string | null
  }

  export type MaintenanceAssetsMaxAggregateOutputType = {
    maintenanceId: string | null
    assetId: string | null
  }

  export type MaintenanceAssetsCountAggregateOutputType = {
    maintenanceId: number
    assetId: number
    _all: number
  }


  export type MaintenanceAssetsMinAggregateInputType = {
    maintenanceId?: true
    assetId?: true
  }

  export type MaintenanceAssetsMaxAggregateInputType = {
    maintenanceId?: true
    assetId?: true
  }

  export type MaintenanceAssetsCountAggregateInputType = {
    maintenanceId?: true
    assetId?: true
    _all?: true
  }

  export type MaintenanceAssetsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceAssets to aggregate.
     */
    where?: MaintenanceAssetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceAssets to fetch.
     */
    orderBy?: MaintenanceAssetsOrderByWithRelationInput | MaintenanceAssetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaintenanceAssetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaintenanceAssets
    **/
    _count?: true | MaintenanceAssetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceAssetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceAssetsMaxAggregateInputType
  }

  export type GetMaintenanceAssetsAggregateType<T extends MaintenanceAssetsAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenanceAssets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenanceAssets[P]>
      : GetScalarType<T[P], AggregateMaintenanceAssets[P]>
  }




  export type MaintenanceAssetsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceAssetsWhereInput
    orderBy?: MaintenanceAssetsOrderByWithAggregationInput | MaintenanceAssetsOrderByWithAggregationInput[]
    by: MaintenanceAssetsScalarFieldEnum[] | MaintenanceAssetsScalarFieldEnum
    having?: MaintenanceAssetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceAssetsCountAggregateInputType | true
    _min?: MaintenanceAssetsMinAggregateInputType
    _max?: MaintenanceAssetsMaxAggregateInputType
  }

  export type MaintenanceAssetsGroupByOutputType = {
    maintenanceId: string
    assetId: string
    _count: MaintenanceAssetsCountAggregateOutputType | null
    _min: MaintenanceAssetsMinAggregateOutputType | null
    _max: MaintenanceAssetsMaxAggregateOutputType | null
  }

  type GetMaintenanceAssetsGroupByPayload<T extends MaintenanceAssetsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaintenanceAssetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceAssetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceAssetsGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceAssetsGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceAssetsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    maintenanceId?: boolean
    assetId?: boolean
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceAssets"]>

  export type MaintenanceAssetsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    maintenanceId?: boolean
    assetId?: boolean
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceAssets"]>

  export type MaintenanceAssetsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    maintenanceId?: boolean
    assetId?: boolean
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceAssets"]>

  export type MaintenanceAssetsSelectScalar = {
    maintenanceId?: boolean
    assetId?: boolean
  }

  export type MaintenanceAssetsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"maintenanceId" | "assetId", ExtArgs["result"]["maintenanceAssets"]>
  export type MaintenanceAssetsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type MaintenanceAssetsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type MaintenanceAssetsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    maintenance?: boolean | MaintenanceScheduleDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }

  export type $MaintenanceAssetsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaintenanceAssets"
    objects: {
      maintenance: Prisma.$MaintenanceSchedulePayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      maintenanceId: string
      assetId: string
    }, ExtArgs["result"]["maintenanceAssets"]>
    composites: {}
  }

  type MaintenanceAssetsGetPayload<S extends boolean | null | undefined | MaintenanceAssetsDefaultArgs> = $Result.GetResult<Prisma.$MaintenanceAssetsPayload, S>

  type MaintenanceAssetsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaintenanceAssetsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaintenanceAssetsCountAggregateInputType | true
    }

  export interface MaintenanceAssetsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaintenanceAssets'], meta: { name: 'MaintenanceAssets' } }
    /**
     * Find zero or one MaintenanceAssets that matches the filter.
     * @param {MaintenanceAssetsFindUniqueArgs} args - Arguments to find a MaintenanceAssets
     * @example
     * // Get one MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaintenanceAssetsFindUniqueArgs>(args: SelectSubset<T, MaintenanceAssetsFindUniqueArgs<ExtArgs>>): Prisma__MaintenanceAssetsClient<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaintenanceAssets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaintenanceAssetsFindUniqueOrThrowArgs} args - Arguments to find a MaintenanceAssets
     * @example
     * // Get one MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaintenanceAssetsFindUniqueOrThrowArgs>(args: SelectSubset<T, MaintenanceAssetsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaintenanceAssetsClient<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaintenanceAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssetsFindFirstArgs} args - Arguments to find a MaintenanceAssets
     * @example
     * // Get one MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaintenanceAssetsFindFirstArgs>(args?: SelectSubset<T, MaintenanceAssetsFindFirstArgs<ExtArgs>>): Prisma__MaintenanceAssetsClient<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaintenanceAssets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssetsFindFirstOrThrowArgs} args - Arguments to find a MaintenanceAssets
     * @example
     * // Get one MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaintenanceAssetsFindFirstOrThrowArgs>(args?: SelectSubset<T, MaintenanceAssetsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaintenanceAssetsClient<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaintenanceAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssetsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.findMany()
     * 
     * // Get first 10 MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.findMany({ take: 10 })
     * 
     * // Only select the `maintenanceId`
     * const maintenanceAssetsWithMaintenanceIdOnly = await prisma.maintenanceAssets.findMany({ select: { maintenanceId: true } })
     * 
     */
    findMany<T extends MaintenanceAssetsFindManyArgs>(args?: SelectSubset<T, MaintenanceAssetsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaintenanceAssets.
     * @param {MaintenanceAssetsCreateArgs} args - Arguments to create a MaintenanceAssets.
     * @example
     * // Create one MaintenanceAssets
     * const MaintenanceAssets = await prisma.maintenanceAssets.create({
     *   data: {
     *     // ... data to create a MaintenanceAssets
     *   }
     * })
     * 
     */
    create<T extends MaintenanceAssetsCreateArgs>(args: SelectSubset<T, MaintenanceAssetsCreateArgs<ExtArgs>>): Prisma__MaintenanceAssetsClient<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaintenanceAssets.
     * @param {MaintenanceAssetsCreateManyArgs} args - Arguments to create many MaintenanceAssets.
     * @example
     * // Create many MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaintenanceAssetsCreateManyArgs>(args?: SelectSubset<T, MaintenanceAssetsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaintenanceAssets and returns the data saved in the database.
     * @param {MaintenanceAssetsCreateManyAndReturnArgs} args - Arguments to create many MaintenanceAssets.
     * @example
     * // Create many MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaintenanceAssets and only return the `maintenanceId`
     * const maintenanceAssetsWithMaintenanceIdOnly = await prisma.maintenanceAssets.createManyAndReturn({
     *   select: { maintenanceId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaintenanceAssetsCreateManyAndReturnArgs>(args?: SelectSubset<T, MaintenanceAssetsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaintenanceAssets.
     * @param {MaintenanceAssetsDeleteArgs} args - Arguments to delete one MaintenanceAssets.
     * @example
     * // Delete one MaintenanceAssets
     * const MaintenanceAssets = await prisma.maintenanceAssets.delete({
     *   where: {
     *     // ... filter to delete one MaintenanceAssets
     *   }
     * })
     * 
     */
    delete<T extends MaintenanceAssetsDeleteArgs>(args: SelectSubset<T, MaintenanceAssetsDeleteArgs<ExtArgs>>): Prisma__MaintenanceAssetsClient<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaintenanceAssets.
     * @param {MaintenanceAssetsUpdateArgs} args - Arguments to update one MaintenanceAssets.
     * @example
     * // Update one MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaintenanceAssetsUpdateArgs>(args: SelectSubset<T, MaintenanceAssetsUpdateArgs<ExtArgs>>): Prisma__MaintenanceAssetsClient<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaintenanceAssets.
     * @param {MaintenanceAssetsDeleteManyArgs} args - Arguments to filter MaintenanceAssets to delete.
     * @example
     * // Delete a few MaintenanceAssets
     * const { count } = await prisma.maintenanceAssets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaintenanceAssetsDeleteManyArgs>(args?: SelectSubset<T, MaintenanceAssetsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaintenanceAssetsUpdateManyArgs>(args: SelectSubset<T, MaintenanceAssetsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceAssets and returns the data updated in the database.
     * @param {MaintenanceAssetsUpdateManyAndReturnArgs} args - Arguments to update many MaintenanceAssets.
     * @example
     * // Update many MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaintenanceAssets and only return the `maintenanceId`
     * const maintenanceAssetsWithMaintenanceIdOnly = await prisma.maintenanceAssets.updateManyAndReturn({
     *   select: { maintenanceId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaintenanceAssetsUpdateManyAndReturnArgs>(args: SelectSubset<T, MaintenanceAssetsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaintenanceAssets.
     * @param {MaintenanceAssetsUpsertArgs} args - Arguments to update or create a MaintenanceAssets.
     * @example
     * // Update or create a MaintenanceAssets
     * const maintenanceAssets = await prisma.maintenanceAssets.upsert({
     *   create: {
     *     // ... data to create a MaintenanceAssets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaintenanceAssets we want to update
     *   }
     * })
     */
    upsert<T extends MaintenanceAssetsUpsertArgs>(args: SelectSubset<T, MaintenanceAssetsUpsertArgs<ExtArgs>>): Prisma__MaintenanceAssetsClient<$Result.GetResult<Prisma.$MaintenanceAssetsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaintenanceAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssetsCountArgs} args - Arguments to filter MaintenanceAssets to count.
     * @example
     * // Count the number of MaintenanceAssets
     * const count = await prisma.maintenanceAssets.count({
     *   where: {
     *     // ... the filter for the MaintenanceAssets we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceAssetsCountArgs>(
      args?: Subset<T, MaintenanceAssetsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceAssetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaintenanceAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceAssetsAggregateArgs>(args: Subset<T, MaintenanceAssetsAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceAssetsAggregateType<T>>

    /**
     * Group by MaintenanceAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAssetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceAssetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceAssetsGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceAssetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceAssetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceAssetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaintenanceAssets model
   */
  readonly fields: MaintenanceAssetsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaintenanceAssets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaintenanceAssetsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    maintenance<T extends MaintenanceScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceScheduleDefaultArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaintenanceAssets model
   */
  interface MaintenanceAssetsFieldRefs {
    readonly maintenanceId: FieldRef<"MaintenanceAssets", 'String'>
    readonly assetId: FieldRef<"MaintenanceAssets", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MaintenanceAssets findUnique
   */
  export type MaintenanceAssetsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssets to fetch.
     */
    where: MaintenanceAssetsWhereUniqueInput
  }

  /**
   * MaintenanceAssets findUniqueOrThrow
   */
  export type MaintenanceAssetsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssets to fetch.
     */
    where: MaintenanceAssetsWhereUniqueInput
  }

  /**
   * MaintenanceAssets findFirst
   */
  export type MaintenanceAssetsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssets to fetch.
     */
    where?: MaintenanceAssetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceAssets to fetch.
     */
    orderBy?: MaintenanceAssetsOrderByWithRelationInput | MaintenanceAssetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceAssets.
     */
    cursor?: MaintenanceAssetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceAssets.
     */
    distinct?: MaintenanceAssetsScalarFieldEnum | MaintenanceAssetsScalarFieldEnum[]
  }

  /**
   * MaintenanceAssets findFirstOrThrow
   */
  export type MaintenanceAssetsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssets to fetch.
     */
    where?: MaintenanceAssetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceAssets to fetch.
     */
    orderBy?: MaintenanceAssetsOrderByWithRelationInput | MaintenanceAssetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceAssets.
     */
    cursor?: MaintenanceAssetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceAssets.
     */
    distinct?: MaintenanceAssetsScalarFieldEnum | MaintenanceAssetsScalarFieldEnum[]
  }

  /**
   * MaintenanceAssets findMany
   */
  export type MaintenanceAssetsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceAssets to fetch.
     */
    where?: MaintenanceAssetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceAssets to fetch.
     */
    orderBy?: MaintenanceAssetsOrderByWithRelationInput | MaintenanceAssetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaintenanceAssets.
     */
    cursor?: MaintenanceAssetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceAssets.
     */
    skip?: number
    distinct?: MaintenanceAssetsScalarFieldEnum | MaintenanceAssetsScalarFieldEnum[]
  }

  /**
   * MaintenanceAssets create
   */
  export type MaintenanceAssetsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * The data needed to create a MaintenanceAssets.
     */
    data: XOR<MaintenanceAssetsCreateInput, MaintenanceAssetsUncheckedCreateInput>
  }

  /**
   * MaintenanceAssets createMany
   */
  export type MaintenanceAssetsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaintenanceAssets.
     */
    data: MaintenanceAssetsCreateManyInput | MaintenanceAssetsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaintenanceAssets createManyAndReturn
   */
  export type MaintenanceAssetsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * The data used to create many MaintenanceAssets.
     */
    data: MaintenanceAssetsCreateManyInput | MaintenanceAssetsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceAssets update
   */
  export type MaintenanceAssetsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * The data needed to update a MaintenanceAssets.
     */
    data: XOR<MaintenanceAssetsUpdateInput, MaintenanceAssetsUncheckedUpdateInput>
    /**
     * Choose, which MaintenanceAssets to update.
     */
    where: MaintenanceAssetsWhereUniqueInput
  }

  /**
   * MaintenanceAssets updateMany
   */
  export type MaintenanceAssetsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaintenanceAssets.
     */
    data: XOR<MaintenanceAssetsUpdateManyMutationInput, MaintenanceAssetsUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceAssets to update
     */
    where?: MaintenanceAssetsWhereInput
    /**
     * Limit how many MaintenanceAssets to update.
     */
    limit?: number
  }

  /**
   * MaintenanceAssets updateManyAndReturn
   */
  export type MaintenanceAssetsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * The data used to update MaintenanceAssets.
     */
    data: XOR<MaintenanceAssetsUpdateManyMutationInput, MaintenanceAssetsUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceAssets to update
     */
    where?: MaintenanceAssetsWhereInput
    /**
     * Limit how many MaintenanceAssets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceAssets upsert
   */
  export type MaintenanceAssetsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * The filter to search for the MaintenanceAssets to update in case it exists.
     */
    where: MaintenanceAssetsWhereUniqueInput
    /**
     * In case the MaintenanceAssets found by the `where` argument doesn't exist, create a new MaintenanceAssets with this data.
     */
    create: XOR<MaintenanceAssetsCreateInput, MaintenanceAssetsUncheckedCreateInput>
    /**
     * In case the MaintenanceAssets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaintenanceAssetsUpdateInput, MaintenanceAssetsUncheckedUpdateInput>
  }

  /**
   * MaintenanceAssets delete
   */
  export type MaintenanceAssetsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
    /**
     * Filter which MaintenanceAssets to delete.
     */
    where: MaintenanceAssetsWhereUniqueInput
  }

  /**
   * MaintenanceAssets deleteMany
   */
  export type MaintenanceAssetsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceAssets to delete
     */
    where?: MaintenanceAssetsWhereInput
    /**
     * Limit how many MaintenanceAssets to delete.
     */
    limit?: number
  }

  /**
   * MaintenanceAssets without action
   */
  export type MaintenanceAssetsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceAssets
     */
    select?: MaintenanceAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceAssets
     */
    omit?: MaintenanceAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceAssetsInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrder
   */

  export type AggregateWorkOrder = {
    _count: WorkOrderCountAggregateOutputType | null
    _min: WorkOrderMinAggregateOutputType | null
    _max: WorkOrderMaxAggregateOutputType | null
  }

  export type WorkOrderMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    maintenanceId: string | null
    description: string | null
    status: $Enums.WorkOrderStatus | null
    priority: $Enums.CallPriority | null
    dueDate: Date | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type WorkOrderMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    maintenanceId: string | null
    description: string | null
    status: $Enums.WorkOrderStatus | null
    priority: $Enums.CallPriority | null
    dueDate: Date | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type WorkOrderCountAggregateOutputType = {
    id: number
    tenantId: number
    maintenanceId: number
    description: number
    status: number
    priority: number
    dueDate: number
    startedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type WorkOrderMinAggregateInputType = {
    id?: true
    tenantId?: true
    maintenanceId?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type WorkOrderMaxAggregateInputType = {
    id?: true
    tenantId?: true
    maintenanceId?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type WorkOrderCountAggregateInputType = {
    id?: true
    tenantId?: true
    maintenanceId?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type WorkOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrder to aggregate.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrders
    **/
    _count?: true | WorkOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderMaxAggregateInputType
  }

  export type GetWorkOrderAggregateType<T extends WorkOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrder[P]>
      : GetScalarType<T[P], AggregateWorkOrder[P]>
  }




  export type WorkOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithAggregationInput | WorkOrderOrderByWithAggregationInput[]
    by: WorkOrderScalarFieldEnum[] | WorkOrderScalarFieldEnum
    having?: WorkOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderCountAggregateInputType | true
    _min?: WorkOrderMinAggregateInputType
    _max?: WorkOrderMaxAggregateInputType
  }

  export type WorkOrderGroupByOutputType = {
    id: string
    tenantId: string
    maintenanceId: string | null
    description: string
    status: $Enums.WorkOrderStatus
    priority: $Enums.CallPriority
    dueDate: Date | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: WorkOrderCountAggregateOutputType | null
    _min: WorkOrderMinAggregateOutputType | null
    _max: WorkOrderMaxAggregateOutputType | null
  }

  type GetWorkOrderGroupByPayload<T extends WorkOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    maintenanceId?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    maintenance?: boolean | WorkOrder$maintenanceArgs<ExtArgs>
    assignments?: boolean | WorkOrder$assignmentsArgs<ExtArgs>
    assets?: boolean | WorkOrder$assetsArgs<ExtArgs>
    parts?: boolean | WorkOrder$partsArgs<ExtArgs>
    labor?: boolean | WorkOrder$laborArgs<ExtArgs>
    logs?: boolean | WorkOrder$logsArgs<ExtArgs>
    _count?: boolean | WorkOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    maintenanceId?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    maintenance?: boolean | WorkOrder$maintenanceArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    maintenanceId?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    maintenance?: boolean | WorkOrder$maintenanceArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectScalar = {
    id?: boolean
    tenantId?: boolean
    maintenanceId?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type WorkOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "maintenanceId" | "description" | "status" | "priority" | "dueDate" | "startedAt" | "completedAt" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["workOrder"]>
  export type WorkOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    maintenance?: boolean | WorkOrder$maintenanceArgs<ExtArgs>
    assignments?: boolean | WorkOrder$assignmentsArgs<ExtArgs>
    assets?: boolean | WorkOrder$assetsArgs<ExtArgs>
    parts?: boolean | WorkOrder$partsArgs<ExtArgs>
    labor?: boolean | WorkOrder$laborArgs<ExtArgs>
    logs?: boolean | WorkOrder$logsArgs<ExtArgs>
    _count?: boolean | WorkOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    maintenance?: boolean | WorkOrder$maintenanceArgs<ExtArgs>
  }
  export type WorkOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    maintenance?: boolean | WorkOrder$maintenanceArgs<ExtArgs>
  }

  export type $WorkOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrder"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      maintenance: Prisma.$MaintenanceSchedulePayload<ExtArgs> | null
      assignments: Prisma.$WorkOrderAssignmentPayload<ExtArgs>[]
      assets: Prisma.$WorkOrderAssetsPayload<ExtArgs>[]
      parts: Prisma.$WorkOrderPartsPayload<ExtArgs>[]
      labor: Prisma.$WorkOrderLaborPayload<ExtArgs>[]
      logs: Prisma.$WorkOrderLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      maintenanceId: string | null
      description: string
      status: $Enums.WorkOrderStatus
      priority: $Enums.CallPriority
      dueDate: Date | null
      startedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["workOrder"]>
    composites: {}
  }

  type WorkOrderGetPayload<S extends boolean | null | undefined | WorkOrderDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderPayload, S>

  type WorkOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkOrderCountAggregateInputType | true
    }

  export interface WorkOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrder'], meta: { name: 'WorkOrder' } }
    /**
     * Find zero or one WorkOrder that matches the filter.
     * @param {WorkOrderFindUniqueArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderFindUniqueArgs>(args: SelectSubset<T, WorkOrderFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkOrderFindUniqueOrThrowArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindFirstArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderFindFirstArgs>(args?: SelectSubset<T, WorkOrderFindFirstArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindFirstOrThrowArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrders
     * const workOrders = await prisma.workOrder.findMany()
     * 
     * // Get first 10 WorkOrders
     * const workOrders = await prisma.workOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderFindManyArgs>(args?: SelectSubset<T, WorkOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkOrder.
     * @param {WorkOrderCreateArgs} args - Arguments to create a WorkOrder.
     * @example
     * // Create one WorkOrder
     * const WorkOrder = await prisma.workOrder.create({
     *   data: {
     *     // ... data to create a WorkOrder
     *   }
     * })
     * 
     */
    create<T extends WorkOrderCreateArgs>(args: SelectSubset<T, WorkOrderCreateArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkOrders.
     * @param {WorkOrderCreateManyArgs} args - Arguments to create many WorkOrders.
     * @example
     * // Create many WorkOrders
     * const workOrder = await prisma.workOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderCreateManyArgs>(args?: SelectSubset<T, WorkOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrders and returns the data saved in the database.
     * @param {WorkOrderCreateManyAndReturnArgs} args - Arguments to create many WorkOrders.
     * @example
     * // Create many WorkOrders
     * const workOrder = await prisma.workOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrders and only return the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkOrder.
     * @param {WorkOrderDeleteArgs} args - Arguments to delete one WorkOrder.
     * @example
     * // Delete one WorkOrder
     * const WorkOrder = await prisma.workOrder.delete({
     *   where: {
     *     // ... filter to delete one WorkOrder
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderDeleteArgs>(args: SelectSubset<T, WorkOrderDeleteArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkOrder.
     * @param {WorkOrderUpdateArgs} args - Arguments to update one WorkOrder.
     * @example
     * // Update one WorkOrder
     * const workOrder = await prisma.workOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderUpdateArgs>(args: SelectSubset<T, WorkOrderUpdateArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkOrders.
     * @param {WorkOrderDeleteManyArgs} args - Arguments to filter WorkOrders to delete.
     * @example
     * // Delete a few WorkOrders
     * const { count } = await prisma.workOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderDeleteManyArgs>(args?: SelectSubset<T, WorkOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrders
     * const workOrder = await prisma.workOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderUpdateManyArgs>(args: SelectSubset<T, WorkOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrders and returns the data updated in the database.
     * @param {WorkOrderUpdateManyAndReturnArgs} args - Arguments to update many WorkOrders.
     * @example
     * // Update many WorkOrders
     * const workOrder = await prisma.workOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkOrders and only return the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkOrder.
     * @param {WorkOrderUpsertArgs} args - Arguments to update or create a WorkOrder.
     * @example
     * // Update or create a WorkOrder
     * const workOrder = await prisma.workOrder.upsert({
     *   create: {
     *     // ... data to create a WorkOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrder we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderUpsertArgs>(args: SelectSubset<T, WorkOrderUpsertArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderCountArgs} args - Arguments to filter WorkOrders to count.
     * @example
     * // Count the number of WorkOrders
     * const count = await prisma.workOrder.count({
     *   where: {
     *     // ... the filter for the WorkOrders we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderCountArgs>(
      args?: Subset<T, WorkOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderAggregateArgs>(args: Subset<T, WorkOrderAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderAggregateType<T>>

    /**
     * Group by WorkOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrder model
   */
  readonly fields: WorkOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    maintenance<T extends WorkOrder$maintenanceArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$maintenanceArgs<ExtArgs>>): Prisma__MaintenanceScheduleClient<$Result.GetResult<Prisma.$MaintenanceSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignments<T extends WorkOrder$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assets<T extends WorkOrder$assetsArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    parts<T extends WorkOrder$partsArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$partsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    labor<T extends WorkOrder$laborArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$laborArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends WorkOrder$logsArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrder model
   */
  interface WorkOrderFieldRefs {
    readonly id: FieldRef<"WorkOrder", 'String'>
    readonly tenantId: FieldRef<"WorkOrder", 'String'>
    readonly maintenanceId: FieldRef<"WorkOrder", 'String'>
    readonly description: FieldRef<"WorkOrder", 'String'>
    readonly status: FieldRef<"WorkOrder", 'WorkOrderStatus'>
    readonly priority: FieldRef<"WorkOrder", 'CallPriority'>
    readonly dueDate: FieldRef<"WorkOrder", 'DateTime'>
    readonly startedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly completedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly createdAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly deletedAt: FieldRef<"WorkOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrder findUnique
   */
  export type WorkOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder findUniqueOrThrow
   */
  export type WorkOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder findFirst
   */
  export type WorkOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrders.
     */
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder findFirstOrThrow
   */
  export type WorkOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrders.
     */
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder findMany
   */
  export type WorkOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrders to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder create
   */
  export type WorkOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrder.
     */
    data: XOR<WorkOrderCreateInput, WorkOrderUncheckedCreateInput>
  }

  /**
   * WorkOrder createMany
   */
  export type WorkOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrders.
     */
    data: WorkOrderCreateManyInput | WorkOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrder createManyAndReturn
   */
  export type WorkOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * The data used to create many WorkOrders.
     */
    data: WorkOrderCreateManyInput | WorkOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrder update
   */
  export type WorkOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrder.
     */
    data: XOR<WorkOrderUpdateInput, WorkOrderUncheckedUpdateInput>
    /**
     * Choose, which WorkOrder to update.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder updateMany
   */
  export type WorkOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrders.
     */
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrders to update
     */
    where?: WorkOrderWhereInput
    /**
     * Limit how many WorkOrders to update.
     */
    limit?: number
  }

  /**
   * WorkOrder updateManyAndReturn
   */
  export type WorkOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * The data used to update WorkOrders.
     */
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrders to update
     */
    where?: WorkOrderWhereInput
    /**
     * Limit how many WorkOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrder upsert
   */
  export type WorkOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrder to update in case it exists.
     */
    where: WorkOrderWhereUniqueInput
    /**
     * In case the WorkOrder found by the `where` argument doesn't exist, create a new WorkOrder with this data.
     */
    create: XOR<WorkOrderCreateInput, WorkOrderUncheckedCreateInput>
    /**
     * In case the WorkOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderUpdateInput, WorkOrderUncheckedUpdateInput>
  }

  /**
   * WorkOrder delete
   */
  export type WorkOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter which WorkOrder to delete.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder deleteMany
   */
  export type WorkOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrders to delete
     */
    where?: WorkOrderWhereInput
    /**
     * Limit how many WorkOrders to delete.
     */
    limit?: number
  }

  /**
   * WorkOrder.maintenance
   */
  export type WorkOrder$maintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceSchedule
     */
    select?: MaintenanceScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceSchedule
     */
    omit?: MaintenanceScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceScheduleInclude<ExtArgs> | null
    where?: MaintenanceScheduleWhereInput
  }

  /**
   * WorkOrder.assignments
   */
  export type WorkOrder$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    where?: WorkOrderAssignmentWhereInput
    orderBy?: WorkOrderAssignmentOrderByWithRelationInput | WorkOrderAssignmentOrderByWithRelationInput[]
    cursor?: WorkOrderAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderAssignmentScalarFieldEnum | WorkOrderAssignmentScalarFieldEnum[]
  }

  /**
   * WorkOrder.assets
   */
  export type WorkOrder$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    where?: WorkOrderAssetsWhereInput
    orderBy?: WorkOrderAssetsOrderByWithRelationInput | WorkOrderAssetsOrderByWithRelationInput[]
    cursor?: WorkOrderAssetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderAssetsScalarFieldEnum | WorkOrderAssetsScalarFieldEnum[]
  }

  /**
   * WorkOrder.parts
   */
  export type WorkOrder$partsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    where?: WorkOrderPartsWhereInput
    orderBy?: WorkOrderPartsOrderByWithRelationInput | WorkOrderPartsOrderByWithRelationInput[]
    cursor?: WorkOrderPartsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderPartsScalarFieldEnum | WorkOrderPartsScalarFieldEnum[]
  }

  /**
   * WorkOrder.labor
   */
  export type WorkOrder$laborArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    where?: WorkOrderLaborWhereInput
    orderBy?: WorkOrderLaborOrderByWithRelationInput | WorkOrderLaborOrderByWithRelationInput[]
    cursor?: WorkOrderLaborWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderLaborScalarFieldEnum | WorkOrderLaborScalarFieldEnum[]
  }

  /**
   * WorkOrder.logs
   */
  export type WorkOrder$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    where?: WorkOrderLogWhereInput
    orderBy?: WorkOrderLogOrderByWithRelationInput | WorkOrderLogOrderByWithRelationInput[]
    cursor?: WorkOrderLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderLogScalarFieldEnum | WorkOrderLogScalarFieldEnum[]
  }

  /**
   * WorkOrder without action
   */
  export type WorkOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrderAssignment
   */

  export type AggregateWorkOrderAssignment = {
    _count: WorkOrderAssignmentCountAggregateOutputType | null
    _min: WorkOrderAssignmentMinAggregateOutputType | null
    _max: WorkOrderAssignmentMaxAggregateOutputType | null
  }

  export type WorkOrderAssignmentMinAggregateOutputType = {
    workOrderId: string | null
    userId: string | null
  }

  export type WorkOrderAssignmentMaxAggregateOutputType = {
    workOrderId: string | null
    userId: string | null
  }

  export type WorkOrderAssignmentCountAggregateOutputType = {
    workOrderId: number
    userId: number
    _all: number
  }


  export type WorkOrderAssignmentMinAggregateInputType = {
    workOrderId?: true
    userId?: true
  }

  export type WorkOrderAssignmentMaxAggregateInputType = {
    workOrderId?: true
    userId?: true
  }

  export type WorkOrderAssignmentCountAggregateInputType = {
    workOrderId?: true
    userId?: true
    _all?: true
  }

  export type WorkOrderAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderAssignment to aggregate.
     */
    where?: WorkOrderAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderAssignments to fetch.
     */
    orderBy?: WorkOrderAssignmentOrderByWithRelationInput | WorkOrderAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrderAssignments
    **/
    _count?: true | WorkOrderAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderAssignmentMaxAggregateInputType
  }

  export type GetWorkOrderAssignmentAggregateType<T extends WorkOrderAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrderAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrderAssignment[P]>
      : GetScalarType<T[P], AggregateWorkOrderAssignment[P]>
  }




  export type WorkOrderAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderAssignmentWhereInput
    orderBy?: WorkOrderAssignmentOrderByWithAggregationInput | WorkOrderAssignmentOrderByWithAggregationInput[]
    by: WorkOrderAssignmentScalarFieldEnum[] | WorkOrderAssignmentScalarFieldEnum
    having?: WorkOrderAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderAssignmentCountAggregateInputType | true
    _min?: WorkOrderAssignmentMinAggregateInputType
    _max?: WorkOrderAssignmentMaxAggregateInputType
  }

  export type WorkOrderAssignmentGroupByOutputType = {
    workOrderId: string
    userId: string
    _count: WorkOrderAssignmentCountAggregateOutputType | null
    _min: WorkOrderAssignmentMinAggregateOutputType | null
    _max: WorkOrderAssignmentMaxAggregateOutputType | null
  }

  type GetWorkOrderAssignmentGroupByPayload<T extends WorkOrderAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    userId?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderAssignment"]>

  export type WorkOrderAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    userId?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderAssignment"]>

  export type WorkOrderAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    userId?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderAssignment"]>

  export type WorkOrderAssignmentSelectScalar = {
    workOrderId?: boolean
    userId?: boolean
  }

  export type WorkOrderAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"workOrderId" | "userId", ExtArgs["result"]["workOrderAssignment"]>
  export type WorkOrderAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WorkOrderAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WorkOrderAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkOrderAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrderAssignment"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      workOrderId: string
      userId: string
    }, ExtArgs["result"]["workOrderAssignment"]>
    composites: {}
  }

  type WorkOrderAssignmentGetPayload<S extends boolean | null | undefined | WorkOrderAssignmentDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderAssignmentPayload, S>

  type WorkOrderAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkOrderAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkOrderAssignmentCountAggregateInputType | true
    }

  export interface WorkOrderAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrderAssignment'], meta: { name: 'WorkOrderAssignment' } }
    /**
     * Find zero or one WorkOrderAssignment that matches the filter.
     * @param {WorkOrderAssignmentFindUniqueArgs} args - Arguments to find a WorkOrderAssignment
     * @example
     * // Get one WorkOrderAssignment
     * const workOrderAssignment = await prisma.workOrderAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderAssignmentFindUniqueArgs>(args: SelectSubset<T, WorkOrderAssignmentFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderAssignmentClient<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkOrderAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkOrderAssignmentFindUniqueOrThrowArgs} args - Arguments to find a WorkOrderAssignment
     * @example
     * // Get one WorkOrderAssignment
     * const workOrderAssignment = await prisma.workOrderAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderAssignmentClient<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssignmentFindFirstArgs} args - Arguments to find a WorkOrderAssignment
     * @example
     * // Get one WorkOrderAssignment
     * const workOrderAssignment = await prisma.workOrderAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderAssignmentFindFirstArgs>(args?: SelectSubset<T, WorkOrderAssignmentFindFirstArgs<ExtArgs>>): Prisma__WorkOrderAssignmentClient<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssignmentFindFirstOrThrowArgs} args - Arguments to find a WorkOrderAssignment
     * @example
     * // Get one WorkOrderAssignment
     * const workOrderAssignment = await prisma.workOrderAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderAssignmentClient<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkOrderAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrderAssignments
     * const workOrderAssignments = await prisma.workOrderAssignment.findMany()
     * 
     * // Get first 10 WorkOrderAssignments
     * const workOrderAssignments = await prisma.workOrderAssignment.findMany({ take: 10 })
     * 
     * // Only select the `workOrderId`
     * const workOrderAssignmentWithWorkOrderIdOnly = await prisma.workOrderAssignment.findMany({ select: { workOrderId: true } })
     * 
     */
    findMany<T extends WorkOrderAssignmentFindManyArgs>(args?: SelectSubset<T, WorkOrderAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkOrderAssignment.
     * @param {WorkOrderAssignmentCreateArgs} args - Arguments to create a WorkOrderAssignment.
     * @example
     * // Create one WorkOrderAssignment
     * const WorkOrderAssignment = await prisma.workOrderAssignment.create({
     *   data: {
     *     // ... data to create a WorkOrderAssignment
     *   }
     * })
     * 
     */
    create<T extends WorkOrderAssignmentCreateArgs>(args: SelectSubset<T, WorkOrderAssignmentCreateArgs<ExtArgs>>): Prisma__WorkOrderAssignmentClient<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkOrderAssignments.
     * @param {WorkOrderAssignmentCreateManyArgs} args - Arguments to create many WorkOrderAssignments.
     * @example
     * // Create many WorkOrderAssignments
     * const workOrderAssignment = await prisma.workOrderAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderAssignmentCreateManyArgs>(args?: SelectSubset<T, WorkOrderAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrderAssignments and returns the data saved in the database.
     * @param {WorkOrderAssignmentCreateManyAndReturnArgs} args - Arguments to create many WorkOrderAssignments.
     * @example
     * // Create many WorkOrderAssignments
     * const workOrderAssignment = await prisma.workOrderAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrderAssignments and only return the `workOrderId`
     * const workOrderAssignmentWithWorkOrderIdOnly = await prisma.workOrderAssignment.createManyAndReturn({
     *   select: { workOrderId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkOrderAssignment.
     * @param {WorkOrderAssignmentDeleteArgs} args - Arguments to delete one WorkOrderAssignment.
     * @example
     * // Delete one WorkOrderAssignment
     * const WorkOrderAssignment = await prisma.workOrderAssignment.delete({
     *   where: {
     *     // ... filter to delete one WorkOrderAssignment
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderAssignmentDeleteArgs>(args: SelectSubset<T, WorkOrderAssignmentDeleteArgs<ExtArgs>>): Prisma__WorkOrderAssignmentClient<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkOrderAssignment.
     * @param {WorkOrderAssignmentUpdateArgs} args - Arguments to update one WorkOrderAssignment.
     * @example
     * // Update one WorkOrderAssignment
     * const workOrderAssignment = await prisma.workOrderAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderAssignmentUpdateArgs>(args: SelectSubset<T, WorkOrderAssignmentUpdateArgs<ExtArgs>>): Prisma__WorkOrderAssignmentClient<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkOrderAssignments.
     * @param {WorkOrderAssignmentDeleteManyArgs} args - Arguments to filter WorkOrderAssignments to delete.
     * @example
     * // Delete a few WorkOrderAssignments
     * const { count } = await prisma.workOrderAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderAssignmentDeleteManyArgs>(args?: SelectSubset<T, WorkOrderAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrderAssignments
     * const workOrderAssignment = await prisma.workOrderAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderAssignmentUpdateManyArgs>(args: SelectSubset<T, WorkOrderAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderAssignments and returns the data updated in the database.
     * @param {WorkOrderAssignmentUpdateManyAndReturnArgs} args - Arguments to update many WorkOrderAssignments.
     * @example
     * // Update many WorkOrderAssignments
     * const workOrderAssignment = await prisma.workOrderAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkOrderAssignments and only return the `workOrderId`
     * const workOrderAssignmentWithWorkOrderIdOnly = await prisma.workOrderAssignment.updateManyAndReturn({
     *   select: { workOrderId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkOrderAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkOrderAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkOrderAssignment.
     * @param {WorkOrderAssignmentUpsertArgs} args - Arguments to update or create a WorkOrderAssignment.
     * @example
     * // Update or create a WorkOrderAssignment
     * const workOrderAssignment = await prisma.workOrderAssignment.upsert({
     *   create: {
     *     // ... data to create a WorkOrderAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrderAssignment we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderAssignmentUpsertArgs>(args: SelectSubset<T, WorkOrderAssignmentUpsertArgs<ExtArgs>>): Prisma__WorkOrderAssignmentClient<$Result.GetResult<Prisma.$WorkOrderAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkOrderAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssignmentCountArgs} args - Arguments to filter WorkOrderAssignments to count.
     * @example
     * // Count the number of WorkOrderAssignments
     * const count = await prisma.workOrderAssignment.count({
     *   where: {
     *     // ... the filter for the WorkOrderAssignments we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderAssignmentCountArgs>(
      args?: Subset<T, WorkOrderAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrderAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderAssignmentAggregateArgs>(args: Subset<T, WorkOrderAssignmentAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderAssignmentAggregateType<T>>

    /**
     * Group by WorkOrderAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrderAssignment model
   */
  readonly fields: WorkOrderAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrderAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrderAssignment model
   */
  interface WorkOrderAssignmentFieldRefs {
    readonly workOrderId: FieldRef<"WorkOrderAssignment", 'String'>
    readonly userId: FieldRef<"WorkOrderAssignment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrderAssignment findUnique
   */
  export type WorkOrderAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssignment to fetch.
     */
    where: WorkOrderAssignmentWhereUniqueInput
  }

  /**
   * WorkOrderAssignment findUniqueOrThrow
   */
  export type WorkOrderAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssignment to fetch.
     */
    where: WorkOrderAssignmentWhereUniqueInput
  }

  /**
   * WorkOrderAssignment findFirst
   */
  export type WorkOrderAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssignment to fetch.
     */
    where?: WorkOrderAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderAssignments to fetch.
     */
    orderBy?: WorkOrderAssignmentOrderByWithRelationInput | WorkOrderAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderAssignments.
     */
    cursor?: WorkOrderAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderAssignments.
     */
    distinct?: WorkOrderAssignmentScalarFieldEnum | WorkOrderAssignmentScalarFieldEnum[]
  }

  /**
   * WorkOrderAssignment findFirstOrThrow
   */
  export type WorkOrderAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssignment to fetch.
     */
    where?: WorkOrderAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderAssignments to fetch.
     */
    orderBy?: WorkOrderAssignmentOrderByWithRelationInput | WorkOrderAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderAssignments.
     */
    cursor?: WorkOrderAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderAssignments.
     */
    distinct?: WorkOrderAssignmentScalarFieldEnum | WorkOrderAssignmentScalarFieldEnum[]
  }

  /**
   * WorkOrderAssignment findMany
   */
  export type WorkOrderAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssignments to fetch.
     */
    where?: WorkOrderAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderAssignments to fetch.
     */
    orderBy?: WorkOrderAssignmentOrderByWithRelationInput | WorkOrderAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrderAssignments.
     */
    cursor?: WorkOrderAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderAssignments.
     */
    skip?: number
    distinct?: WorkOrderAssignmentScalarFieldEnum | WorkOrderAssignmentScalarFieldEnum[]
  }

  /**
   * WorkOrderAssignment create
   */
  export type WorkOrderAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrderAssignment.
     */
    data: XOR<WorkOrderAssignmentCreateInput, WorkOrderAssignmentUncheckedCreateInput>
  }

  /**
   * WorkOrderAssignment createMany
   */
  export type WorkOrderAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrderAssignments.
     */
    data: WorkOrderAssignmentCreateManyInput | WorkOrderAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrderAssignment createManyAndReturn
   */
  export type WorkOrderAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many WorkOrderAssignments.
     */
    data: WorkOrderAssignmentCreateManyInput | WorkOrderAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderAssignment update
   */
  export type WorkOrderAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrderAssignment.
     */
    data: XOR<WorkOrderAssignmentUpdateInput, WorkOrderAssignmentUncheckedUpdateInput>
    /**
     * Choose, which WorkOrderAssignment to update.
     */
    where: WorkOrderAssignmentWhereUniqueInput
  }

  /**
   * WorkOrderAssignment updateMany
   */
  export type WorkOrderAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrderAssignments.
     */
    data: XOR<WorkOrderAssignmentUpdateManyMutationInput, WorkOrderAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderAssignments to update
     */
    where?: WorkOrderAssignmentWhereInput
    /**
     * Limit how many WorkOrderAssignments to update.
     */
    limit?: number
  }

  /**
   * WorkOrderAssignment updateManyAndReturn
   */
  export type WorkOrderAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update WorkOrderAssignments.
     */
    data: XOR<WorkOrderAssignmentUpdateManyMutationInput, WorkOrderAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderAssignments to update
     */
    where?: WorkOrderAssignmentWhereInput
    /**
     * Limit how many WorkOrderAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderAssignment upsert
   */
  export type WorkOrderAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrderAssignment to update in case it exists.
     */
    where: WorkOrderAssignmentWhereUniqueInput
    /**
     * In case the WorkOrderAssignment found by the `where` argument doesn't exist, create a new WorkOrderAssignment with this data.
     */
    create: XOR<WorkOrderAssignmentCreateInput, WorkOrderAssignmentUncheckedCreateInput>
    /**
     * In case the WorkOrderAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderAssignmentUpdateInput, WorkOrderAssignmentUncheckedUpdateInput>
  }

  /**
   * WorkOrderAssignment delete
   */
  export type WorkOrderAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
    /**
     * Filter which WorkOrderAssignment to delete.
     */
    where: WorkOrderAssignmentWhereUniqueInput
  }

  /**
   * WorkOrderAssignment deleteMany
   */
  export type WorkOrderAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderAssignments to delete
     */
    where?: WorkOrderAssignmentWhereInput
    /**
     * Limit how many WorkOrderAssignments to delete.
     */
    limit?: number
  }

  /**
   * WorkOrderAssignment without action
   */
  export type WorkOrderAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssignment
     */
    select?: WorkOrderAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssignment
     */
    omit?: WorkOrderAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrderAssets
   */

  export type AggregateWorkOrderAssets = {
    _count: WorkOrderAssetsCountAggregateOutputType | null
    _min: WorkOrderAssetsMinAggregateOutputType | null
    _max: WorkOrderAssetsMaxAggregateOutputType | null
  }

  export type WorkOrderAssetsMinAggregateOutputType = {
    workOrderId: string | null
    assetId: string | null
  }

  export type WorkOrderAssetsMaxAggregateOutputType = {
    workOrderId: string | null
    assetId: string | null
  }

  export type WorkOrderAssetsCountAggregateOutputType = {
    workOrderId: number
    assetId: number
    _all: number
  }


  export type WorkOrderAssetsMinAggregateInputType = {
    workOrderId?: true
    assetId?: true
  }

  export type WorkOrderAssetsMaxAggregateInputType = {
    workOrderId?: true
    assetId?: true
  }

  export type WorkOrderAssetsCountAggregateInputType = {
    workOrderId?: true
    assetId?: true
    _all?: true
  }

  export type WorkOrderAssetsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderAssets to aggregate.
     */
    where?: WorkOrderAssetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderAssets to fetch.
     */
    orderBy?: WorkOrderAssetsOrderByWithRelationInput | WorkOrderAssetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderAssetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrderAssets
    **/
    _count?: true | WorkOrderAssetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderAssetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderAssetsMaxAggregateInputType
  }

  export type GetWorkOrderAssetsAggregateType<T extends WorkOrderAssetsAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrderAssets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrderAssets[P]>
      : GetScalarType<T[P], AggregateWorkOrderAssets[P]>
  }




  export type WorkOrderAssetsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderAssetsWhereInput
    orderBy?: WorkOrderAssetsOrderByWithAggregationInput | WorkOrderAssetsOrderByWithAggregationInput[]
    by: WorkOrderAssetsScalarFieldEnum[] | WorkOrderAssetsScalarFieldEnum
    having?: WorkOrderAssetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderAssetsCountAggregateInputType | true
    _min?: WorkOrderAssetsMinAggregateInputType
    _max?: WorkOrderAssetsMaxAggregateInputType
  }

  export type WorkOrderAssetsGroupByOutputType = {
    workOrderId: string
    assetId: string
    _count: WorkOrderAssetsCountAggregateOutputType | null
    _min: WorkOrderAssetsMinAggregateOutputType | null
    _max: WorkOrderAssetsMaxAggregateOutputType | null
  }

  type GetWorkOrderAssetsGroupByPayload<T extends WorkOrderAssetsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderAssetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderAssetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderAssetsGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderAssetsGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderAssetsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    assetId?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderAssets"]>

  export type WorkOrderAssetsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    assetId?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderAssets"]>

  export type WorkOrderAssetsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    assetId?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderAssets"]>

  export type WorkOrderAssetsSelectScalar = {
    workOrderId?: boolean
    assetId?: boolean
  }

  export type WorkOrderAssetsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"workOrderId" | "assetId", ExtArgs["result"]["workOrderAssets"]>
  export type WorkOrderAssetsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type WorkOrderAssetsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type WorkOrderAssetsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }

  export type $WorkOrderAssetsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrderAssets"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      workOrderId: string
      assetId: string
    }, ExtArgs["result"]["workOrderAssets"]>
    composites: {}
  }

  type WorkOrderAssetsGetPayload<S extends boolean | null | undefined | WorkOrderAssetsDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderAssetsPayload, S>

  type WorkOrderAssetsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkOrderAssetsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkOrderAssetsCountAggregateInputType | true
    }

  export interface WorkOrderAssetsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrderAssets'], meta: { name: 'WorkOrderAssets' } }
    /**
     * Find zero or one WorkOrderAssets that matches the filter.
     * @param {WorkOrderAssetsFindUniqueArgs} args - Arguments to find a WorkOrderAssets
     * @example
     * // Get one WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderAssetsFindUniqueArgs>(args: SelectSubset<T, WorkOrderAssetsFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderAssetsClient<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkOrderAssets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkOrderAssetsFindUniqueOrThrowArgs} args - Arguments to find a WorkOrderAssets
     * @example
     * // Get one WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderAssetsFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderAssetsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderAssetsClient<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssetsFindFirstArgs} args - Arguments to find a WorkOrderAssets
     * @example
     * // Get one WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderAssetsFindFirstArgs>(args?: SelectSubset<T, WorkOrderAssetsFindFirstArgs<ExtArgs>>): Prisma__WorkOrderAssetsClient<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderAssets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssetsFindFirstOrThrowArgs} args - Arguments to find a WorkOrderAssets
     * @example
     * // Get one WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderAssetsFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderAssetsFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderAssetsClient<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkOrderAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssetsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.findMany()
     * 
     * // Get first 10 WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.findMany({ take: 10 })
     * 
     * // Only select the `workOrderId`
     * const workOrderAssetsWithWorkOrderIdOnly = await prisma.workOrderAssets.findMany({ select: { workOrderId: true } })
     * 
     */
    findMany<T extends WorkOrderAssetsFindManyArgs>(args?: SelectSubset<T, WorkOrderAssetsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkOrderAssets.
     * @param {WorkOrderAssetsCreateArgs} args - Arguments to create a WorkOrderAssets.
     * @example
     * // Create one WorkOrderAssets
     * const WorkOrderAssets = await prisma.workOrderAssets.create({
     *   data: {
     *     // ... data to create a WorkOrderAssets
     *   }
     * })
     * 
     */
    create<T extends WorkOrderAssetsCreateArgs>(args: SelectSubset<T, WorkOrderAssetsCreateArgs<ExtArgs>>): Prisma__WorkOrderAssetsClient<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkOrderAssets.
     * @param {WorkOrderAssetsCreateManyArgs} args - Arguments to create many WorkOrderAssets.
     * @example
     * // Create many WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderAssetsCreateManyArgs>(args?: SelectSubset<T, WorkOrderAssetsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrderAssets and returns the data saved in the database.
     * @param {WorkOrderAssetsCreateManyAndReturnArgs} args - Arguments to create many WorkOrderAssets.
     * @example
     * // Create many WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrderAssets and only return the `workOrderId`
     * const workOrderAssetsWithWorkOrderIdOnly = await prisma.workOrderAssets.createManyAndReturn({
     *   select: { workOrderId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderAssetsCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderAssetsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkOrderAssets.
     * @param {WorkOrderAssetsDeleteArgs} args - Arguments to delete one WorkOrderAssets.
     * @example
     * // Delete one WorkOrderAssets
     * const WorkOrderAssets = await prisma.workOrderAssets.delete({
     *   where: {
     *     // ... filter to delete one WorkOrderAssets
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderAssetsDeleteArgs>(args: SelectSubset<T, WorkOrderAssetsDeleteArgs<ExtArgs>>): Prisma__WorkOrderAssetsClient<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkOrderAssets.
     * @param {WorkOrderAssetsUpdateArgs} args - Arguments to update one WorkOrderAssets.
     * @example
     * // Update one WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderAssetsUpdateArgs>(args: SelectSubset<T, WorkOrderAssetsUpdateArgs<ExtArgs>>): Prisma__WorkOrderAssetsClient<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkOrderAssets.
     * @param {WorkOrderAssetsDeleteManyArgs} args - Arguments to filter WorkOrderAssets to delete.
     * @example
     * // Delete a few WorkOrderAssets
     * const { count } = await prisma.workOrderAssets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderAssetsDeleteManyArgs>(args?: SelectSubset<T, WorkOrderAssetsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderAssetsUpdateManyArgs>(args: SelectSubset<T, WorkOrderAssetsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderAssets and returns the data updated in the database.
     * @param {WorkOrderAssetsUpdateManyAndReturnArgs} args - Arguments to update many WorkOrderAssets.
     * @example
     * // Update many WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkOrderAssets and only return the `workOrderId`
     * const workOrderAssetsWithWorkOrderIdOnly = await prisma.workOrderAssets.updateManyAndReturn({
     *   select: { workOrderId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkOrderAssetsUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkOrderAssetsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkOrderAssets.
     * @param {WorkOrderAssetsUpsertArgs} args - Arguments to update or create a WorkOrderAssets.
     * @example
     * // Update or create a WorkOrderAssets
     * const workOrderAssets = await prisma.workOrderAssets.upsert({
     *   create: {
     *     // ... data to create a WorkOrderAssets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrderAssets we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderAssetsUpsertArgs>(args: SelectSubset<T, WorkOrderAssetsUpsertArgs<ExtArgs>>): Prisma__WorkOrderAssetsClient<$Result.GetResult<Prisma.$WorkOrderAssetsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkOrderAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssetsCountArgs} args - Arguments to filter WorkOrderAssets to count.
     * @example
     * // Count the number of WorkOrderAssets
     * const count = await prisma.workOrderAssets.count({
     *   where: {
     *     // ... the filter for the WorkOrderAssets we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderAssetsCountArgs>(
      args?: Subset<T, WorkOrderAssetsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderAssetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrderAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderAssetsAggregateArgs>(args: Subset<T, WorkOrderAssetsAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderAssetsAggregateType<T>>

    /**
     * Group by WorkOrderAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAssetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderAssetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderAssetsGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderAssetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderAssetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderAssetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrderAssets model
   */
  readonly fields: WorkOrderAssetsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrderAssets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderAssetsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrderAssets model
   */
  interface WorkOrderAssetsFieldRefs {
    readonly workOrderId: FieldRef<"WorkOrderAssets", 'String'>
    readonly assetId: FieldRef<"WorkOrderAssets", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrderAssets findUnique
   */
  export type WorkOrderAssetsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssets to fetch.
     */
    where: WorkOrderAssetsWhereUniqueInput
  }

  /**
   * WorkOrderAssets findUniqueOrThrow
   */
  export type WorkOrderAssetsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssets to fetch.
     */
    where: WorkOrderAssetsWhereUniqueInput
  }

  /**
   * WorkOrderAssets findFirst
   */
  export type WorkOrderAssetsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssets to fetch.
     */
    where?: WorkOrderAssetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderAssets to fetch.
     */
    orderBy?: WorkOrderAssetsOrderByWithRelationInput | WorkOrderAssetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderAssets.
     */
    cursor?: WorkOrderAssetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderAssets.
     */
    distinct?: WorkOrderAssetsScalarFieldEnum | WorkOrderAssetsScalarFieldEnum[]
  }

  /**
   * WorkOrderAssets findFirstOrThrow
   */
  export type WorkOrderAssetsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssets to fetch.
     */
    where?: WorkOrderAssetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderAssets to fetch.
     */
    orderBy?: WorkOrderAssetsOrderByWithRelationInput | WorkOrderAssetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderAssets.
     */
    cursor?: WorkOrderAssetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderAssets.
     */
    distinct?: WorkOrderAssetsScalarFieldEnum | WorkOrderAssetsScalarFieldEnum[]
  }

  /**
   * WorkOrderAssets findMany
   */
  export type WorkOrderAssetsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderAssets to fetch.
     */
    where?: WorkOrderAssetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderAssets to fetch.
     */
    orderBy?: WorkOrderAssetsOrderByWithRelationInput | WorkOrderAssetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrderAssets.
     */
    cursor?: WorkOrderAssetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderAssets.
     */
    skip?: number
    distinct?: WorkOrderAssetsScalarFieldEnum | WorkOrderAssetsScalarFieldEnum[]
  }

  /**
   * WorkOrderAssets create
   */
  export type WorkOrderAssetsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrderAssets.
     */
    data: XOR<WorkOrderAssetsCreateInput, WorkOrderAssetsUncheckedCreateInput>
  }

  /**
   * WorkOrderAssets createMany
   */
  export type WorkOrderAssetsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrderAssets.
     */
    data: WorkOrderAssetsCreateManyInput | WorkOrderAssetsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrderAssets createManyAndReturn
   */
  export type WorkOrderAssetsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * The data used to create many WorkOrderAssets.
     */
    data: WorkOrderAssetsCreateManyInput | WorkOrderAssetsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderAssets update
   */
  export type WorkOrderAssetsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrderAssets.
     */
    data: XOR<WorkOrderAssetsUpdateInput, WorkOrderAssetsUncheckedUpdateInput>
    /**
     * Choose, which WorkOrderAssets to update.
     */
    where: WorkOrderAssetsWhereUniqueInput
  }

  /**
   * WorkOrderAssets updateMany
   */
  export type WorkOrderAssetsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrderAssets.
     */
    data: XOR<WorkOrderAssetsUpdateManyMutationInput, WorkOrderAssetsUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderAssets to update
     */
    where?: WorkOrderAssetsWhereInput
    /**
     * Limit how many WorkOrderAssets to update.
     */
    limit?: number
  }

  /**
   * WorkOrderAssets updateManyAndReturn
   */
  export type WorkOrderAssetsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * The data used to update WorkOrderAssets.
     */
    data: XOR<WorkOrderAssetsUpdateManyMutationInput, WorkOrderAssetsUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderAssets to update
     */
    where?: WorkOrderAssetsWhereInput
    /**
     * Limit how many WorkOrderAssets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderAssets upsert
   */
  export type WorkOrderAssetsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrderAssets to update in case it exists.
     */
    where: WorkOrderAssetsWhereUniqueInput
    /**
     * In case the WorkOrderAssets found by the `where` argument doesn't exist, create a new WorkOrderAssets with this data.
     */
    create: XOR<WorkOrderAssetsCreateInput, WorkOrderAssetsUncheckedCreateInput>
    /**
     * In case the WorkOrderAssets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderAssetsUpdateInput, WorkOrderAssetsUncheckedUpdateInput>
  }

  /**
   * WorkOrderAssets delete
   */
  export type WorkOrderAssetsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
    /**
     * Filter which WorkOrderAssets to delete.
     */
    where: WorkOrderAssetsWhereUniqueInput
  }

  /**
   * WorkOrderAssets deleteMany
   */
  export type WorkOrderAssetsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderAssets to delete
     */
    where?: WorkOrderAssetsWhereInput
    /**
     * Limit how many WorkOrderAssets to delete.
     */
    limit?: number
  }

  /**
   * WorkOrderAssets without action
   */
  export type WorkOrderAssetsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderAssets
     */
    select?: WorkOrderAssetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderAssets
     */
    omit?: WorkOrderAssetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderAssetsInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrderParts
   */

  export type AggregateWorkOrderParts = {
    _count: WorkOrderPartsCountAggregateOutputType | null
    _avg: WorkOrderPartsAvgAggregateOutputType | null
    _sum: WorkOrderPartsSumAggregateOutputType | null
    _min: WorkOrderPartsMinAggregateOutputType | null
    _max: WorkOrderPartsMaxAggregateOutputType | null
  }

  export type WorkOrderPartsAvgAggregateOutputType = {
    quantityUsed: number | null
  }

  export type WorkOrderPartsSumAggregateOutputType = {
    quantityUsed: number | null
  }

  export type WorkOrderPartsMinAggregateOutputType = {
    workOrderId: string | null
    partId: string | null
    quantityUsed: number | null
  }

  export type WorkOrderPartsMaxAggregateOutputType = {
    workOrderId: string | null
    partId: string | null
    quantityUsed: number | null
  }

  export type WorkOrderPartsCountAggregateOutputType = {
    workOrderId: number
    partId: number
    quantityUsed: number
    _all: number
  }


  export type WorkOrderPartsAvgAggregateInputType = {
    quantityUsed?: true
  }

  export type WorkOrderPartsSumAggregateInputType = {
    quantityUsed?: true
  }

  export type WorkOrderPartsMinAggregateInputType = {
    workOrderId?: true
    partId?: true
    quantityUsed?: true
  }

  export type WorkOrderPartsMaxAggregateInputType = {
    workOrderId?: true
    partId?: true
    quantityUsed?: true
  }

  export type WorkOrderPartsCountAggregateInputType = {
    workOrderId?: true
    partId?: true
    quantityUsed?: true
    _all?: true
  }

  export type WorkOrderPartsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderParts to aggregate.
     */
    where?: WorkOrderPartsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderParts to fetch.
     */
    orderBy?: WorkOrderPartsOrderByWithRelationInput | WorkOrderPartsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderPartsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrderParts
    **/
    _count?: true | WorkOrderPartsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkOrderPartsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkOrderPartsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderPartsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderPartsMaxAggregateInputType
  }

  export type GetWorkOrderPartsAggregateType<T extends WorkOrderPartsAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrderParts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrderParts[P]>
      : GetScalarType<T[P], AggregateWorkOrderParts[P]>
  }




  export type WorkOrderPartsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderPartsWhereInput
    orderBy?: WorkOrderPartsOrderByWithAggregationInput | WorkOrderPartsOrderByWithAggregationInput[]
    by: WorkOrderPartsScalarFieldEnum[] | WorkOrderPartsScalarFieldEnum
    having?: WorkOrderPartsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderPartsCountAggregateInputType | true
    _avg?: WorkOrderPartsAvgAggregateInputType
    _sum?: WorkOrderPartsSumAggregateInputType
    _min?: WorkOrderPartsMinAggregateInputType
    _max?: WorkOrderPartsMaxAggregateInputType
  }

  export type WorkOrderPartsGroupByOutputType = {
    workOrderId: string
    partId: string
    quantityUsed: number
    _count: WorkOrderPartsCountAggregateOutputType | null
    _avg: WorkOrderPartsAvgAggregateOutputType | null
    _sum: WorkOrderPartsSumAggregateOutputType | null
    _min: WorkOrderPartsMinAggregateOutputType | null
    _max: WorkOrderPartsMaxAggregateOutputType | null
  }

  type GetWorkOrderPartsGroupByPayload<T extends WorkOrderPartsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderPartsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderPartsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderPartsGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderPartsGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderPartsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    partId?: boolean
    quantityUsed?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    part?: boolean | PartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderParts"]>

  export type WorkOrderPartsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    partId?: boolean
    quantityUsed?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    part?: boolean | PartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderParts"]>

  export type WorkOrderPartsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workOrderId?: boolean
    partId?: boolean
    quantityUsed?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    part?: boolean | PartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderParts"]>

  export type WorkOrderPartsSelectScalar = {
    workOrderId?: boolean
    partId?: boolean
    quantityUsed?: boolean
  }

  export type WorkOrderPartsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"workOrderId" | "partId" | "quantityUsed", ExtArgs["result"]["workOrderParts"]>
  export type WorkOrderPartsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    part?: boolean | PartDefaultArgs<ExtArgs>
  }
  export type WorkOrderPartsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    part?: boolean | PartDefaultArgs<ExtArgs>
  }
  export type WorkOrderPartsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    part?: boolean | PartDefaultArgs<ExtArgs>
  }

  export type $WorkOrderPartsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrderParts"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
      part: Prisma.$PartPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      workOrderId: string
      partId: string
      quantityUsed: number
    }, ExtArgs["result"]["workOrderParts"]>
    composites: {}
  }

  type WorkOrderPartsGetPayload<S extends boolean | null | undefined | WorkOrderPartsDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderPartsPayload, S>

  type WorkOrderPartsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkOrderPartsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkOrderPartsCountAggregateInputType | true
    }

  export interface WorkOrderPartsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrderParts'], meta: { name: 'WorkOrderParts' } }
    /**
     * Find zero or one WorkOrderParts that matches the filter.
     * @param {WorkOrderPartsFindUniqueArgs} args - Arguments to find a WorkOrderParts
     * @example
     * // Get one WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderPartsFindUniqueArgs>(args: SelectSubset<T, WorkOrderPartsFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderPartsClient<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkOrderParts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkOrderPartsFindUniqueOrThrowArgs} args - Arguments to find a WorkOrderParts
     * @example
     * // Get one WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderPartsFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderPartsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderPartsClient<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPartsFindFirstArgs} args - Arguments to find a WorkOrderParts
     * @example
     * // Get one WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderPartsFindFirstArgs>(args?: SelectSubset<T, WorkOrderPartsFindFirstArgs<ExtArgs>>): Prisma__WorkOrderPartsClient<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderParts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPartsFindFirstOrThrowArgs} args - Arguments to find a WorkOrderParts
     * @example
     * // Get one WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderPartsFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderPartsFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderPartsClient<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkOrderParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPartsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.findMany()
     * 
     * // Get first 10 WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.findMany({ take: 10 })
     * 
     * // Only select the `workOrderId`
     * const workOrderPartsWithWorkOrderIdOnly = await prisma.workOrderParts.findMany({ select: { workOrderId: true } })
     * 
     */
    findMany<T extends WorkOrderPartsFindManyArgs>(args?: SelectSubset<T, WorkOrderPartsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkOrderParts.
     * @param {WorkOrderPartsCreateArgs} args - Arguments to create a WorkOrderParts.
     * @example
     * // Create one WorkOrderParts
     * const WorkOrderParts = await prisma.workOrderParts.create({
     *   data: {
     *     // ... data to create a WorkOrderParts
     *   }
     * })
     * 
     */
    create<T extends WorkOrderPartsCreateArgs>(args: SelectSubset<T, WorkOrderPartsCreateArgs<ExtArgs>>): Prisma__WorkOrderPartsClient<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkOrderParts.
     * @param {WorkOrderPartsCreateManyArgs} args - Arguments to create many WorkOrderParts.
     * @example
     * // Create many WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderPartsCreateManyArgs>(args?: SelectSubset<T, WorkOrderPartsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrderParts and returns the data saved in the database.
     * @param {WorkOrderPartsCreateManyAndReturnArgs} args - Arguments to create many WorkOrderParts.
     * @example
     * // Create many WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrderParts and only return the `workOrderId`
     * const workOrderPartsWithWorkOrderIdOnly = await prisma.workOrderParts.createManyAndReturn({
     *   select: { workOrderId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderPartsCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderPartsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkOrderParts.
     * @param {WorkOrderPartsDeleteArgs} args - Arguments to delete one WorkOrderParts.
     * @example
     * // Delete one WorkOrderParts
     * const WorkOrderParts = await prisma.workOrderParts.delete({
     *   where: {
     *     // ... filter to delete one WorkOrderParts
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderPartsDeleteArgs>(args: SelectSubset<T, WorkOrderPartsDeleteArgs<ExtArgs>>): Prisma__WorkOrderPartsClient<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkOrderParts.
     * @param {WorkOrderPartsUpdateArgs} args - Arguments to update one WorkOrderParts.
     * @example
     * // Update one WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderPartsUpdateArgs>(args: SelectSubset<T, WorkOrderPartsUpdateArgs<ExtArgs>>): Prisma__WorkOrderPartsClient<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkOrderParts.
     * @param {WorkOrderPartsDeleteManyArgs} args - Arguments to filter WorkOrderParts to delete.
     * @example
     * // Delete a few WorkOrderParts
     * const { count } = await prisma.workOrderParts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderPartsDeleteManyArgs>(args?: SelectSubset<T, WorkOrderPartsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPartsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderPartsUpdateManyArgs>(args: SelectSubset<T, WorkOrderPartsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderParts and returns the data updated in the database.
     * @param {WorkOrderPartsUpdateManyAndReturnArgs} args - Arguments to update many WorkOrderParts.
     * @example
     * // Update many WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkOrderParts and only return the `workOrderId`
     * const workOrderPartsWithWorkOrderIdOnly = await prisma.workOrderParts.updateManyAndReturn({
     *   select: { workOrderId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkOrderPartsUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkOrderPartsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkOrderParts.
     * @param {WorkOrderPartsUpsertArgs} args - Arguments to update or create a WorkOrderParts.
     * @example
     * // Update or create a WorkOrderParts
     * const workOrderParts = await prisma.workOrderParts.upsert({
     *   create: {
     *     // ... data to create a WorkOrderParts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrderParts we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderPartsUpsertArgs>(args: SelectSubset<T, WorkOrderPartsUpsertArgs<ExtArgs>>): Prisma__WorkOrderPartsClient<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkOrderParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPartsCountArgs} args - Arguments to filter WorkOrderParts to count.
     * @example
     * // Count the number of WorkOrderParts
     * const count = await prisma.workOrderParts.count({
     *   where: {
     *     // ... the filter for the WorkOrderParts we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderPartsCountArgs>(
      args?: Subset<T, WorkOrderPartsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderPartsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrderParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPartsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderPartsAggregateArgs>(args: Subset<T, WorkOrderPartsAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderPartsAggregateType<T>>

    /**
     * Group by WorkOrderParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPartsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderPartsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderPartsGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderPartsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderPartsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderPartsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrderParts model
   */
  readonly fields: WorkOrderPartsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrderParts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderPartsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    part<T extends PartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartDefaultArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrderParts model
   */
  interface WorkOrderPartsFieldRefs {
    readonly workOrderId: FieldRef<"WorkOrderParts", 'String'>
    readonly partId: FieldRef<"WorkOrderParts", 'String'>
    readonly quantityUsed: FieldRef<"WorkOrderParts", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrderParts findUnique
   */
  export type WorkOrderPartsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderParts to fetch.
     */
    where: WorkOrderPartsWhereUniqueInput
  }

  /**
   * WorkOrderParts findUniqueOrThrow
   */
  export type WorkOrderPartsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderParts to fetch.
     */
    where: WorkOrderPartsWhereUniqueInput
  }

  /**
   * WorkOrderParts findFirst
   */
  export type WorkOrderPartsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderParts to fetch.
     */
    where?: WorkOrderPartsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderParts to fetch.
     */
    orderBy?: WorkOrderPartsOrderByWithRelationInput | WorkOrderPartsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderParts.
     */
    cursor?: WorkOrderPartsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderParts.
     */
    distinct?: WorkOrderPartsScalarFieldEnum | WorkOrderPartsScalarFieldEnum[]
  }

  /**
   * WorkOrderParts findFirstOrThrow
   */
  export type WorkOrderPartsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderParts to fetch.
     */
    where?: WorkOrderPartsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderParts to fetch.
     */
    orderBy?: WorkOrderPartsOrderByWithRelationInput | WorkOrderPartsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderParts.
     */
    cursor?: WorkOrderPartsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderParts.
     */
    distinct?: WorkOrderPartsScalarFieldEnum | WorkOrderPartsScalarFieldEnum[]
  }

  /**
   * WorkOrderParts findMany
   */
  export type WorkOrderPartsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderParts to fetch.
     */
    where?: WorkOrderPartsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderParts to fetch.
     */
    orderBy?: WorkOrderPartsOrderByWithRelationInput | WorkOrderPartsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrderParts.
     */
    cursor?: WorkOrderPartsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderParts.
     */
    skip?: number
    distinct?: WorkOrderPartsScalarFieldEnum | WorkOrderPartsScalarFieldEnum[]
  }

  /**
   * WorkOrderParts create
   */
  export type WorkOrderPartsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrderParts.
     */
    data: XOR<WorkOrderPartsCreateInput, WorkOrderPartsUncheckedCreateInput>
  }

  /**
   * WorkOrderParts createMany
   */
  export type WorkOrderPartsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrderParts.
     */
    data: WorkOrderPartsCreateManyInput | WorkOrderPartsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrderParts createManyAndReturn
   */
  export type WorkOrderPartsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * The data used to create many WorkOrderParts.
     */
    data: WorkOrderPartsCreateManyInput | WorkOrderPartsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderParts update
   */
  export type WorkOrderPartsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrderParts.
     */
    data: XOR<WorkOrderPartsUpdateInput, WorkOrderPartsUncheckedUpdateInput>
    /**
     * Choose, which WorkOrderParts to update.
     */
    where: WorkOrderPartsWhereUniqueInput
  }

  /**
   * WorkOrderParts updateMany
   */
  export type WorkOrderPartsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrderParts.
     */
    data: XOR<WorkOrderPartsUpdateManyMutationInput, WorkOrderPartsUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderParts to update
     */
    where?: WorkOrderPartsWhereInput
    /**
     * Limit how many WorkOrderParts to update.
     */
    limit?: number
  }

  /**
   * WorkOrderParts updateManyAndReturn
   */
  export type WorkOrderPartsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * The data used to update WorkOrderParts.
     */
    data: XOR<WorkOrderPartsUpdateManyMutationInput, WorkOrderPartsUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderParts to update
     */
    where?: WorkOrderPartsWhereInput
    /**
     * Limit how many WorkOrderParts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderParts upsert
   */
  export type WorkOrderPartsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrderParts to update in case it exists.
     */
    where: WorkOrderPartsWhereUniqueInput
    /**
     * In case the WorkOrderParts found by the `where` argument doesn't exist, create a new WorkOrderParts with this data.
     */
    create: XOR<WorkOrderPartsCreateInput, WorkOrderPartsUncheckedCreateInput>
    /**
     * In case the WorkOrderParts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderPartsUpdateInput, WorkOrderPartsUncheckedUpdateInput>
  }

  /**
   * WorkOrderParts delete
   */
  export type WorkOrderPartsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    /**
     * Filter which WorkOrderParts to delete.
     */
    where: WorkOrderPartsWhereUniqueInput
  }

  /**
   * WorkOrderParts deleteMany
   */
  export type WorkOrderPartsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderParts to delete
     */
    where?: WorkOrderPartsWhereInput
    /**
     * Limit how many WorkOrderParts to delete.
     */
    limit?: number
  }

  /**
   * WorkOrderParts without action
   */
  export type WorkOrderPartsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
  }


  /**
   * Model Part
   */

  export type AggregatePart = {
    _count: PartCountAggregateOutputType | null
    _avg: PartAvgAggregateOutputType | null
    _sum: PartSumAggregateOutputType | null
    _min: PartMinAggregateOutputType | null
    _max: PartMaxAggregateOutputType | null
  }

  export type PartAvgAggregateOutputType = {
    quantity: number | null
    minStock: number | null
    unitCost: Decimal | null
  }

  export type PartSumAggregateOutputType = {
    quantity: number | null
    minStock: number | null
    unitCost: Decimal | null
  }

  export type PartMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    partNumber: string | null
    description: string | null
    quantity: number | null
    minStock: number | null
    unitCost: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type PartMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    partNumber: string | null
    description: string | null
    quantity: number | null
    minStock: number | null
    unitCost: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type PartCountAggregateOutputType = {
    id: number
    tenantId: number
    name: number
    partNumber: number
    description: number
    quantity: number
    minStock: number
    unitCost: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type PartAvgAggregateInputType = {
    quantity?: true
    minStock?: true
    unitCost?: true
  }

  export type PartSumAggregateInputType = {
    quantity?: true
    minStock?: true
    unitCost?: true
  }

  export type PartMinAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    partNumber?: true
    description?: true
    quantity?: true
    minStock?: true
    unitCost?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PartMaxAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    partNumber?: true
    description?: true
    quantity?: true
    minStock?: true
    unitCost?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PartCountAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    partNumber?: true
    description?: true
    quantity?: true
    minStock?: true
    unitCost?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type PartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Part to aggregate.
     */
    where?: PartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parts to fetch.
     */
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parts
    **/
    _count?: true | PartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartMaxAggregateInputType
  }

  export type GetPartAggregateType<T extends PartAggregateArgs> = {
        [P in keyof T & keyof AggregatePart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePart[P]>
      : GetScalarType<T[P], AggregatePart[P]>
  }




  export type PartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartWhereInput
    orderBy?: PartOrderByWithAggregationInput | PartOrderByWithAggregationInput[]
    by: PartScalarFieldEnum[] | PartScalarFieldEnum
    having?: PartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartCountAggregateInputType | true
    _avg?: PartAvgAggregateInputType
    _sum?: PartSumAggregateInputType
    _min?: PartMinAggregateInputType
    _max?: PartMaxAggregateInputType
  }

  export type PartGroupByOutputType = {
    id: string
    tenantId: string
    name: string
    partNumber: string | null
    description: string | null
    quantity: number
    minStock: number
    unitCost: Decimal | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: PartCountAggregateOutputType | null
    _avg: PartAvgAggregateOutputType | null
    _sum: PartSumAggregateOutputType | null
    _min: PartMinAggregateOutputType | null
    _max: PartMaxAggregateOutputType | null
  }

  type GetPartGroupByPayload<T extends PartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartGroupByOutputType[P]>
            : GetScalarType<T[P], PartGroupByOutputType[P]>
        }
      >
    >


  export type PartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    partNumber?: boolean
    description?: boolean
    quantity?: boolean
    minStock?: boolean
    unitCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    vendors?: boolean | Part$vendorsArgs<ExtArgs>
    workOrders?: boolean | Part$workOrdersArgs<ExtArgs>
    _count?: boolean | PartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["part"]>

  export type PartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    partNumber?: boolean
    description?: boolean
    quantity?: boolean
    minStock?: boolean
    unitCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["part"]>

  export type PartSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    partNumber?: boolean
    description?: boolean
    quantity?: boolean
    minStock?: boolean
    unitCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["part"]>

  export type PartSelectScalar = {
    id?: boolean
    tenantId?: boolean
    name?: boolean
    partNumber?: boolean
    description?: boolean
    quantity?: boolean
    minStock?: boolean
    unitCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type PartOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "name" | "partNumber" | "description" | "quantity" | "minStock" | "unitCost" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["part"]>
  export type PartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    vendors?: boolean | Part$vendorsArgs<ExtArgs>
    workOrders?: boolean | Part$workOrdersArgs<ExtArgs>
    _count?: boolean | PartCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PartIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Part"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      vendors: Prisma.$PartVendorPayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderPartsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      name: string
      partNumber: string | null
      description: string | null
      quantity: number
      minStock: number
      unitCost: Prisma.Decimal | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["part"]>
    composites: {}
  }

  type PartGetPayload<S extends boolean | null | undefined | PartDefaultArgs> = $Result.GetResult<Prisma.$PartPayload, S>

  type PartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartCountAggregateInputType | true
    }

  export interface PartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Part'], meta: { name: 'Part' } }
    /**
     * Find zero or one Part that matches the filter.
     * @param {PartFindUniqueArgs} args - Arguments to find a Part
     * @example
     * // Get one Part
     * const part = await prisma.part.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartFindUniqueArgs>(args: SelectSubset<T, PartFindUniqueArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Part that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartFindUniqueOrThrowArgs} args - Arguments to find a Part
     * @example
     * // Get one Part
     * const part = await prisma.part.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartFindUniqueOrThrowArgs>(args: SelectSubset<T, PartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Part that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartFindFirstArgs} args - Arguments to find a Part
     * @example
     * // Get one Part
     * const part = await prisma.part.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartFindFirstArgs>(args?: SelectSubset<T, PartFindFirstArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Part that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartFindFirstOrThrowArgs} args - Arguments to find a Part
     * @example
     * // Get one Part
     * const part = await prisma.part.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartFindFirstOrThrowArgs>(args?: SelectSubset<T, PartFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Parts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parts
     * const parts = await prisma.part.findMany()
     * 
     * // Get first 10 Parts
     * const parts = await prisma.part.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partWithIdOnly = await prisma.part.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartFindManyArgs>(args?: SelectSubset<T, PartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Part.
     * @param {PartCreateArgs} args - Arguments to create a Part.
     * @example
     * // Create one Part
     * const Part = await prisma.part.create({
     *   data: {
     *     // ... data to create a Part
     *   }
     * })
     * 
     */
    create<T extends PartCreateArgs>(args: SelectSubset<T, PartCreateArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Parts.
     * @param {PartCreateManyArgs} args - Arguments to create many Parts.
     * @example
     * // Create many Parts
     * const part = await prisma.part.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartCreateManyArgs>(args?: SelectSubset<T, PartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parts and returns the data saved in the database.
     * @param {PartCreateManyAndReturnArgs} args - Arguments to create many Parts.
     * @example
     * // Create many Parts
     * const part = await prisma.part.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parts and only return the `id`
     * const partWithIdOnly = await prisma.part.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartCreateManyAndReturnArgs>(args?: SelectSubset<T, PartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Part.
     * @param {PartDeleteArgs} args - Arguments to delete one Part.
     * @example
     * // Delete one Part
     * const Part = await prisma.part.delete({
     *   where: {
     *     // ... filter to delete one Part
     *   }
     * })
     * 
     */
    delete<T extends PartDeleteArgs>(args: SelectSubset<T, PartDeleteArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Part.
     * @param {PartUpdateArgs} args - Arguments to update one Part.
     * @example
     * // Update one Part
     * const part = await prisma.part.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartUpdateArgs>(args: SelectSubset<T, PartUpdateArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Parts.
     * @param {PartDeleteManyArgs} args - Arguments to filter Parts to delete.
     * @example
     * // Delete a few Parts
     * const { count } = await prisma.part.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartDeleteManyArgs>(args?: SelectSubset<T, PartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parts
     * const part = await prisma.part.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartUpdateManyArgs>(args: SelectSubset<T, PartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parts and returns the data updated in the database.
     * @param {PartUpdateManyAndReturnArgs} args - Arguments to update many Parts.
     * @example
     * // Update many Parts
     * const part = await prisma.part.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Parts and only return the `id`
     * const partWithIdOnly = await prisma.part.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartUpdateManyAndReturnArgs>(args: SelectSubset<T, PartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Part.
     * @param {PartUpsertArgs} args - Arguments to update or create a Part.
     * @example
     * // Update or create a Part
     * const part = await prisma.part.upsert({
     *   create: {
     *     // ... data to create a Part
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Part we want to update
     *   }
     * })
     */
    upsert<T extends PartUpsertArgs>(args: SelectSubset<T, PartUpsertArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Parts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartCountArgs} args - Arguments to filter Parts to count.
     * @example
     * // Count the number of Parts
     * const count = await prisma.part.count({
     *   where: {
     *     // ... the filter for the Parts we want to count
     *   }
     * })
    **/
    count<T extends PartCountArgs>(
      args?: Subset<T, PartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Part.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartAggregateArgs>(args: Subset<T, PartAggregateArgs>): Prisma.PrismaPromise<GetPartAggregateType<T>>

    /**
     * Group by Part.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartGroupByArgs['orderBy'] }
        : { orderBy?: PartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Part model
   */
  readonly fields: PartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Part.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    vendors<T extends Part$vendorsArgs<ExtArgs> = {}>(args?: Subset<T, Part$vendorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workOrders<T extends Part$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Part$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPartsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Part model
   */
  interface PartFieldRefs {
    readonly id: FieldRef<"Part", 'String'>
    readonly tenantId: FieldRef<"Part", 'String'>
    readonly name: FieldRef<"Part", 'String'>
    readonly partNumber: FieldRef<"Part", 'String'>
    readonly description: FieldRef<"Part", 'String'>
    readonly quantity: FieldRef<"Part", 'Int'>
    readonly minStock: FieldRef<"Part", 'Int'>
    readonly unitCost: FieldRef<"Part", 'Decimal'>
    readonly createdAt: FieldRef<"Part", 'DateTime'>
    readonly updatedAt: FieldRef<"Part", 'DateTime'>
    readonly deletedAt: FieldRef<"Part", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Part findUnique
   */
  export type PartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Part to fetch.
     */
    where: PartWhereUniqueInput
  }

  /**
   * Part findUniqueOrThrow
   */
  export type PartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Part to fetch.
     */
    where: PartWhereUniqueInput
  }

  /**
   * Part findFirst
   */
  export type PartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Part to fetch.
     */
    where?: PartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parts to fetch.
     */
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parts.
     */
    cursor?: PartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parts.
     */
    distinct?: PartScalarFieldEnum | PartScalarFieldEnum[]
  }

  /**
   * Part findFirstOrThrow
   */
  export type PartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Part to fetch.
     */
    where?: PartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parts to fetch.
     */
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parts.
     */
    cursor?: PartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parts.
     */
    distinct?: PartScalarFieldEnum | PartScalarFieldEnum[]
  }

  /**
   * Part findMany
   */
  export type PartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Parts to fetch.
     */
    where?: PartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parts to fetch.
     */
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parts.
     */
    cursor?: PartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parts.
     */
    skip?: number
    distinct?: PartScalarFieldEnum | PartScalarFieldEnum[]
  }

  /**
   * Part create
   */
  export type PartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * The data needed to create a Part.
     */
    data: XOR<PartCreateInput, PartUncheckedCreateInput>
  }

  /**
   * Part createMany
   */
  export type PartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parts.
     */
    data: PartCreateManyInput | PartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Part createManyAndReturn
   */
  export type PartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * The data used to create many Parts.
     */
    data: PartCreateManyInput | PartCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Part update
   */
  export type PartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * The data needed to update a Part.
     */
    data: XOR<PartUpdateInput, PartUncheckedUpdateInput>
    /**
     * Choose, which Part to update.
     */
    where: PartWhereUniqueInput
  }

  /**
   * Part updateMany
   */
  export type PartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parts.
     */
    data: XOR<PartUpdateManyMutationInput, PartUncheckedUpdateManyInput>
    /**
     * Filter which Parts to update
     */
    where?: PartWhereInput
    /**
     * Limit how many Parts to update.
     */
    limit?: number
  }

  /**
   * Part updateManyAndReturn
   */
  export type PartUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * The data used to update Parts.
     */
    data: XOR<PartUpdateManyMutationInput, PartUncheckedUpdateManyInput>
    /**
     * Filter which Parts to update
     */
    where?: PartWhereInput
    /**
     * Limit how many Parts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Part upsert
   */
  export type PartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * The filter to search for the Part to update in case it exists.
     */
    where: PartWhereUniqueInput
    /**
     * In case the Part found by the `where` argument doesn't exist, create a new Part with this data.
     */
    create: XOR<PartCreateInput, PartUncheckedCreateInput>
    /**
     * In case the Part was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartUpdateInput, PartUncheckedUpdateInput>
  }

  /**
   * Part delete
   */
  export type PartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter which Part to delete.
     */
    where: PartWhereUniqueInput
  }

  /**
   * Part deleteMany
   */
  export type PartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parts to delete
     */
    where?: PartWhereInput
    /**
     * Limit how many Parts to delete.
     */
    limit?: number
  }

  /**
   * Part.vendors
   */
  export type Part$vendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    where?: PartVendorWhereInput
    orderBy?: PartVendorOrderByWithRelationInput | PartVendorOrderByWithRelationInput[]
    cursor?: PartVendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartVendorScalarFieldEnum | PartVendorScalarFieldEnum[]
  }

  /**
   * Part.workOrders
   */
  export type Part$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderParts
     */
    select?: WorkOrderPartsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderParts
     */
    omit?: WorkOrderPartsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPartsInclude<ExtArgs> | null
    where?: WorkOrderPartsWhereInput
    orderBy?: WorkOrderPartsOrderByWithRelationInput | WorkOrderPartsOrderByWithRelationInput[]
    cursor?: WorkOrderPartsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderPartsScalarFieldEnum | WorkOrderPartsScalarFieldEnum[]
  }

  /**
   * Part without action
   */
  export type PartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Part
     */
    omit?: PartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
  }


  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    tenantId: number
    name: number
    contactInfo: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type VendorMinAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    contactInfo?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: string
    tenantId: string
    name: string
    contactInfo: JsonValue | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    contactInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    parts?: boolean | Vendor$partsArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    contactInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    contactInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectScalar = {
    id?: boolean
    tenantId?: boolean
    name?: boolean
    contactInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type VendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "name" | "contactInfo" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["vendor"]>
  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    parts?: boolean | Vendor$partsArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type VendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      parts: Prisma.$PartVendorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      name: string
      contactInfo: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendors and returns the data saved in the database.
     * @param {VendorCreateManyAndReturnArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendorCreateManyAndReturnArgs>(args?: SelectSubset<T, VendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors and returns the data updated in the database.
     * @param {VendorUpdateManyAndReturnArgs} args - Arguments to update many Vendors.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VendorUpdateManyAndReturnArgs>(args: SelectSubset<T, VendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parts<T extends Vendor$partsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$partsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'String'>
    readonly tenantId: FieldRef<"Vendor", 'String'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly contactInfo: FieldRef<"Vendor", 'Json'>
    readonly createdAt: FieldRef<"Vendor", 'DateTime'>
    readonly updatedAt: FieldRef<"Vendor", 'DateTime'>
    readonly deletedAt: FieldRef<"Vendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor createManyAndReturn
   */
  export type VendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
  }

  /**
   * Vendor updateManyAndReturn
   */
  export type VendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to delete.
     */
    limit?: number
  }

  /**
   * Vendor.parts
   */
  export type Vendor$partsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    where?: PartVendorWhereInput
    orderBy?: PartVendorOrderByWithRelationInput | PartVendorOrderByWithRelationInput[]
    cursor?: PartVendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartVendorScalarFieldEnum | PartVendorScalarFieldEnum[]
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model PartVendor
   */

  export type AggregatePartVendor = {
    _count: PartVendorCountAggregateOutputType | null
    _avg: PartVendorAvgAggregateOutputType | null
    _sum: PartVendorSumAggregateOutputType | null
    _min: PartVendorMinAggregateOutputType | null
    _max: PartVendorMaxAggregateOutputType | null
  }

  export type PartVendorAvgAggregateOutputType = {
    cost: Decimal | null
    leadTime: number | null
  }

  export type PartVendorSumAggregateOutputType = {
    cost: Decimal | null
    leadTime: number | null
  }

  export type PartVendorMinAggregateOutputType = {
    partId: string | null
    vendorId: string | null
    cost: Decimal | null
    leadTime: number | null
  }

  export type PartVendorMaxAggregateOutputType = {
    partId: string | null
    vendorId: string | null
    cost: Decimal | null
    leadTime: number | null
  }

  export type PartVendorCountAggregateOutputType = {
    partId: number
    vendorId: number
    cost: number
    leadTime: number
    _all: number
  }


  export type PartVendorAvgAggregateInputType = {
    cost?: true
    leadTime?: true
  }

  export type PartVendorSumAggregateInputType = {
    cost?: true
    leadTime?: true
  }

  export type PartVendorMinAggregateInputType = {
    partId?: true
    vendorId?: true
    cost?: true
    leadTime?: true
  }

  export type PartVendorMaxAggregateInputType = {
    partId?: true
    vendorId?: true
    cost?: true
    leadTime?: true
  }

  export type PartVendorCountAggregateInputType = {
    partId?: true
    vendorId?: true
    cost?: true
    leadTime?: true
    _all?: true
  }

  export type PartVendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartVendor to aggregate.
     */
    where?: PartVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartVendors to fetch.
     */
    orderBy?: PartVendorOrderByWithRelationInput | PartVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PartVendors
    **/
    _count?: true | PartVendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartVendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartVendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartVendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartVendorMaxAggregateInputType
  }

  export type GetPartVendorAggregateType<T extends PartVendorAggregateArgs> = {
        [P in keyof T & keyof AggregatePartVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartVendor[P]>
      : GetScalarType<T[P], AggregatePartVendor[P]>
  }




  export type PartVendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartVendorWhereInput
    orderBy?: PartVendorOrderByWithAggregationInput | PartVendorOrderByWithAggregationInput[]
    by: PartVendorScalarFieldEnum[] | PartVendorScalarFieldEnum
    having?: PartVendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartVendorCountAggregateInputType | true
    _avg?: PartVendorAvgAggregateInputType
    _sum?: PartVendorSumAggregateInputType
    _min?: PartVendorMinAggregateInputType
    _max?: PartVendorMaxAggregateInputType
  }

  export type PartVendorGroupByOutputType = {
    partId: string
    vendorId: string
    cost: Decimal
    leadTime: number | null
    _count: PartVendorCountAggregateOutputType | null
    _avg: PartVendorAvgAggregateOutputType | null
    _sum: PartVendorSumAggregateOutputType | null
    _min: PartVendorMinAggregateOutputType | null
    _max: PartVendorMaxAggregateOutputType | null
  }

  type GetPartVendorGroupByPayload<T extends PartVendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartVendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartVendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartVendorGroupByOutputType[P]>
            : GetScalarType<T[P], PartVendorGroupByOutputType[P]>
        }
      >
    >


  export type PartVendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    partId?: boolean
    vendorId?: boolean
    cost?: boolean
    leadTime?: boolean
    part?: boolean | PartDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partVendor"]>

  export type PartVendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    partId?: boolean
    vendorId?: boolean
    cost?: boolean
    leadTime?: boolean
    part?: boolean | PartDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partVendor"]>

  export type PartVendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    partId?: boolean
    vendorId?: boolean
    cost?: boolean
    leadTime?: boolean
    part?: boolean | PartDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partVendor"]>

  export type PartVendorSelectScalar = {
    partId?: boolean
    vendorId?: boolean
    cost?: boolean
    leadTime?: boolean
  }

  export type PartVendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"partId" | "vendorId" | "cost" | "leadTime", ExtArgs["result"]["partVendor"]>
  export type PartVendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | PartDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type PartVendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | PartDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type PartVendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | PartDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }

  export type $PartVendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PartVendor"
    objects: {
      part: Prisma.$PartPayload<ExtArgs>
      vendor: Prisma.$VendorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      partId: string
      vendorId: string
      cost: Prisma.Decimal
      leadTime: number | null
    }, ExtArgs["result"]["partVendor"]>
    composites: {}
  }

  type PartVendorGetPayload<S extends boolean | null | undefined | PartVendorDefaultArgs> = $Result.GetResult<Prisma.$PartVendorPayload, S>

  type PartVendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartVendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartVendorCountAggregateInputType | true
    }

  export interface PartVendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PartVendor'], meta: { name: 'PartVendor' } }
    /**
     * Find zero or one PartVendor that matches the filter.
     * @param {PartVendorFindUniqueArgs} args - Arguments to find a PartVendor
     * @example
     * // Get one PartVendor
     * const partVendor = await prisma.partVendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartVendorFindUniqueArgs>(args: SelectSubset<T, PartVendorFindUniqueArgs<ExtArgs>>): Prisma__PartVendorClient<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PartVendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartVendorFindUniqueOrThrowArgs} args - Arguments to find a PartVendor
     * @example
     * // Get one PartVendor
     * const partVendor = await prisma.partVendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartVendorFindUniqueOrThrowArgs>(args: SelectSubset<T, PartVendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartVendorClient<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PartVendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartVendorFindFirstArgs} args - Arguments to find a PartVendor
     * @example
     * // Get one PartVendor
     * const partVendor = await prisma.partVendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartVendorFindFirstArgs>(args?: SelectSubset<T, PartVendorFindFirstArgs<ExtArgs>>): Prisma__PartVendorClient<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PartVendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartVendorFindFirstOrThrowArgs} args - Arguments to find a PartVendor
     * @example
     * // Get one PartVendor
     * const partVendor = await prisma.partVendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartVendorFindFirstOrThrowArgs>(args?: SelectSubset<T, PartVendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartVendorClient<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PartVendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartVendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PartVendors
     * const partVendors = await prisma.partVendor.findMany()
     * 
     * // Get first 10 PartVendors
     * const partVendors = await prisma.partVendor.findMany({ take: 10 })
     * 
     * // Only select the `partId`
     * const partVendorWithPartIdOnly = await prisma.partVendor.findMany({ select: { partId: true } })
     * 
     */
    findMany<T extends PartVendorFindManyArgs>(args?: SelectSubset<T, PartVendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PartVendor.
     * @param {PartVendorCreateArgs} args - Arguments to create a PartVendor.
     * @example
     * // Create one PartVendor
     * const PartVendor = await prisma.partVendor.create({
     *   data: {
     *     // ... data to create a PartVendor
     *   }
     * })
     * 
     */
    create<T extends PartVendorCreateArgs>(args: SelectSubset<T, PartVendorCreateArgs<ExtArgs>>): Prisma__PartVendorClient<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PartVendors.
     * @param {PartVendorCreateManyArgs} args - Arguments to create many PartVendors.
     * @example
     * // Create many PartVendors
     * const partVendor = await prisma.partVendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartVendorCreateManyArgs>(args?: SelectSubset<T, PartVendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PartVendors and returns the data saved in the database.
     * @param {PartVendorCreateManyAndReturnArgs} args - Arguments to create many PartVendors.
     * @example
     * // Create many PartVendors
     * const partVendor = await prisma.partVendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PartVendors and only return the `partId`
     * const partVendorWithPartIdOnly = await prisma.partVendor.createManyAndReturn({
     *   select: { partId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartVendorCreateManyAndReturnArgs>(args?: SelectSubset<T, PartVendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PartVendor.
     * @param {PartVendorDeleteArgs} args - Arguments to delete one PartVendor.
     * @example
     * // Delete one PartVendor
     * const PartVendor = await prisma.partVendor.delete({
     *   where: {
     *     // ... filter to delete one PartVendor
     *   }
     * })
     * 
     */
    delete<T extends PartVendorDeleteArgs>(args: SelectSubset<T, PartVendorDeleteArgs<ExtArgs>>): Prisma__PartVendorClient<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PartVendor.
     * @param {PartVendorUpdateArgs} args - Arguments to update one PartVendor.
     * @example
     * // Update one PartVendor
     * const partVendor = await prisma.partVendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartVendorUpdateArgs>(args: SelectSubset<T, PartVendorUpdateArgs<ExtArgs>>): Prisma__PartVendorClient<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PartVendors.
     * @param {PartVendorDeleteManyArgs} args - Arguments to filter PartVendors to delete.
     * @example
     * // Delete a few PartVendors
     * const { count } = await prisma.partVendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartVendorDeleteManyArgs>(args?: SelectSubset<T, PartVendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartVendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartVendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PartVendors
     * const partVendor = await prisma.partVendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartVendorUpdateManyArgs>(args: SelectSubset<T, PartVendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartVendors and returns the data updated in the database.
     * @param {PartVendorUpdateManyAndReturnArgs} args - Arguments to update many PartVendors.
     * @example
     * // Update many PartVendors
     * const partVendor = await prisma.partVendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PartVendors and only return the `partId`
     * const partVendorWithPartIdOnly = await prisma.partVendor.updateManyAndReturn({
     *   select: { partId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartVendorUpdateManyAndReturnArgs>(args: SelectSubset<T, PartVendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PartVendor.
     * @param {PartVendorUpsertArgs} args - Arguments to update or create a PartVendor.
     * @example
     * // Update or create a PartVendor
     * const partVendor = await prisma.partVendor.upsert({
     *   create: {
     *     // ... data to create a PartVendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PartVendor we want to update
     *   }
     * })
     */
    upsert<T extends PartVendorUpsertArgs>(args: SelectSubset<T, PartVendorUpsertArgs<ExtArgs>>): Prisma__PartVendorClient<$Result.GetResult<Prisma.$PartVendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PartVendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartVendorCountArgs} args - Arguments to filter PartVendors to count.
     * @example
     * // Count the number of PartVendors
     * const count = await prisma.partVendor.count({
     *   where: {
     *     // ... the filter for the PartVendors we want to count
     *   }
     * })
    **/
    count<T extends PartVendorCountArgs>(
      args?: Subset<T, PartVendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartVendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PartVendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartVendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartVendorAggregateArgs>(args: Subset<T, PartVendorAggregateArgs>): Prisma.PrismaPromise<GetPartVendorAggregateType<T>>

    /**
     * Group by PartVendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartVendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartVendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartVendorGroupByArgs['orderBy'] }
        : { orderBy?: PartVendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartVendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PartVendor model
   */
  readonly fields: PartVendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PartVendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartVendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    part<T extends PartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartDefaultArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    vendor<T extends VendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendorDefaultArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PartVendor model
   */
  interface PartVendorFieldRefs {
    readonly partId: FieldRef<"PartVendor", 'String'>
    readonly vendorId: FieldRef<"PartVendor", 'String'>
    readonly cost: FieldRef<"PartVendor", 'Decimal'>
    readonly leadTime: FieldRef<"PartVendor", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PartVendor findUnique
   */
  export type PartVendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * Filter, which PartVendor to fetch.
     */
    where: PartVendorWhereUniqueInput
  }

  /**
   * PartVendor findUniqueOrThrow
   */
  export type PartVendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * Filter, which PartVendor to fetch.
     */
    where: PartVendorWhereUniqueInput
  }

  /**
   * PartVendor findFirst
   */
  export type PartVendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * Filter, which PartVendor to fetch.
     */
    where?: PartVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartVendors to fetch.
     */
    orderBy?: PartVendorOrderByWithRelationInput | PartVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartVendors.
     */
    cursor?: PartVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartVendors.
     */
    distinct?: PartVendorScalarFieldEnum | PartVendorScalarFieldEnum[]
  }

  /**
   * PartVendor findFirstOrThrow
   */
  export type PartVendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * Filter, which PartVendor to fetch.
     */
    where?: PartVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartVendors to fetch.
     */
    orderBy?: PartVendorOrderByWithRelationInput | PartVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartVendors.
     */
    cursor?: PartVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartVendors.
     */
    distinct?: PartVendorScalarFieldEnum | PartVendorScalarFieldEnum[]
  }

  /**
   * PartVendor findMany
   */
  export type PartVendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * Filter, which PartVendors to fetch.
     */
    where?: PartVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartVendors to fetch.
     */
    orderBy?: PartVendorOrderByWithRelationInput | PartVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PartVendors.
     */
    cursor?: PartVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartVendors.
     */
    skip?: number
    distinct?: PartVendorScalarFieldEnum | PartVendorScalarFieldEnum[]
  }

  /**
   * PartVendor create
   */
  export type PartVendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * The data needed to create a PartVendor.
     */
    data: XOR<PartVendorCreateInput, PartVendorUncheckedCreateInput>
  }

  /**
   * PartVendor createMany
   */
  export type PartVendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PartVendors.
     */
    data: PartVendorCreateManyInput | PartVendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PartVendor createManyAndReturn
   */
  export type PartVendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * The data used to create many PartVendors.
     */
    data: PartVendorCreateManyInput | PartVendorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartVendor update
   */
  export type PartVendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * The data needed to update a PartVendor.
     */
    data: XOR<PartVendorUpdateInput, PartVendorUncheckedUpdateInput>
    /**
     * Choose, which PartVendor to update.
     */
    where: PartVendorWhereUniqueInput
  }

  /**
   * PartVendor updateMany
   */
  export type PartVendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PartVendors.
     */
    data: XOR<PartVendorUpdateManyMutationInput, PartVendorUncheckedUpdateManyInput>
    /**
     * Filter which PartVendors to update
     */
    where?: PartVendorWhereInput
    /**
     * Limit how many PartVendors to update.
     */
    limit?: number
  }

  /**
   * PartVendor updateManyAndReturn
   */
  export type PartVendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * The data used to update PartVendors.
     */
    data: XOR<PartVendorUpdateManyMutationInput, PartVendorUncheckedUpdateManyInput>
    /**
     * Filter which PartVendors to update
     */
    where?: PartVendorWhereInput
    /**
     * Limit how many PartVendors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartVendor upsert
   */
  export type PartVendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * The filter to search for the PartVendor to update in case it exists.
     */
    where: PartVendorWhereUniqueInput
    /**
     * In case the PartVendor found by the `where` argument doesn't exist, create a new PartVendor with this data.
     */
    create: XOR<PartVendorCreateInput, PartVendorUncheckedCreateInput>
    /**
     * In case the PartVendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartVendorUpdateInput, PartVendorUncheckedUpdateInput>
  }

  /**
   * PartVendor delete
   */
  export type PartVendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
    /**
     * Filter which PartVendor to delete.
     */
    where: PartVendorWhereUniqueInput
  }

  /**
   * PartVendor deleteMany
   */
  export type PartVendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartVendors to delete
     */
    where?: PartVendorWhereInput
    /**
     * Limit how many PartVendors to delete.
     */
    limit?: number
  }

  /**
   * PartVendor without action
   */
  export type PartVendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartVendor
     */
    select?: PartVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartVendor
     */
    omit?: PartVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartVendorInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrderLabor
   */

  export type AggregateWorkOrderLabor = {
    _count: WorkOrderLaborCountAggregateOutputType | null
    _avg: WorkOrderLaborAvgAggregateOutputType | null
    _sum: WorkOrderLaborSumAggregateOutputType | null
    _min: WorkOrderLaborMinAggregateOutputType | null
    _max: WorkOrderLaborMaxAggregateOutputType | null
  }

  export type WorkOrderLaborAvgAggregateOutputType = {
    hours: Decimal | null
  }

  export type WorkOrderLaborSumAggregateOutputType = {
    hours: Decimal | null
  }

  export type WorkOrderLaborMinAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    userId: string | null
    hours: Decimal | null
    taskDescription: string | null
    createdAt: Date | null
  }

  export type WorkOrderLaborMaxAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    userId: string | null
    hours: Decimal | null
    taskDescription: string | null
    createdAt: Date | null
  }

  export type WorkOrderLaborCountAggregateOutputType = {
    id: number
    workOrderId: number
    userId: number
    hours: number
    taskDescription: number
    createdAt: number
    _all: number
  }


  export type WorkOrderLaborAvgAggregateInputType = {
    hours?: true
  }

  export type WorkOrderLaborSumAggregateInputType = {
    hours?: true
  }

  export type WorkOrderLaborMinAggregateInputType = {
    id?: true
    workOrderId?: true
    userId?: true
    hours?: true
    taskDescription?: true
    createdAt?: true
  }

  export type WorkOrderLaborMaxAggregateInputType = {
    id?: true
    workOrderId?: true
    userId?: true
    hours?: true
    taskDescription?: true
    createdAt?: true
  }

  export type WorkOrderLaborCountAggregateInputType = {
    id?: true
    workOrderId?: true
    userId?: true
    hours?: true
    taskDescription?: true
    createdAt?: true
    _all?: true
  }

  export type WorkOrderLaborAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderLabor to aggregate.
     */
    where?: WorkOrderLaborWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderLabors to fetch.
     */
    orderBy?: WorkOrderLaborOrderByWithRelationInput | WorkOrderLaborOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderLaborWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderLabors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderLabors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrderLabors
    **/
    _count?: true | WorkOrderLaborCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkOrderLaborAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkOrderLaborSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderLaborMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderLaborMaxAggregateInputType
  }

  export type GetWorkOrderLaborAggregateType<T extends WorkOrderLaborAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrderLabor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrderLabor[P]>
      : GetScalarType<T[P], AggregateWorkOrderLabor[P]>
  }




  export type WorkOrderLaborGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderLaborWhereInput
    orderBy?: WorkOrderLaborOrderByWithAggregationInput | WorkOrderLaborOrderByWithAggregationInput[]
    by: WorkOrderLaborScalarFieldEnum[] | WorkOrderLaborScalarFieldEnum
    having?: WorkOrderLaborScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderLaborCountAggregateInputType | true
    _avg?: WorkOrderLaborAvgAggregateInputType
    _sum?: WorkOrderLaborSumAggregateInputType
    _min?: WorkOrderLaborMinAggregateInputType
    _max?: WorkOrderLaborMaxAggregateInputType
  }

  export type WorkOrderLaborGroupByOutputType = {
    id: string
    workOrderId: string
    userId: string | null
    hours: Decimal
    taskDescription: string | null
    createdAt: Date
    _count: WorkOrderLaborCountAggregateOutputType | null
    _avg: WorkOrderLaborAvgAggregateOutputType | null
    _sum: WorkOrderLaborSumAggregateOutputType | null
    _min: WorkOrderLaborMinAggregateOutputType | null
    _max: WorkOrderLaborMaxAggregateOutputType | null
  }

  type GetWorkOrderLaborGroupByPayload<T extends WorkOrderLaborGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderLaborGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderLaborGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderLaborGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderLaborGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderLaborSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    userId?: boolean
    hours?: boolean
    taskDescription?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLabor$userArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderLabor"]>

  export type WorkOrderLaborSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    userId?: boolean
    hours?: boolean
    taskDescription?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLabor$userArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderLabor"]>

  export type WorkOrderLaborSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    userId?: boolean
    hours?: boolean
    taskDescription?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLabor$userArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderLabor"]>

  export type WorkOrderLaborSelectScalar = {
    id?: boolean
    workOrderId?: boolean
    userId?: boolean
    hours?: boolean
    taskDescription?: boolean
    createdAt?: boolean
  }

  export type WorkOrderLaborOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workOrderId" | "userId" | "hours" | "taskDescription" | "createdAt", ExtArgs["result"]["workOrderLabor"]>
  export type WorkOrderLaborInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLabor$userArgs<ExtArgs>
  }
  export type WorkOrderLaborIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLabor$userArgs<ExtArgs>
  }
  export type WorkOrderLaborIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLabor$userArgs<ExtArgs>
  }

  export type $WorkOrderLaborPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrderLabor"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workOrderId: string
      userId: string | null
      hours: Prisma.Decimal
      taskDescription: string | null
      createdAt: Date
    }, ExtArgs["result"]["workOrderLabor"]>
    composites: {}
  }

  type WorkOrderLaborGetPayload<S extends boolean | null | undefined | WorkOrderLaborDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderLaborPayload, S>

  type WorkOrderLaborCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkOrderLaborFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkOrderLaborCountAggregateInputType | true
    }

  export interface WorkOrderLaborDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrderLabor'], meta: { name: 'WorkOrderLabor' } }
    /**
     * Find zero or one WorkOrderLabor that matches the filter.
     * @param {WorkOrderLaborFindUniqueArgs} args - Arguments to find a WorkOrderLabor
     * @example
     * // Get one WorkOrderLabor
     * const workOrderLabor = await prisma.workOrderLabor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderLaborFindUniqueArgs>(args: SelectSubset<T, WorkOrderLaborFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderLaborClient<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkOrderLabor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkOrderLaborFindUniqueOrThrowArgs} args - Arguments to find a WorkOrderLabor
     * @example
     * // Get one WorkOrderLabor
     * const workOrderLabor = await prisma.workOrderLabor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderLaborFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderLaborFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderLaborClient<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderLabor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLaborFindFirstArgs} args - Arguments to find a WorkOrderLabor
     * @example
     * // Get one WorkOrderLabor
     * const workOrderLabor = await prisma.workOrderLabor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderLaborFindFirstArgs>(args?: SelectSubset<T, WorkOrderLaborFindFirstArgs<ExtArgs>>): Prisma__WorkOrderLaborClient<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderLabor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLaborFindFirstOrThrowArgs} args - Arguments to find a WorkOrderLabor
     * @example
     * // Get one WorkOrderLabor
     * const workOrderLabor = await prisma.workOrderLabor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderLaborFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderLaborFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderLaborClient<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkOrderLabors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLaborFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrderLabors
     * const workOrderLabors = await prisma.workOrderLabor.findMany()
     * 
     * // Get first 10 WorkOrderLabors
     * const workOrderLabors = await prisma.workOrderLabor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderLaborWithIdOnly = await prisma.workOrderLabor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderLaborFindManyArgs>(args?: SelectSubset<T, WorkOrderLaborFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkOrderLabor.
     * @param {WorkOrderLaborCreateArgs} args - Arguments to create a WorkOrderLabor.
     * @example
     * // Create one WorkOrderLabor
     * const WorkOrderLabor = await prisma.workOrderLabor.create({
     *   data: {
     *     // ... data to create a WorkOrderLabor
     *   }
     * })
     * 
     */
    create<T extends WorkOrderLaborCreateArgs>(args: SelectSubset<T, WorkOrderLaborCreateArgs<ExtArgs>>): Prisma__WorkOrderLaborClient<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkOrderLabors.
     * @param {WorkOrderLaborCreateManyArgs} args - Arguments to create many WorkOrderLabors.
     * @example
     * // Create many WorkOrderLabors
     * const workOrderLabor = await prisma.workOrderLabor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderLaborCreateManyArgs>(args?: SelectSubset<T, WorkOrderLaborCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrderLabors and returns the data saved in the database.
     * @param {WorkOrderLaborCreateManyAndReturnArgs} args - Arguments to create many WorkOrderLabors.
     * @example
     * // Create many WorkOrderLabors
     * const workOrderLabor = await prisma.workOrderLabor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrderLabors and only return the `id`
     * const workOrderLaborWithIdOnly = await prisma.workOrderLabor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderLaborCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderLaborCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkOrderLabor.
     * @param {WorkOrderLaborDeleteArgs} args - Arguments to delete one WorkOrderLabor.
     * @example
     * // Delete one WorkOrderLabor
     * const WorkOrderLabor = await prisma.workOrderLabor.delete({
     *   where: {
     *     // ... filter to delete one WorkOrderLabor
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderLaborDeleteArgs>(args: SelectSubset<T, WorkOrderLaborDeleteArgs<ExtArgs>>): Prisma__WorkOrderLaborClient<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkOrderLabor.
     * @param {WorkOrderLaborUpdateArgs} args - Arguments to update one WorkOrderLabor.
     * @example
     * // Update one WorkOrderLabor
     * const workOrderLabor = await prisma.workOrderLabor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderLaborUpdateArgs>(args: SelectSubset<T, WorkOrderLaborUpdateArgs<ExtArgs>>): Prisma__WorkOrderLaborClient<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkOrderLabors.
     * @param {WorkOrderLaborDeleteManyArgs} args - Arguments to filter WorkOrderLabors to delete.
     * @example
     * // Delete a few WorkOrderLabors
     * const { count } = await prisma.workOrderLabor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderLaborDeleteManyArgs>(args?: SelectSubset<T, WorkOrderLaborDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderLabors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLaborUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrderLabors
     * const workOrderLabor = await prisma.workOrderLabor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderLaborUpdateManyArgs>(args: SelectSubset<T, WorkOrderLaborUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderLabors and returns the data updated in the database.
     * @param {WorkOrderLaborUpdateManyAndReturnArgs} args - Arguments to update many WorkOrderLabors.
     * @example
     * // Update many WorkOrderLabors
     * const workOrderLabor = await prisma.workOrderLabor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkOrderLabors and only return the `id`
     * const workOrderLaborWithIdOnly = await prisma.workOrderLabor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkOrderLaborUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkOrderLaborUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkOrderLabor.
     * @param {WorkOrderLaborUpsertArgs} args - Arguments to update or create a WorkOrderLabor.
     * @example
     * // Update or create a WorkOrderLabor
     * const workOrderLabor = await prisma.workOrderLabor.upsert({
     *   create: {
     *     // ... data to create a WorkOrderLabor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrderLabor we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderLaborUpsertArgs>(args: SelectSubset<T, WorkOrderLaborUpsertArgs<ExtArgs>>): Prisma__WorkOrderLaborClient<$Result.GetResult<Prisma.$WorkOrderLaborPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkOrderLabors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLaborCountArgs} args - Arguments to filter WorkOrderLabors to count.
     * @example
     * // Count the number of WorkOrderLabors
     * const count = await prisma.workOrderLabor.count({
     *   where: {
     *     // ... the filter for the WorkOrderLabors we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderLaborCountArgs>(
      args?: Subset<T, WorkOrderLaborCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderLaborCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrderLabor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLaborAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderLaborAggregateArgs>(args: Subset<T, WorkOrderLaborAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderLaborAggregateType<T>>

    /**
     * Group by WorkOrderLabor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLaborGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderLaborGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderLaborGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderLaborGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderLaborGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderLaborGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrderLabor model
   */
  readonly fields: WorkOrderLaborFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrderLabor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderLaborClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends WorkOrderLabor$userArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderLabor$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrderLabor model
   */
  interface WorkOrderLaborFieldRefs {
    readonly id: FieldRef<"WorkOrderLabor", 'String'>
    readonly workOrderId: FieldRef<"WorkOrderLabor", 'String'>
    readonly userId: FieldRef<"WorkOrderLabor", 'String'>
    readonly hours: FieldRef<"WorkOrderLabor", 'Decimal'>
    readonly taskDescription: FieldRef<"WorkOrderLabor", 'String'>
    readonly createdAt: FieldRef<"WorkOrderLabor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrderLabor findUnique
   */
  export type WorkOrderLaborFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLabor to fetch.
     */
    where: WorkOrderLaborWhereUniqueInput
  }

  /**
   * WorkOrderLabor findUniqueOrThrow
   */
  export type WorkOrderLaborFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLabor to fetch.
     */
    where: WorkOrderLaborWhereUniqueInput
  }

  /**
   * WorkOrderLabor findFirst
   */
  export type WorkOrderLaborFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLabor to fetch.
     */
    where?: WorkOrderLaborWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderLabors to fetch.
     */
    orderBy?: WorkOrderLaborOrderByWithRelationInput | WorkOrderLaborOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderLabors.
     */
    cursor?: WorkOrderLaborWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderLabors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderLabors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderLabors.
     */
    distinct?: WorkOrderLaborScalarFieldEnum | WorkOrderLaborScalarFieldEnum[]
  }

  /**
   * WorkOrderLabor findFirstOrThrow
   */
  export type WorkOrderLaborFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLabor to fetch.
     */
    where?: WorkOrderLaborWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderLabors to fetch.
     */
    orderBy?: WorkOrderLaborOrderByWithRelationInput | WorkOrderLaborOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderLabors.
     */
    cursor?: WorkOrderLaborWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderLabors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderLabors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderLabors.
     */
    distinct?: WorkOrderLaborScalarFieldEnum | WorkOrderLaborScalarFieldEnum[]
  }

  /**
   * WorkOrderLabor findMany
   */
  export type WorkOrderLaborFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLabors to fetch.
     */
    where?: WorkOrderLaborWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderLabors to fetch.
     */
    orderBy?: WorkOrderLaborOrderByWithRelationInput | WorkOrderLaborOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrderLabors.
     */
    cursor?: WorkOrderLaborWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderLabors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderLabors.
     */
    skip?: number
    distinct?: WorkOrderLaborScalarFieldEnum | WorkOrderLaborScalarFieldEnum[]
  }

  /**
   * WorkOrderLabor create
   */
  export type WorkOrderLaborCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrderLabor.
     */
    data: XOR<WorkOrderLaborCreateInput, WorkOrderLaborUncheckedCreateInput>
  }

  /**
   * WorkOrderLabor createMany
   */
  export type WorkOrderLaborCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrderLabors.
     */
    data: WorkOrderLaborCreateManyInput | WorkOrderLaborCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrderLabor createManyAndReturn
   */
  export type WorkOrderLaborCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * The data used to create many WorkOrderLabors.
     */
    data: WorkOrderLaborCreateManyInput | WorkOrderLaborCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderLabor update
   */
  export type WorkOrderLaborUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrderLabor.
     */
    data: XOR<WorkOrderLaborUpdateInput, WorkOrderLaborUncheckedUpdateInput>
    /**
     * Choose, which WorkOrderLabor to update.
     */
    where: WorkOrderLaborWhereUniqueInput
  }

  /**
   * WorkOrderLabor updateMany
   */
  export type WorkOrderLaborUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrderLabors.
     */
    data: XOR<WorkOrderLaborUpdateManyMutationInput, WorkOrderLaborUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderLabors to update
     */
    where?: WorkOrderLaborWhereInput
    /**
     * Limit how many WorkOrderLabors to update.
     */
    limit?: number
  }

  /**
   * WorkOrderLabor updateManyAndReturn
   */
  export type WorkOrderLaborUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * The data used to update WorkOrderLabors.
     */
    data: XOR<WorkOrderLaborUpdateManyMutationInput, WorkOrderLaborUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderLabors to update
     */
    where?: WorkOrderLaborWhereInput
    /**
     * Limit how many WorkOrderLabors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderLabor upsert
   */
  export type WorkOrderLaborUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrderLabor to update in case it exists.
     */
    where: WorkOrderLaborWhereUniqueInput
    /**
     * In case the WorkOrderLabor found by the `where` argument doesn't exist, create a new WorkOrderLabor with this data.
     */
    create: XOR<WorkOrderLaborCreateInput, WorkOrderLaborUncheckedCreateInput>
    /**
     * In case the WorkOrderLabor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderLaborUpdateInput, WorkOrderLaborUncheckedUpdateInput>
  }

  /**
   * WorkOrderLabor delete
   */
  export type WorkOrderLaborDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
    /**
     * Filter which WorkOrderLabor to delete.
     */
    where: WorkOrderLaborWhereUniqueInput
  }

  /**
   * WorkOrderLabor deleteMany
   */
  export type WorkOrderLaborDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderLabors to delete
     */
    where?: WorkOrderLaborWhereInput
    /**
     * Limit how many WorkOrderLabors to delete.
     */
    limit?: number
  }

  /**
   * WorkOrderLabor.user
   */
  export type WorkOrderLabor$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * WorkOrderLabor without action
   */
  export type WorkOrderLaborDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLabor
     */
    select?: WorkOrderLaborSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLabor
     */
    omit?: WorkOrderLaborOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLaborInclude<ExtArgs> | null
  }


  /**
   * Model Incident
   */

  export type AggregateIncident = {
    _count: IncidentCountAggregateOutputType | null
    _min: IncidentMinAggregateOutputType | null
    _max: IncidentMaxAggregateOutputType | null
  }

  export type IncidentMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    assetId: string | null
    reportedById: string | null
    description: string | null
    status: $Enums.CallStatus | null
    priority: $Enums.CallPriority | null
    reportedAt: Date | null
    resolvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type IncidentMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    assetId: string | null
    reportedById: string | null
    description: string | null
    status: $Enums.CallStatus | null
    priority: $Enums.CallPriority | null
    reportedAt: Date | null
    resolvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type IncidentCountAggregateOutputType = {
    id: number
    tenantId: number
    assetId: number
    reportedById: number
    description: number
    status: number
    priority: number
    reportedAt: number
    resolvedAt: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type IncidentMinAggregateInputType = {
    id?: true
    tenantId?: true
    assetId?: true
    reportedById?: true
    description?: true
    status?: true
    priority?: true
    reportedAt?: true
    resolvedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type IncidentMaxAggregateInputType = {
    id?: true
    tenantId?: true
    assetId?: true
    reportedById?: true
    description?: true
    status?: true
    priority?: true
    reportedAt?: true
    resolvedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type IncidentCountAggregateInputType = {
    id?: true
    tenantId?: true
    assetId?: true
    reportedById?: true
    description?: true
    status?: true
    priority?: true
    reportedAt?: true
    resolvedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type IncidentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Incident to aggregate.
     */
    where?: IncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Incidents to fetch.
     */
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Incidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Incidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Incidents
    **/
    _count?: true | IncidentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IncidentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IncidentMaxAggregateInputType
  }

  export type GetIncidentAggregateType<T extends IncidentAggregateArgs> = {
        [P in keyof T & keyof AggregateIncident]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIncident[P]>
      : GetScalarType<T[P], AggregateIncident[P]>
  }




  export type IncidentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncidentWhereInput
    orderBy?: IncidentOrderByWithAggregationInput | IncidentOrderByWithAggregationInput[]
    by: IncidentScalarFieldEnum[] | IncidentScalarFieldEnum
    having?: IncidentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IncidentCountAggregateInputType | true
    _min?: IncidentMinAggregateInputType
    _max?: IncidentMaxAggregateInputType
  }

  export type IncidentGroupByOutputType = {
    id: string
    tenantId: string
    assetId: string | null
    reportedById: string | null
    description: string
    status: $Enums.CallStatus
    priority: $Enums.CallPriority
    reportedAt: Date
    resolvedAt: Date | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: IncidentCountAggregateOutputType | null
    _min: IncidentMinAggregateOutputType | null
    _max: IncidentMaxAggregateOutputType | null
  }

  type GetIncidentGroupByPayload<T extends IncidentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IncidentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IncidentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IncidentGroupByOutputType[P]>
            : GetScalarType<T[P], IncidentGroupByOutputType[P]>
        }
      >
    >


  export type IncidentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    assetId?: boolean
    reportedById?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    reportedAt?: boolean
    resolvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    asset?: boolean | Incident$assetArgs<ExtArgs>
    reportedBy?: boolean | Incident$reportedByArgs<ExtArgs>
  }, ExtArgs["result"]["incident"]>

  export type IncidentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    assetId?: boolean
    reportedById?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    reportedAt?: boolean
    resolvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    asset?: boolean | Incident$assetArgs<ExtArgs>
    reportedBy?: boolean | Incident$reportedByArgs<ExtArgs>
  }, ExtArgs["result"]["incident"]>

  export type IncidentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    assetId?: boolean
    reportedById?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    reportedAt?: boolean
    resolvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    asset?: boolean | Incident$assetArgs<ExtArgs>
    reportedBy?: boolean | Incident$reportedByArgs<ExtArgs>
  }, ExtArgs["result"]["incident"]>

  export type IncidentSelectScalar = {
    id?: boolean
    tenantId?: boolean
    assetId?: boolean
    reportedById?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    reportedAt?: boolean
    resolvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type IncidentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "assetId" | "reportedById" | "description" | "status" | "priority" | "reportedAt" | "resolvedAt" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["incident"]>
  export type IncidentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    asset?: boolean | Incident$assetArgs<ExtArgs>
    reportedBy?: boolean | Incident$reportedByArgs<ExtArgs>
  }
  export type IncidentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    asset?: boolean | Incident$assetArgs<ExtArgs>
    reportedBy?: boolean | Incident$reportedByArgs<ExtArgs>
  }
  export type IncidentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    asset?: boolean | Incident$assetArgs<ExtArgs>
    reportedBy?: boolean | Incident$reportedByArgs<ExtArgs>
  }

  export type $IncidentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Incident"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs> | null
      reportedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      assetId: string | null
      reportedById: string | null
      description: string
      status: $Enums.CallStatus
      priority: $Enums.CallPriority
      reportedAt: Date
      resolvedAt: Date | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["incident"]>
    composites: {}
  }

  type IncidentGetPayload<S extends boolean | null | undefined | IncidentDefaultArgs> = $Result.GetResult<Prisma.$IncidentPayload, S>

  type IncidentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IncidentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IncidentCountAggregateInputType | true
    }

  export interface IncidentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Incident'], meta: { name: 'Incident' } }
    /**
     * Find zero or one Incident that matches the filter.
     * @param {IncidentFindUniqueArgs} args - Arguments to find a Incident
     * @example
     * // Get one Incident
     * const incident = await prisma.incident.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IncidentFindUniqueArgs>(args: SelectSubset<T, IncidentFindUniqueArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Incident that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IncidentFindUniqueOrThrowArgs} args - Arguments to find a Incident
     * @example
     * // Get one Incident
     * const incident = await prisma.incident.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IncidentFindUniqueOrThrowArgs>(args: SelectSubset<T, IncidentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Incident that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentFindFirstArgs} args - Arguments to find a Incident
     * @example
     * // Get one Incident
     * const incident = await prisma.incident.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IncidentFindFirstArgs>(args?: SelectSubset<T, IncidentFindFirstArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Incident that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentFindFirstOrThrowArgs} args - Arguments to find a Incident
     * @example
     * // Get one Incident
     * const incident = await prisma.incident.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IncidentFindFirstOrThrowArgs>(args?: SelectSubset<T, IncidentFindFirstOrThrowArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Incidents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Incidents
     * const incidents = await prisma.incident.findMany()
     * 
     * // Get first 10 Incidents
     * const incidents = await prisma.incident.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const incidentWithIdOnly = await prisma.incident.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IncidentFindManyArgs>(args?: SelectSubset<T, IncidentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Incident.
     * @param {IncidentCreateArgs} args - Arguments to create a Incident.
     * @example
     * // Create one Incident
     * const Incident = await prisma.incident.create({
     *   data: {
     *     // ... data to create a Incident
     *   }
     * })
     * 
     */
    create<T extends IncidentCreateArgs>(args: SelectSubset<T, IncidentCreateArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Incidents.
     * @param {IncidentCreateManyArgs} args - Arguments to create many Incidents.
     * @example
     * // Create many Incidents
     * const incident = await prisma.incident.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IncidentCreateManyArgs>(args?: SelectSubset<T, IncidentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Incidents and returns the data saved in the database.
     * @param {IncidentCreateManyAndReturnArgs} args - Arguments to create many Incidents.
     * @example
     * // Create many Incidents
     * const incident = await prisma.incident.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Incidents and only return the `id`
     * const incidentWithIdOnly = await prisma.incident.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IncidentCreateManyAndReturnArgs>(args?: SelectSubset<T, IncidentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Incident.
     * @param {IncidentDeleteArgs} args - Arguments to delete one Incident.
     * @example
     * // Delete one Incident
     * const Incident = await prisma.incident.delete({
     *   where: {
     *     // ... filter to delete one Incident
     *   }
     * })
     * 
     */
    delete<T extends IncidentDeleteArgs>(args: SelectSubset<T, IncidentDeleteArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Incident.
     * @param {IncidentUpdateArgs} args - Arguments to update one Incident.
     * @example
     * // Update one Incident
     * const incident = await prisma.incident.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IncidentUpdateArgs>(args: SelectSubset<T, IncidentUpdateArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Incidents.
     * @param {IncidentDeleteManyArgs} args - Arguments to filter Incidents to delete.
     * @example
     * // Delete a few Incidents
     * const { count } = await prisma.incident.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IncidentDeleteManyArgs>(args?: SelectSubset<T, IncidentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Incidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Incidents
     * const incident = await prisma.incident.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IncidentUpdateManyArgs>(args: SelectSubset<T, IncidentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Incidents and returns the data updated in the database.
     * @param {IncidentUpdateManyAndReturnArgs} args - Arguments to update many Incidents.
     * @example
     * // Update many Incidents
     * const incident = await prisma.incident.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Incidents and only return the `id`
     * const incidentWithIdOnly = await prisma.incident.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IncidentUpdateManyAndReturnArgs>(args: SelectSubset<T, IncidentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Incident.
     * @param {IncidentUpsertArgs} args - Arguments to update or create a Incident.
     * @example
     * // Update or create a Incident
     * const incident = await prisma.incident.upsert({
     *   create: {
     *     // ... data to create a Incident
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Incident we want to update
     *   }
     * })
     */
    upsert<T extends IncidentUpsertArgs>(args: SelectSubset<T, IncidentUpsertArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Incidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentCountArgs} args - Arguments to filter Incidents to count.
     * @example
     * // Count the number of Incidents
     * const count = await prisma.incident.count({
     *   where: {
     *     // ... the filter for the Incidents we want to count
     *   }
     * })
    **/
    count<T extends IncidentCountArgs>(
      args?: Subset<T, IncidentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IncidentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Incident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IncidentAggregateArgs>(args: Subset<T, IncidentAggregateArgs>): Prisma.PrismaPromise<GetIncidentAggregateType<T>>

    /**
     * Group by Incident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IncidentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IncidentGroupByArgs['orderBy'] }
        : { orderBy?: IncidentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IncidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncidentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Incident model
   */
  readonly fields: IncidentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Incident.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IncidentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends Incident$assetArgs<ExtArgs> = {}>(args?: Subset<T, Incident$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reportedBy<T extends Incident$reportedByArgs<ExtArgs> = {}>(args?: Subset<T, Incident$reportedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Incident model
   */
  interface IncidentFieldRefs {
    readonly id: FieldRef<"Incident", 'String'>
    readonly tenantId: FieldRef<"Incident", 'String'>
    readonly assetId: FieldRef<"Incident", 'String'>
    readonly reportedById: FieldRef<"Incident", 'String'>
    readonly description: FieldRef<"Incident", 'String'>
    readonly status: FieldRef<"Incident", 'CallStatus'>
    readonly priority: FieldRef<"Incident", 'CallPriority'>
    readonly reportedAt: FieldRef<"Incident", 'DateTime'>
    readonly resolvedAt: FieldRef<"Incident", 'DateTime'>
    readonly createdAt: FieldRef<"Incident", 'DateTime'>
    readonly updatedAt: FieldRef<"Incident", 'DateTime'>
    readonly deletedAt: FieldRef<"Incident", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Incident findUnique
   */
  export type IncidentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incident to fetch.
     */
    where: IncidentWhereUniqueInput
  }

  /**
   * Incident findUniqueOrThrow
   */
  export type IncidentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incident to fetch.
     */
    where: IncidentWhereUniqueInput
  }

  /**
   * Incident findFirst
   */
  export type IncidentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incident to fetch.
     */
    where?: IncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Incidents to fetch.
     */
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Incidents.
     */
    cursor?: IncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Incidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Incidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Incidents.
     */
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * Incident findFirstOrThrow
   */
  export type IncidentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incident to fetch.
     */
    where?: IncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Incidents to fetch.
     */
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Incidents.
     */
    cursor?: IncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Incidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Incidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Incidents.
     */
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * Incident findMany
   */
  export type IncidentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incidents to fetch.
     */
    where?: IncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Incidents to fetch.
     */
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Incidents.
     */
    cursor?: IncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Incidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Incidents.
     */
    skip?: number
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * Incident create
   */
  export type IncidentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * The data needed to create a Incident.
     */
    data: XOR<IncidentCreateInput, IncidentUncheckedCreateInput>
  }

  /**
   * Incident createMany
   */
  export type IncidentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Incidents.
     */
    data: IncidentCreateManyInput | IncidentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Incident createManyAndReturn
   */
  export type IncidentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * The data used to create many Incidents.
     */
    data: IncidentCreateManyInput | IncidentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Incident update
   */
  export type IncidentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * The data needed to update a Incident.
     */
    data: XOR<IncidentUpdateInput, IncidentUncheckedUpdateInput>
    /**
     * Choose, which Incident to update.
     */
    where: IncidentWhereUniqueInput
  }

  /**
   * Incident updateMany
   */
  export type IncidentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Incidents.
     */
    data: XOR<IncidentUpdateManyMutationInput, IncidentUncheckedUpdateManyInput>
    /**
     * Filter which Incidents to update
     */
    where?: IncidentWhereInput
    /**
     * Limit how many Incidents to update.
     */
    limit?: number
  }

  /**
   * Incident updateManyAndReturn
   */
  export type IncidentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * The data used to update Incidents.
     */
    data: XOR<IncidentUpdateManyMutationInput, IncidentUncheckedUpdateManyInput>
    /**
     * Filter which Incidents to update
     */
    where?: IncidentWhereInput
    /**
     * Limit how many Incidents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Incident upsert
   */
  export type IncidentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * The filter to search for the Incident to update in case it exists.
     */
    where: IncidentWhereUniqueInput
    /**
     * In case the Incident found by the `where` argument doesn't exist, create a new Incident with this data.
     */
    create: XOR<IncidentCreateInput, IncidentUncheckedCreateInput>
    /**
     * In case the Incident was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IncidentUpdateInput, IncidentUncheckedUpdateInput>
  }

  /**
   * Incident delete
   */
  export type IncidentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter which Incident to delete.
     */
    where: IncidentWhereUniqueInput
  }

  /**
   * Incident deleteMany
   */
  export type IncidentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Incidents to delete
     */
    where?: IncidentWhereInput
    /**
     * Limit how many Incidents to delete.
     */
    limit?: number
  }

  /**
   * Incident.asset
   */
  export type Incident$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * Incident.reportedBy
   */
  export type Incident$reportedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Incident without action
   */
  export type IncidentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Incident
     */
    omit?: IncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrderLog
   */

  export type AggregateWorkOrderLog = {
    _count: WorkOrderLogCountAggregateOutputType | null
    _min: WorkOrderLogMinAggregateOutputType | null
    _max: WorkOrderLogMaxAggregateOutputType | null
  }

  export type WorkOrderLogMinAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    userId: string | null
    action: string | null
    createdAt: Date | null
  }

  export type WorkOrderLogMaxAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    userId: string | null
    action: string | null
    createdAt: Date | null
  }

  export type WorkOrderLogCountAggregateOutputType = {
    id: number
    workOrderId: number
    userId: number
    action: number
    details: number
    createdAt: number
    _all: number
  }


  export type WorkOrderLogMinAggregateInputType = {
    id?: true
    workOrderId?: true
    userId?: true
    action?: true
    createdAt?: true
  }

  export type WorkOrderLogMaxAggregateInputType = {
    id?: true
    workOrderId?: true
    userId?: true
    action?: true
    createdAt?: true
  }

  export type WorkOrderLogCountAggregateInputType = {
    id?: true
    workOrderId?: true
    userId?: true
    action?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type WorkOrderLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderLog to aggregate.
     */
    where?: WorkOrderLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderLogs to fetch.
     */
    orderBy?: WorkOrderLogOrderByWithRelationInput | WorkOrderLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrderLogs
    **/
    _count?: true | WorkOrderLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderLogMaxAggregateInputType
  }

  export type GetWorkOrderLogAggregateType<T extends WorkOrderLogAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrderLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrderLog[P]>
      : GetScalarType<T[P], AggregateWorkOrderLog[P]>
  }




  export type WorkOrderLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderLogWhereInput
    orderBy?: WorkOrderLogOrderByWithAggregationInput | WorkOrderLogOrderByWithAggregationInput[]
    by: WorkOrderLogScalarFieldEnum[] | WorkOrderLogScalarFieldEnum
    having?: WorkOrderLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderLogCountAggregateInputType | true
    _min?: WorkOrderLogMinAggregateInputType
    _max?: WorkOrderLogMaxAggregateInputType
  }

  export type WorkOrderLogGroupByOutputType = {
    id: string
    workOrderId: string
    userId: string | null
    action: string
    details: JsonValue | null
    createdAt: Date
    _count: WorkOrderLogCountAggregateOutputType | null
    _min: WorkOrderLogMinAggregateOutputType | null
    _max: WorkOrderLogMaxAggregateOutputType | null
  }

  type GetWorkOrderLogGroupByPayload<T extends WorkOrderLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderLogGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderLogGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderLog"]>

  export type WorkOrderLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderLog"]>

  export type WorkOrderLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderLog"]>

  export type WorkOrderLogSelectScalar = {
    id?: boolean
    workOrderId?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type WorkOrderLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workOrderId" | "userId" | "action" | "details" | "createdAt", ExtArgs["result"]["workOrderLog"]>
  export type WorkOrderLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLog$userArgs<ExtArgs>
  }
  export type WorkOrderLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLog$userArgs<ExtArgs>
  }
  export type WorkOrderLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    user?: boolean | WorkOrderLog$userArgs<ExtArgs>
  }

  export type $WorkOrderLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrderLog"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workOrderId: string
      userId: string | null
      action: string
      details: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["workOrderLog"]>
    composites: {}
  }

  type WorkOrderLogGetPayload<S extends boolean | null | undefined | WorkOrderLogDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderLogPayload, S>

  type WorkOrderLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkOrderLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkOrderLogCountAggregateInputType | true
    }

  export interface WorkOrderLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrderLog'], meta: { name: 'WorkOrderLog' } }
    /**
     * Find zero or one WorkOrderLog that matches the filter.
     * @param {WorkOrderLogFindUniqueArgs} args - Arguments to find a WorkOrderLog
     * @example
     * // Get one WorkOrderLog
     * const workOrderLog = await prisma.workOrderLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderLogFindUniqueArgs>(args: SelectSubset<T, WorkOrderLogFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderLogClient<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkOrderLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkOrderLogFindUniqueOrThrowArgs} args - Arguments to find a WorkOrderLog
     * @example
     * // Get one WorkOrderLog
     * const workOrderLog = await prisma.workOrderLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderLogFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderLogClient<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLogFindFirstArgs} args - Arguments to find a WorkOrderLog
     * @example
     * // Get one WorkOrderLog
     * const workOrderLog = await prisma.workOrderLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderLogFindFirstArgs>(args?: SelectSubset<T, WorkOrderLogFindFirstArgs<ExtArgs>>): Prisma__WorkOrderLogClient<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrderLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLogFindFirstOrThrowArgs} args - Arguments to find a WorkOrderLog
     * @example
     * // Get one WorkOrderLog
     * const workOrderLog = await prisma.workOrderLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderLogFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderLogClient<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkOrderLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrderLogs
     * const workOrderLogs = await prisma.workOrderLog.findMany()
     * 
     * // Get first 10 WorkOrderLogs
     * const workOrderLogs = await prisma.workOrderLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderLogWithIdOnly = await prisma.workOrderLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderLogFindManyArgs>(args?: SelectSubset<T, WorkOrderLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkOrderLog.
     * @param {WorkOrderLogCreateArgs} args - Arguments to create a WorkOrderLog.
     * @example
     * // Create one WorkOrderLog
     * const WorkOrderLog = await prisma.workOrderLog.create({
     *   data: {
     *     // ... data to create a WorkOrderLog
     *   }
     * })
     * 
     */
    create<T extends WorkOrderLogCreateArgs>(args: SelectSubset<T, WorkOrderLogCreateArgs<ExtArgs>>): Prisma__WorkOrderLogClient<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkOrderLogs.
     * @param {WorkOrderLogCreateManyArgs} args - Arguments to create many WorkOrderLogs.
     * @example
     * // Create many WorkOrderLogs
     * const workOrderLog = await prisma.workOrderLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderLogCreateManyArgs>(args?: SelectSubset<T, WorkOrderLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrderLogs and returns the data saved in the database.
     * @param {WorkOrderLogCreateManyAndReturnArgs} args - Arguments to create many WorkOrderLogs.
     * @example
     * // Create many WorkOrderLogs
     * const workOrderLog = await prisma.workOrderLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrderLogs and only return the `id`
     * const workOrderLogWithIdOnly = await prisma.workOrderLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderLogCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkOrderLog.
     * @param {WorkOrderLogDeleteArgs} args - Arguments to delete one WorkOrderLog.
     * @example
     * // Delete one WorkOrderLog
     * const WorkOrderLog = await prisma.workOrderLog.delete({
     *   where: {
     *     // ... filter to delete one WorkOrderLog
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderLogDeleteArgs>(args: SelectSubset<T, WorkOrderLogDeleteArgs<ExtArgs>>): Prisma__WorkOrderLogClient<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkOrderLog.
     * @param {WorkOrderLogUpdateArgs} args - Arguments to update one WorkOrderLog.
     * @example
     * // Update one WorkOrderLog
     * const workOrderLog = await prisma.workOrderLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderLogUpdateArgs>(args: SelectSubset<T, WorkOrderLogUpdateArgs<ExtArgs>>): Prisma__WorkOrderLogClient<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkOrderLogs.
     * @param {WorkOrderLogDeleteManyArgs} args - Arguments to filter WorkOrderLogs to delete.
     * @example
     * // Delete a few WorkOrderLogs
     * const { count } = await prisma.workOrderLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderLogDeleteManyArgs>(args?: SelectSubset<T, WorkOrderLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrderLogs
     * const workOrderLog = await prisma.workOrderLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderLogUpdateManyArgs>(args: SelectSubset<T, WorkOrderLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderLogs and returns the data updated in the database.
     * @param {WorkOrderLogUpdateManyAndReturnArgs} args - Arguments to update many WorkOrderLogs.
     * @example
     * // Update many WorkOrderLogs
     * const workOrderLog = await prisma.workOrderLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkOrderLogs and only return the `id`
     * const workOrderLogWithIdOnly = await prisma.workOrderLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkOrderLogUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkOrderLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkOrderLog.
     * @param {WorkOrderLogUpsertArgs} args - Arguments to update or create a WorkOrderLog.
     * @example
     * // Update or create a WorkOrderLog
     * const workOrderLog = await prisma.workOrderLog.upsert({
     *   create: {
     *     // ... data to create a WorkOrderLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrderLog we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderLogUpsertArgs>(args: SelectSubset<T, WorkOrderLogUpsertArgs<ExtArgs>>): Prisma__WorkOrderLogClient<$Result.GetResult<Prisma.$WorkOrderLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkOrderLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLogCountArgs} args - Arguments to filter WorkOrderLogs to count.
     * @example
     * // Count the number of WorkOrderLogs
     * const count = await prisma.workOrderLog.count({
     *   where: {
     *     // ... the filter for the WorkOrderLogs we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderLogCountArgs>(
      args?: Subset<T, WorkOrderLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrderLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderLogAggregateArgs>(args: Subset<T, WorkOrderLogAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderLogAggregateType<T>>

    /**
     * Group by WorkOrderLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderLogGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrderLog model
   */
  readonly fields: WorkOrderLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrderLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends WorkOrderLog$userArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrderLog model
   */
  interface WorkOrderLogFieldRefs {
    readonly id: FieldRef<"WorkOrderLog", 'String'>
    readonly workOrderId: FieldRef<"WorkOrderLog", 'String'>
    readonly userId: FieldRef<"WorkOrderLog", 'String'>
    readonly action: FieldRef<"WorkOrderLog", 'String'>
    readonly details: FieldRef<"WorkOrderLog", 'Json'>
    readonly createdAt: FieldRef<"WorkOrderLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrderLog findUnique
   */
  export type WorkOrderLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLog to fetch.
     */
    where: WorkOrderLogWhereUniqueInput
  }

  /**
   * WorkOrderLog findUniqueOrThrow
   */
  export type WorkOrderLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLog to fetch.
     */
    where: WorkOrderLogWhereUniqueInput
  }

  /**
   * WorkOrderLog findFirst
   */
  export type WorkOrderLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLog to fetch.
     */
    where?: WorkOrderLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderLogs to fetch.
     */
    orderBy?: WorkOrderLogOrderByWithRelationInput | WorkOrderLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderLogs.
     */
    cursor?: WorkOrderLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderLogs.
     */
    distinct?: WorkOrderLogScalarFieldEnum | WorkOrderLogScalarFieldEnum[]
  }

  /**
   * WorkOrderLog findFirstOrThrow
   */
  export type WorkOrderLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLog to fetch.
     */
    where?: WorkOrderLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderLogs to fetch.
     */
    orderBy?: WorkOrderLogOrderByWithRelationInput | WorkOrderLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderLogs.
     */
    cursor?: WorkOrderLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderLogs.
     */
    distinct?: WorkOrderLogScalarFieldEnum | WorkOrderLogScalarFieldEnum[]
  }

  /**
   * WorkOrderLog findMany
   */
  export type WorkOrderLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderLogs to fetch.
     */
    where?: WorkOrderLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderLogs to fetch.
     */
    orderBy?: WorkOrderLogOrderByWithRelationInput | WorkOrderLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrderLogs.
     */
    cursor?: WorkOrderLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderLogs.
     */
    skip?: number
    distinct?: WorkOrderLogScalarFieldEnum | WorkOrderLogScalarFieldEnum[]
  }

  /**
   * WorkOrderLog create
   */
  export type WorkOrderLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrderLog.
     */
    data: XOR<WorkOrderLogCreateInput, WorkOrderLogUncheckedCreateInput>
  }

  /**
   * WorkOrderLog createMany
   */
  export type WorkOrderLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrderLogs.
     */
    data: WorkOrderLogCreateManyInput | WorkOrderLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrderLog createManyAndReturn
   */
  export type WorkOrderLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * The data used to create many WorkOrderLogs.
     */
    data: WorkOrderLogCreateManyInput | WorkOrderLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderLog update
   */
  export type WorkOrderLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrderLog.
     */
    data: XOR<WorkOrderLogUpdateInput, WorkOrderLogUncheckedUpdateInput>
    /**
     * Choose, which WorkOrderLog to update.
     */
    where: WorkOrderLogWhereUniqueInput
  }

  /**
   * WorkOrderLog updateMany
   */
  export type WorkOrderLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrderLogs.
     */
    data: XOR<WorkOrderLogUpdateManyMutationInput, WorkOrderLogUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderLogs to update
     */
    where?: WorkOrderLogWhereInput
    /**
     * Limit how many WorkOrderLogs to update.
     */
    limit?: number
  }

  /**
   * WorkOrderLog updateManyAndReturn
   */
  export type WorkOrderLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * The data used to update WorkOrderLogs.
     */
    data: XOR<WorkOrderLogUpdateManyMutationInput, WorkOrderLogUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderLogs to update
     */
    where?: WorkOrderLogWhereInput
    /**
     * Limit how many WorkOrderLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderLog upsert
   */
  export type WorkOrderLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrderLog to update in case it exists.
     */
    where: WorkOrderLogWhereUniqueInput
    /**
     * In case the WorkOrderLog found by the `where` argument doesn't exist, create a new WorkOrderLog with this data.
     */
    create: XOR<WorkOrderLogCreateInput, WorkOrderLogUncheckedCreateInput>
    /**
     * In case the WorkOrderLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderLogUpdateInput, WorkOrderLogUncheckedUpdateInput>
  }

  /**
   * WorkOrderLog delete
   */
  export type WorkOrderLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
    /**
     * Filter which WorkOrderLog to delete.
     */
    where: WorkOrderLogWhereUniqueInput
  }

  /**
   * WorkOrderLog deleteMany
   */
  export type WorkOrderLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderLogs to delete
     */
    where?: WorkOrderLogWhereInput
    /**
     * Limit how many WorkOrderLogs to delete.
     */
    limit?: number
  }

  /**
   * WorkOrderLog.user
   */
  export type WorkOrderLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * WorkOrderLog without action
   */
  export type WorkOrderLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderLog
     */
    select?: WorkOrderLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrderLog
     */
    omit?: WorkOrderLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subdomain: 'subdomain',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const TenantSettingsScalarFieldEnum: {
    tenantId: 'tenantId',
    config: 'config',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantSettingsScalarFieldEnum = (typeof TenantSettingsScalarFieldEnum)[keyof typeof TenantSettingsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    tenantId: 'tenantId',
    employeeId: 'employeeId',
    password: 'password',
    role: 'role',
    firstName: 'firstName',
    lastName: 'lastName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AssetCategoryScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    name: 'name',
    industry: 'industry',
    description: 'description',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetCategoryScalarFieldEnum = (typeof AssetCategoryScalarFieldEnum)[keyof typeof AssetCategoryScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const AssetTypeScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    categoryId: 'categoryId',
    name: 'name',
    description: 'description',
    expectedLifespan: 'expectedLifespan',
    maintenanceFrequency: 'maintenanceFrequency',
    criticality: 'criticality',
    customFields: 'customFields',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetTypeScalarFieldEnum = (typeof AssetTypeScalarFieldEnum)[keyof typeof AssetTypeScalarFieldEnum]


  export const AssetScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    assetTypeId: 'assetTypeId',
    name: 'name',
    location: 'location',
    status: 'status',
    serialNumber: 'serialNumber',
    purchaseDate: 'purchaseDate',
    lastMaintenanceDate: 'lastMaintenanceDate',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const MeterScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    name: 'name',
    unit: 'unit',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeterScalarFieldEnum = (typeof MeterScalarFieldEnum)[keyof typeof MeterScalarFieldEnum]


  export const AssetMeterScalarFieldEnum: {
    id: 'id',
    assetId: 'assetId',
    meterId: 'meterId',
    initialReading: 'initialReading',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetMeterScalarFieldEnum = (typeof AssetMeterScalarFieldEnum)[keyof typeof AssetMeterScalarFieldEnum]


  export const MeterReadingScalarFieldEnum: {
    id: 'id',
    assetMeterId: 'assetMeterId',
    readingValue: 'readingValue',
    readingDate: 'readingDate',
    createdAt: 'createdAt'
  };

  export type MeterReadingScalarFieldEnum = (typeof MeterReadingScalarFieldEnum)[keyof typeof MeterReadingScalarFieldEnum]


  export const MaintenanceScheduleScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    description: 'description',
    triggerType: 'triggerType',
    recurrence: 'recurrence',
    meterId: 'meterId',
    thresholdValue: 'thresholdValue',
    nextRun: 'nextRun',
    lastRun: 'lastRun',
    status: 'status',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type MaintenanceScheduleScalarFieldEnum = (typeof MaintenanceScheduleScalarFieldEnum)[keyof typeof MaintenanceScheduleScalarFieldEnum]


  export const MaintenanceAssignmentScalarFieldEnum: {
    maintenanceId: 'maintenanceId',
    userId: 'userId'
  };

  export type MaintenanceAssignmentScalarFieldEnum = (typeof MaintenanceAssignmentScalarFieldEnum)[keyof typeof MaintenanceAssignmentScalarFieldEnum]


  export const MaintenanceAssetsScalarFieldEnum: {
    maintenanceId: 'maintenanceId',
    assetId: 'assetId'
  };

  export type MaintenanceAssetsScalarFieldEnum = (typeof MaintenanceAssetsScalarFieldEnum)[keyof typeof MaintenanceAssetsScalarFieldEnum]


  export const WorkOrderScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    maintenanceId: 'maintenanceId',
    description: 'description',
    status: 'status',
    priority: 'priority',
    dueDate: 'dueDate',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type WorkOrderScalarFieldEnum = (typeof WorkOrderScalarFieldEnum)[keyof typeof WorkOrderScalarFieldEnum]


  export const WorkOrderAssignmentScalarFieldEnum: {
    workOrderId: 'workOrderId',
    userId: 'userId'
  };

  export type WorkOrderAssignmentScalarFieldEnum = (typeof WorkOrderAssignmentScalarFieldEnum)[keyof typeof WorkOrderAssignmentScalarFieldEnum]


  export const WorkOrderAssetsScalarFieldEnum: {
    workOrderId: 'workOrderId',
    assetId: 'assetId'
  };

  export type WorkOrderAssetsScalarFieldEnum = (typeof WorkOrderAssetsScalarFieldEnum)[keyof typeof WorkOrderAssetsScalarFieldEnum]


  export const WorkOrderPartsScalarFieldEnum: {
    workOrderId: 'workOrderId',
    partId: 'partId',
    quantityUsed: 'quantityUsed'
  };

  export type WorkOrderPartsScalarFieldEnum = (typeof WorkOrderPartsScalarFieldEnum)[keyof typeof WorkOrderPartsScalarFieldEnum]


  export const PartScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    name: 'name',
    partNumber: 'partNumber',
    description: 'description',
    quantity: 'quantity',
    minStock: 'minStock',
    unitCost: 'unitCost',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type PartScalarFieldEnum = (typeof PartScalarFieldEnum)[keyof typeof PartScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    name: 'name',
    contactInfo: 'contactInfo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const PartVendorScalarFieldEnum: {
    partId: 'partId',
    vendorId: 'vendorId',
    cost: 'cost',
    leadTime: 'leadTime'
  };

  export type PartVendorScalarFieldEnum = (typeof PartVendorScalarFieldEnum)[keyof typeof PartVendorScalarFieldEnum]


  export const WorkOrderLaborScalarFieldEnum: {
    id: 'id',
    workOrderId: 'workOrderId',
    userId: 'userId',
    hours: 'hours',
    taskDescription: 'taskDescription',
    createdAt: 'createdAt'
  };

  export type WorkOrderLaborScalarFieldEnum = (typeof WorkOrderLaborScalarFieldEnum)[keyof typeof WorkOrderLaborScalarFieldEnum]


  export const IncidentScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    assetId: 'assetId',
    reportedById: 'reportedById',
    description: 'description',
    status: 'status',
    priority: 'priority',
    reportedAt: 'reportedAt',
    resolvedAt: 'resolvedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type IncidentScalarFieldEnum = (typeof IncidentScalarFieldEnum)[keyof typeof IncidentScalarFieldEnum]


  export const WorkOrderLogScalarFieldEnum: {
    id: 'id',
    workOrderId: 'workOrderId',
    userId: 'userId',
    action: 'action',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type WorkOrderLogScalarFieldEnum = (typeof WorkOrderLogScalarFieldEnum)[keyof typeof WorkOrderLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'IndustryType'
   */
  export type EnumIndustryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IndustryType'>
    


  /**
   * Reference to a field of type 'IndustryType[]'
   */
  export type ListEnumIndustryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IndustryType[]'>
    


  /**
   * Reference to a field of type 'AssetStatus'
   */
  export type EnumAssetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetStatus'>
    


  /**
   * Reference to a field of type 'AssetStatus[]'
   */
  export type ListEnumAssetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'MaintenanceTrigger'
   */
  export type EnumMaintenanceTriggerFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceTrigger'>
    


  /**
   * Reference to a field of type 'MaintenanceTrigger[]'
   */
  export type ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceTrigger[]'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus'
   */
  export type EnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus[]'
   */
  export type ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus[]'>
    


  /**
   * Reference to a field of type 'CallPriority'
   */
  export type EnumCallPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CallPriority'>
    


  /**
   * Reference to a field of type 'CallPriority[]'
   */
  export type ListEnumCallPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CallPriority[]'>
    


  /**
   * Reference to a field of type 'WorkOrderStatus'
   */
  export type EnumWorkOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkOrderStatus'>
    


  /**
   * Reference to a field of type 'WorkOrderStatus[]'
   */
  export type ListEnumWorkOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkOrderStatus[]'>
    


  /**
   * Reference to a field of type 'CallStatus'
   */
  export type EnumCallStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CallStatus'>
    


  /**
   * Reference to a field of type 'CallStatus[]'
   */
  export type ListEnumCallStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CallStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: UuidFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    subdomain?: StringFilter<"Tenant"> | string
    parentId?: UuidNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    parent?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    settings?: XOR<TenantSettingsNullableScalarRelationFilter, TenantSettingsWhereInput> | null
    users?: UserListRelationFilter
    categories?: AssetCategoryListRelationFilter
    assetTypes?: AssetTypeListRelationFilter
    assets?: AssetListRelationFilter
    meters?: MeterListRelationFilter
    maintenance?: MaintenanceScheduleListRelationFilter
    workOrders?: WorkOrderListRelationFilter
    parts?: PartListRelationFilter
    vendors?: VendorListRelationFilter
    incidents?: IncidentListRelationFilter
    children?: TenantListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    parent?: TenantOrderByWithRelationInput
    settings?: TenantSettingsOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    categories?: AssetCategoryOrderByRelationAggregateInput
    assetTypes?: AssetTypeOrderByRelationAggregateInput
    assets?: AssetOrderByRelationAggregateInput
    meters?: MeterOrderByRelationAggregateInput
    maintenance?: MaintenanceScheduleOrderByRelationAggregateInput
    workOrders?: WorkOrderOrderByRelationAggregateInput
    parts?: PartOrderByRelationAggregateInput
    vendors?: VendorOrderByRelationAggregateInput
    incidents?: IncidentOrderByRelationAggregateInput
    children?: TenantOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    subdomain?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    name?: StringFilter<"Tenant"> | string
    parentId?: UuidNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    parent?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    settings?: XOR<TenantSettingsNullableScalarRelationFilter, TenantSettingsWhereInput> | null
    users?: UserListRelationFilter
    categories?: AssetCategoryListRelationFilter
    assetTypes?: AssetTypeListRelationFilter
    assets?: AssetListRelationFilter
    meters?: MeterListRelationFilter
    maintenance?: MaintenanceScheduleListRelationFilter
    workOrders?: WorkOrderListRelationFilter
    parts?: PartListRelationFilter
    vendors?: VendorListRelationFilter
    incidents?: IncidentListRelationFilter
    children?: TenantListRelationFilter
  }, "id" | "subdomain">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: TenantCountOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Tenant"> | string
    name?: StringWithAggregatesFilter<"Tenant"> | string
    subdomain?: StringWithAggregatesFilter<"Tenant"> | string
    parentId?: UuidNullableWithAggregatesFilter<"Tenant"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Tenant"> | Date | string | null
  }

  export type TenantSettingsWhereInput = {
    AND?: TenantSettingsWhereInput | TenantSettingsWhereInput[]
    OR?: TenantSettingsWhereInput[]
    NOT?: TenantSettingsWhereInput | TenantSettingsWhereInput[]
    tenantId?: UuidFilter<"TenantSettings"> | string
    config?: JsonFilter<"TenantSettings">
    createdAt?: DateTimeFilter<"TenantSettings"> | Date | string
    updatedAt?: DateTimeFilter<"TenantSettings"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type TenantSettingsOrderByWithRelationInput = {
    tenantId?: SortOrder
    config?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type TenantSettingsWhereUniqueInput = Prisma.AtLeast<{
    tenantId?: string
    AND?: TenantSettingsWhereInput | TenantSettingsWhereInput[]
    OR?: TenantSettingsWhereInput[]
    NOT?: TenantSettingsWhereInput | TenantSettingsWhereInput[]
    config?: JsonFilter<"TenantSettings">
    createdAt?: DateTimeFilter<"TenantSettings"> | Date | string
    updatedAt?: DateTimeFilter<"TenantSettings"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "tenantId">

  export type TenantSettingsOrderByWithAggregationInput = {
    tenantId?: SortOrder
    config?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantSettingsCountOrderByAggregateInput
    _max?: TenantSettingsMaxOrderByAggregateInput
    _min?: TenantSettingsMinOrderByAggregateInput
  }

  export type TenantSettingsScalarWhereWithAggregatesInput = {
    AND?: TenantSettingsScalarWhereWithAggregatesInput | TenantSettingsScalarWhereWithAggregatesInput[]
    OR?: TenantSettingsScalarWhereWithAggregatesInput[]
    NOT?: TenantSettingsScalarWhereWithAggregatesInput | TenantSettingsScalarWhereWithAggregatesInput[]
    tenantId?: UuidWithAggregatesFilter<"TenantSettings"> | string
    config?: JsonWithAggregatesFilter<"TenantSettings">
    createdAt?: DateTimeWithAggregatesFilter<"TenantSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TenantSettings"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    tenantId?: UuidFilter<"User"> | string
    employeeId?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    assignments?: MaintenanceAssignmentListRelationFilter
    workOrders?: WorkOrderAssignmentListRelationFilter
    labor?: WorkOrderLaborListRelationFilter
    incidents?: IncidentListRelationFilter
    workOrderLogs?: WorkOrderLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    assignments?: MaintenanceAssignmentOrderByRelationAggregateInput
    workOrders?: WorkOrderAssignmentOrderByRelationAggregateInput
    labor?: WorkOrderLaborOrderByRelationAggregateInput
    incidents?: IncidentOrderByRelationAggregateInput
    workOrderLogs?: WorkOrderLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    employeeId?: string
    tenantId_employeeId?: UserTenantIdEmployeeIdCompoundUniqueInput
    tenantId_email?: UserTenantIdEmailCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    tenantId?: UuidFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    assignments?: MaintenanceAssignmentListRelationFilter
    workOrders?: WorkOrderAssignmentListRelationFilter
    labor?: WorkOrderLaborListRelationFilter
    incidents?: IncidentListRelationFilter
    workOrderLogs?: WorkOrderLogListRelationFilter
  }, "id" | "email" | "employeeId" | "tenantId_employeeId" | "tenantId_email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    tenantId?: UuidWithAggregatesFilter<"User"> | string
    employeeId?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: UuidFilter<"Account"> | string
    userId?: UuidFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: UuidFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Account"> | string
    userId?: UuidWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: UuidFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: UuidFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: UuidFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: UuidWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type AssetCategoryWhereInput = {
    AND?: AssetCategoryWhereInput | AssetCategoryWhereInput[]
    OR?: AssetCategoryWhereInput[]
    NOT?: AssetCategoryWhereInput | AssetCategoryWhereInput[]
    id?: UuidFilter<"AssetCategory"> | string
    tenantId?: UuidFilter<"AssetCategory"> | string
    name?: StringFilter<"AssetCategory"> | string
    industry?: EnumIndustryTypeFilter<"AssetCategory"> | $Enums.IndustryType
    description?: StringNullableFilter<"AssetCategory"> | string | null
    metadata?: JsonFilter<"AssetCategory">
    createdAt?: DateTimeFilter<"AssetCategory"> | Date | string
    updatedAt?: DateTimeFilter<"AssetCategory"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    assetTypes?: AssetTypeListRelationFilter
  }

  export type AssetCategoryOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    industry?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    assetTypes?: AssetTypeOrderByRelationAggregateInput
  }

  export type AssetCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId_name?: AssetCategoryTenantIdNameCompoundUniqueInput
    AND?: AssetCategoryWhereInput | AssetCategoryWhereInput[]
    OR?: AssetCategoryWhereInput[]
    NOT?: AssetCategoryWhereInput | AssetCategoryWhereInput[]
    tenantId?: UuidFilter<"AssetCategory"> | string
    name?: StringFilter<"AssetCategory"> | string
    industry?: EnumIndustryTypeFilter<"AssetCategory"> | $Enums.IndustryType
    description?: StringNullableFilter<"AssetCategory"> | string | null
    metadata?: JsonFilter<"AssetCategory">
    createdAt?: DateTimeFilter<"AssetCategory"> | Date | string
    updatedAt?: DateTimeFilter<"AssetCategory"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    assetTypes?: AssetTypeListRelationFilter
  }, "id" | "tenantId_name">

  export type AssetCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    industry?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetCategoryCountOrderByAggregateInput
    _max?: AssetCategoryMaxOrderByAggregateInput
    _min?: AssetCategoryMinOrderByAggregateInput
  }

  export type AssetCategoryScalarWhereWithAggregatesInput = {
    AND?: AssetCategoryScalarWhereWithAggregatesInput | AssetCategoryScalarWhereWithAggregatesInput[]
    OR?: AssetCategoryScalarWhereWithAggregatesInput[]
    NOT?: AssetCategoryScalarWhereWithAggregatesInput | AssetCategoryScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AssetCategory"> | string
    tenantId?: UuidWithAggregatesFilter<"AssetCategory"> | string
    name?: StringWithAggregatesFilter<"AssetCategory"> | string
    industry?: EnumIndustryTypeWithAggregatesFilter<"AssetCategory"> | $Enums.IndustryType
    description?: StringNullableWithAggregatesFilter<"AssetCategory"> | string | null
    metadata?: JsonWithAggregatesFilter<"AssetCategory">
    createdAt?: DateTimeWithAggregatesFilter<"AssetCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssetCategory"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    createdAt?: DateTimeFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    createdAt?: DateTimeFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type AssetTypeWhereInput = {
    AND?: AssetTypeWhereInput | AssetTypeWhereInput[]
    OR?: AssetTypeWhereInput[]
    NOT?: AssetTypeWhereInput | AssetTypeWhereInput[]
    id?: UuidFilter<"AssetType"> | string
    tenantId?: UuidFilter<"AssetType"> | string
    categoryId?: UuidNullableFilter<"AssetType"> | string | null
    name?: StringFilter<"AssetType"> | string
    description?: StringNullableFilter<"AssetType"> | string | null
    expectedLifespan?: IntNullableFilter<"AssetType"> | number | null
    maintenanceFrequency?: IntNullableFilter<"AssetType"> | number | null
    criticality?: IntNullableFilter<"AssetType"> | number | null
    customFields?: JsonFilter<"AssetType">
    createdAt?: DateTimeFilter<"AssetType"> | Date | string
    updatedAt?: DateTimeFilter<"AssetType"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    category?: XOR<AssetCategoryNullableScalarRelationFilter, AssetCategoryWhereInput> | null
    assets?: AssetListRelationFilter
  }

  export type AssetTypeOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    expectedLifespan?: SortOrderInput | SortOrder
    maintenanceFrequency?: SortOrderInput | SortOrder
    criticality?: SortOrderInput | SortOrder
    customFields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    category?: AssetCategoryOrderByWithRelationInput
    assets?: AssetOrderByRelationAggregateInput
  }

  export type AssetTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId_name?: AssetTypeTenantIdNameCompoundUniqueInput
    AND?: AssetTypeWhereInput | AssetTypeWhereInput[]
    OR?: AssetTypeWhereInput[]
    NOT?: AssetTypeWhereInput | AssetTypeWhereInput[]
    tenantId?: UuidFilter<"AssetType"> | string
    categoryId?: UuidNullableFilter<"AssetType"> | string | null
    name?: StringFilter<"AssetType"> | string
    description?: StringNullableFilter<"AssetType"> | string | null
    expectedLifespan?: IntNullableFilter<"AssetType"> | number | null
    maintenanceFrequency?: IntNullableFilter<"AssetType"> | number | null
    criticality?: IntNullableFilter<"AssetType"> | number | null
    customFields?: JsonFilter<"AssetType">
    createdAt?: DateTimeFilter<"AssetType"> | Date | string
    updatedAt?: DateTimeFilter<"AssetType"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    category?: XOR<AssetCategoryNullableScalarRelationFilter, AssetCategoryWhereInput> | null
    assets?: AssetListRelationFilter
  }, "id" | "tenantId_name">

  export type AssetTypeOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    expectedLifespan?: SortOrderInput | SortOrder
    maintenanceFrequency?: SortOrderInput | SortOrder
    criticality?: SortOrderInput | SortOrder
    customFields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetTypeCountOrderByAggregateInput
    _avg?: AssetTypeAvgOrderByAggregateInput
    _max?: AssetTypeMaxOrderByAggregateInput
    _min?: AssetTypeMinOrderByAggregateInput
    _sum?: AssetTypeSumOrderByAggregateInput
  }

  export type AssetTypeScalarWhereWithAggregatesInput = {
    AND?: AssetTypeScalarWhereWithAggregatesInput | AssetTypeScalarWhereWithAggregatesInput[]
    OR?: AssetTypeScalarWhereWithAggregatesInput[]
    NOT?: AssetTypeScalarWhereWithAggregatesInput | AssetTypeScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AssetType"> | string
    tenantId?: UuidWithAggregatesFilter<"AssetType"> | string
    categoryId?: UuidNullableWithAggregatesFilter<"AssetType"> | string | null
    name?: StringWithAggregatesFilter<"AssetType"> | string
    description?: StringNullableWithAggregatesFilter<"AssetType"> | string | null
    expectedLifespan?: IntNullableWithAggregatesFilter<"AssetType"> | number | null
    maintenanceFrequency?: IntNullableWithAggregatesFilter<"AssetType"> | number | null
    criticality?: IntNullableWithAggregatesFilter<"AssetType"> | number | null
    customFields?: JsonWithAggregatesFilter<"AssetType">
    createdAt?: DateTimeWithAggregatesFilter<"AssetType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssetType"> | Date | string
  }

  export type AssetWhereInput = {
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    id?: UuidFilter<"Asset"> | string
    tenantId?: UuidFilter<"Asset"> | string
    assetTypeId?: UuidNullableFilter<"Asset"> | string | null
    name?: StringFilter<"Asset"> | string
    location?: StringNullableFilter<"Asset"> | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    serialNumber?: StringNullableFilter<"Asset"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    lastMaintenanceDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    metadata?: JsonFilter<"Asset">
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    assetType?: XOR<AssetTypeNullableScalarRelationFilter, AssetTypeWhereInput> | null
    assetMeters?: AssetMeterListRelationFilter
    maintenance?: MaintenanceAssetsListRelationFilter
    workOrders?: WorkOrderAssetsListRelationFilter
    incidents?: IncidentListRelationFilter
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetTypeId?: SortOrderInput | SortOrder
    name?: SortOrder
    location?: SortOrderInput | SortOrder
    status?: SortOrder
    serialNumber?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    lastMaintenanceDate?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    assetType?: AssetTypeOrderByWithRelationInput
    assetMeters?: AssetMeterOrderByRelationAggregateInput
    maintenance?: MaintenanceAssetsOrderByRelationAggregateInput
    workOrders?: WorkOrderAssetsOrderByRelationAggregateInput
    incidents?: IncidentOrderByRelationAggregateInput
  }

  export type AssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    serialNumber?: string
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    tenantId?: UuidFilter<"Asset"> | string
    assetTypeId?: UuidNullableFilter<"Asset"> | string | null
    name?: StringFilter<"Asset"> | string
    location?: StringNullableFilter<"Asset"> | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    purchaseDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    lastMaintenanceDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    metadata?: JsonFilter<"Asset">
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    assetType?: XOR<AssetTypeNullableScalarRelationFilter, AssetTypeWhereInput> | null
    assetMeters?: AssetMeterListRelationFilter
    maintenance?: MaintenanceAssetsListRelationFilter
    workOrders?: WorkOrderAssetsListRelationFilter
    incidents?: IncidentListRelationFilter
  }, "id" | "serialNumber">

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetTypeId?: SortOrderInput | SortOrder
    name?: SortOrder
    location?: SortOrderInput | SortOrder
    status?: SortOrder
    serialNumber?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    lastMaintenanceDate?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: AssetCountOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    OR?: AssetScalarWhereWithAggregatesInput[]
    NOT?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Asset"> | string
    tenantId?: UuidWithAggregatesFilter<"Asset"> | string
    assetTypeId?: UuidNullableWithAggregatesFilter<"Asset"> | string | null
    name?: StringWithAggregatesFilter<"Asset"> | string
    location?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    status?: EnumAssetStatusWithAggregatesFilter<"Asset"> | $Enums.AssetStatus
    serialNumber?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
    lastMaintenanceDate?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
    metadata?: JsonWithAggregatesFilter<"Asset">
    createdAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
  }

  export type MeterWhereInput = {
    AND?: MeterWhereInput | MeterWhereInput[]
    OR?: MeterWhereInput[]
    NOT?: MeterWhereInput | MeterWhereInput[]
    id?: UuidFilter<"Meter"> | string
    tenantId?: UuidFilter<"Meter"> | string
    name?: StringFilter<"Meter"> | string
    unit?: StringFilter<"Meter"> | string
    createdAt?: DateTimeFilter<"Meter"> | Date | string
    updatedAt?: DateTimeFilter<"Meter"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    assetMeters?: AssetMeterListRelationFilter
    maintenance?: MaintenanceScheduleListRelationFilter
  }

  export type MeterOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    assetMeters?: AssetMeterOrderByRelationAggregateInput
    maintenance?: MaintenanceScheduleOrderByRelationAggregateInput
  }

  export type MeterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MeterWhereInput | MeterWhereInput[]
    OR?: MeterWhereInput[]
    NOT?: MeterWhereInput | MeterWhereInput[]
    tenantId?: UuidFilter<"Meter"> | string
    name?: StringFilter<"Meter"> | string
    unit?: StringFilter<"Meter"> | string
    createdAt?: DateTimeFilter<"Meter"> | Date | string
    updatedAt?: DateTimeFilter<"Meter"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    assetMeters?: AssetMeterListRelationFilter
    maintenance?: MaintenanceScheduleListRelationFilter
  }, "id">

  export type MeterOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeterCountOrderByAggregateInput
    _max?: MeterMaxOrderByAggregateInput
    _min?: MeterMinOrderByAggregateInput
  }

  export type MeterScalarWhereWithAggregatesInput = {
    AND?: MeterScalarWhereWithAggregatesInput | MeterScalarWhereWithAggregatesInput[]
    OR?: MeterScalarWhereWithAggregatesInput[]
    NOT?: MeterScalarWhereWithAggregatesInput | MeterScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Meter"> | string
    tenantId?: UuidWithAggregatesFilter<"Meter"> | string
    name?: StringWithAggregatesFilter<"Meter"> | string
    unit?: StringWithAggregatesFilter<"Meter"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Meter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Meter"> | Date | string
  }

  export type AssetMeterWhereInput = {
    AND?: AssetMeterWhereInput | AssetMeterWhereInput[]
    OR?: AssetMeterWhereInput[]
    NOT?: AssetMeterWhereInput | AssetMeterWhereInput[]
    id?: UuidFilter<"AssetMeter"> | string
    assetId?: UuidFilter<"AssetMeter"> | string
    meterId?: UuidFilter<"AssetMeter"> | string
    initialReading?: DecimalFilter<"AssetMeter"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"AssetMeter"> | Date | string
    updatedAt?: DateTimeFilter<"AssetMeter"> | Date | string
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
    meter?: XOR<MeterScalarRelationFilter, MeterWhereInput>
    readings?: MeterReadingListRelationFilter
  }

  export type AssetMeterOrderByWithRelationInput = {
    id?: SortOrder
    assetId?: SortOrder
    meterId?: SortOrder
    initialReading?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    meter?: MeterOrderByWithRelationInput
    readings?: MeterReadingOrderByRelationAggregateInput
  }

  export type AssetMeterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    assetId_meterId?: AssetMeterAssetIdMeterIdCompoundUniqueInput
    AND?: AssetMeterWhereInput | AssetMeterWhereInput[]
    OR?: AssetMeterWhereInput[]
    NOT?: AssetMeterWhereInput | AssetMeterWhereInput[]
    assetId?: UuidFilter<"AssetMeter"> | string
    meterId?: UuidFilter<"AssetMeter"> | string
    initialReading?: DecimalFilter<"AssetMeter"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"AssetMeter"> | Date | string
    updatedAt?: DateTimeFilter<"AssetMeter"> | Date | string
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
    meter?: XOR<MeterScalarRelationFilter, MeterWhereInput>
    readings?: MeterReadingListRelationFilter
  }, "id" | "assetId_meterId">

  export type AssetMeterOrderByWithAggregationInput = {
    id?: SortOrder
    assetId?: SortOrder
    meterId?: SortOrder
    initialReading?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetMeterCountOrderByAggregateInput
    _avg?: AssetMeterAvgOrderByAggregateInput
    _max?: AssetMeterMaxOrderByAggregateInput
    _min?: AssetMeterMinOrderByAggregateInput
    _sum?: AssetMeterSumOrderByAggregateInput
  }

  export type AssetMeterScalarWhereWithAggregatesInput = {
    AND?: AssetMeterScalarWhereWithAggregatesInput | AssetMeterScalarWhereWithAggregatesInput[]
    OR?: AssetMeterScalarWhereWithAggregatesInput[]
    NOT?: AssetMeterScalarWhereWithAggregatesInput | AssetMeterScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AssetMeter"> | string
    assetId?: UuidWithAggregatesFilter<"AssetMeter"> | string
    meterId?: UuidWithAggregatesFilter<"AssetMeter"> | string
    initialReading?: DecimalWithAggregatesFilter<"AssetMeter"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"AssetMeter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssetMeter"> | Date | string
  }

  export type MeterReadingWhereInput = {
    AND?: MeterReadingWhereInput | MeterReadingWhereInput[]
    OR?: MeterReadingWhereInput[]
    NOT?: MeterReadingWhereInput | MeterReadingWhereInput[]
    id?: UuidFilter<"MeterReading"> | string
    assetMeterId?: UuidFilter<"MeterReading"> | string
    readingValue?: DecimalFilter<"MeterReading"> | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFilter<"MeterReading"> | Date | string
    createdAt?: DateTimeFilter<"MeterReading"> | Date | string
    assetMeter?: XOR<AssetMeterScalarRelationFilter, AssetMeterWhereInput>
  }

  export type MeterReadingOrderByWithRelationInput = {
    id?: SortOrder
    assetMeterId?: SortOrder
    readingValue?: SortOrder
    readingDate?: SortOrder
    createdAt?: SortOrder
    assetMeter?: AssetMeterOrderByWithRelationInput
  }

  export type MeterReadingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MeterReadingWhereInput | MeterReadingWhereInput[]
    OR?: MeterReadingWhereInput[]
    NOT?: MeterReadingWhereInput | MeterReadingWhereInput[]
    assetMeterId?: UuidFilter<"MeterReading"> | string
    readingValue?: DecimalFilter<"MeterReading"> | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFilter<"MeterReading"> | Date | string
    createdAt?: DateTimeFilter<"MeterReading"> | Date | string
    assetMeter?: XOR<AssetMeterScalarRelationFilter, AssetMeterWhereInput>
  }, "id">

  export type MeterReadingOrderByWithAggregationInput = {
    id?: SortOrder
    assetMeterId?: SortOrder
    readingValue?: SortOrder
    readingDate?: SortOrder
    createdAt?: SortOrder
    _count?: MeterReadingCountOrderByAggregateInput
    _avg?: MeterReadingAvgOrderByAggregateInput
    _max?: MeterReadingMaxOrderByAggregateInput
    _min?: MeterReadingMinOrderByAggregateInput
    _sum?: MeterReadingSumOrderByAggregateInput
  }

  export type MeterReadingScalarWhereWithAggregatesInput = {
    AND?: MeterReadingScalarWhereWithAggregatesInput | MeterReadingScalarWhereWithAggregatesInput[]
    OR?: MeterReadingScalarWhereWithAggregatesInput[]
    NOT?: MeterReadingScalarWhereWithAggregatesInput | MeterReadingScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"MeterReading"> | string
    assetMeterId?: UuidWithAggregatesFilter<"MeterReading"> | string
    readingValue?: DecimalWithAggregatesFilter<"MeterReading"> | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeWithAggregatesFilter<"MeterReading"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MeterReading"> | Date | string
  }

  export type MaintenanceScheduleWhereInput = {
    AND?: MaintenanceScheduleWhereInput | MaintenanceScheduleWhereInput[]
    OR?: MaintenanceScheduleWhereInput[]
    NOT?: MaintenanceScheduleWhereInput | MaintenanceScheduleWhereInput[]
    id?: UuidFilter<"MaintenanceSchedule"> | string
    tenantId?: UuidFilter<"MaintenanceSchedule"> | string
    description?: StringFilter<"MaintenanceSchedule"> | string
    triggerType?: EnumMaintenanceTriggerFilter<"MaintenanceSchedule"> | $Enums.MaintenanceTrigger
    recurrence?: JsonNullableFilter<"MaintenanceSchedule">
    meterId?: UuidNullableFilter<"MaintenanceSchedule"> | string | null
    thresholdValue?: DecimalNullableFilter<"MaintenanceSchedule"> | Decimal | DecimalJsLike | number | string | null
    nextRun?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
    lastRun?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceSchedule"> | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFilter<"MaintenanceSchedule"> | $Enums.CallPriority
    createdAt?: DateTimeFilter<"MaintenanceSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceSchedule"> | Date | string
    deletedAt?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    meter?: XOR<MeterNullableScalarRelationFilter, MeterWhereInput> | null
    assignments?: MaintenanceAssignmentListRelationFilter
    assets?: MaintenanceAssetsListRelationFilter
    workOrders?: WorkOrderListRelationFilter
  }

  export type MaintenanceScheduleOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    description?: SortOrder
    triggerType?: SortOrder
    recurrence?: SortOrderInput | SortOrder
    meterId?: SortOrderInput | SortOrder
    thresholdValue?: SortOrderInput | SortOrder
    nextRun?: SortOrderInput | SortOrder
    lastRun?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    meter?: MeterOrderByWithRelationInput
    assignments?: MaintenanceAssignmentOrderByRelationAggregateInput
    assets?: MaintenanceAssetsOrderByRelationAggregateInput
    workOrders?: WorkOrderOrderByRelationAggregateInput
  }

  export type MaintenanceScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MaintenanceScheduleWhereInput | MaintenanceScheduleWhereInput[]
    OR?: MaintenanceScheduleWhereInput[]
    NOT?: MaintenanceScheduleWhereInput | MaintenanceScheduleWhereInput[]
    tenantId?: UuidFilter<"MaintenanceSchedule"> | string
    description?: StringFilter<"MaintenanceSchedule"> | string
    triggerType?: EnumMaintenanceTriggerFilter<"MaintenanceSchedule"> | $Enums.MaintenanceTrigger
    recurrence?: JsonNullableFilter<"MaintenanceSchedule">
    meterId?: UuidNullableFilter<"MaintenanceSchedule"> | string | null
    thresholdValue?: DecimalNullableFilter<"MaintenanceSchedule"> | Decimal | DecimalJsLike | number | string | null
    nextRun?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
    lastRun?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceSchedule"> | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFilter<"MaintenanceSchedule"> | $Enums.CallPriority
    createdAt?: DateTimeFilter<"MaintenanceSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceSchedule"> | Date | string
    deletedAt?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    meter?: XOR<MeterNullableScalarRelationFilter, MeterWhereInput> | null
    assignments?: MaintenanceAssignmentListRelationFilter
    assets?: MaintenanceAssetsListRelationFilter
    workOrders?: WorkOrderListRelationFilter
  }, "id">

  export type MaintenanceScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    description?: SortOrder
    triggerType?: SortOrder
    recurrence?: SortOrderInput | SortOrder
    meterId?: SortOrderInput | SortOrder
    thresholdValue?: SortOrderInput | SortOrder
    nextRun?: SortOrderInput | SortOrder
    lastRun?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: MaintenanceScheduleCountOrderByAggregateInput
    _avg?: MaintenanceScheduleAvgOrderByAggregateInput
    _max?: MaintenanceScheduleMaxOrderByAggregateInput
    _min?: MaintenanceScheduleMinOrderByAggregateInput
    _sum?: MaintenanceScheduleSumOrderByAggregateInput
  }

  export type MaintenanceScheduleScalarWhereWithAggregatesInput = {
    AND?: MaintenanceScheduleScalarWhereWithAggregatesInput | MaintenanceScheduleScalarWhereWithAggregatesInput[]
    OR?: MaintenanceScheduleScalarWhereWithAggregatesInput[]
    NOT?: MaintenanceScheduleScalarWhereWithAggregatesInput | MaintenanceScheduleScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"MaintenanceSchedule"> | string
    tenantId?: UuidWithAggregatesFilter<"MaintenanceSchedule"> | string
    description?: StringWithAggregatesFilter<"MaintenanceSchedule"> | string
    triggerType?: EnumMaintenanceTriggerWithAggregatesFilter<"MaintenanceSchedule"> | $Enums.MaintenanceTrigger
    recurrence?: JsonNullableWithAggregatesFilter<"MaintenanceSchedule">
    meterId?: UuidNullableWithAggregatesFilter<"MaintenanceSchedule"> | string | null
    thresholdValue?: DecimalNullableWithAggregatesFilter<"MaintenanceSchedule"> | Decimal | DecimalJsLike | number | string | null
    nextRun?: DateTimeNullableWithAggregatesFilter<"MaintenanceSchedule"> | Date | string | null
    lastRun?: DateTimeNullableWithAggregatesFilter<"MaintenanceSchedule"> | Date | string | null
    status?: EnumMaintenanceStatusWithAggregatesFilter<"MaintenanceSchedule"> | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityWithAggregatesFilter<"MaintenanceSchedule"> | $Enums.CallPriority
    createdAt?: DateTimeWithAggregatesFilter<"MaintenanceSchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MaintenanceSchedule"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"MaintenanceSchedule"> | Date | string | null
  }

  export type MaintenanceAssignmentWhereInput = {
    AND?: MaintenanceAssignmentWhereInput | MaintenanceAssignmentWhereInput[]
    OR?: MaintenanceAssignmentWhereInput[]
    NOT?: MaintenanceAssignmentWhereInput | MaintenanceAssignmentWhereInput[]
    maintenanceId?: UuidFilter<"MaintenanceAssignment"> | string
    userId?: UuidFilter<"MaintenanceAssignment"> | string
    maintenance?: XOR<MaintenanceScheduleScalarRelationFilter, MaintenanceScheduleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MaintenanceAssignmentOrderByWithRelationInput = {
    maintenanceId?: SortOrder
    userId?: SortOrder
    maintenance?: MaintenanceScheduleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MaintenanceAssignmentWhereUniqueInput = Prisma.AtLeast<{
    maintenanceId_userId?: MaintenanceAssignmentMaintenanceIdUserIdCompoundUniqueInput
    AND?: MaintenanceAssignmentWhereInput | MaintenanceAssignmentWhereInput[]
    OR?: MaintenanceAssignmentWhereInput[]
    NOT?: MaintenanceAssignmentWhereInput | MaintenanceAssignmentWhereInput[]
    maintenanceId?: UuidFilter<"MaintenanceAssignment"> | string
    userId?: UuidFilter<"MaintenanceAssignment"> | string
    maintenance?: XOR<MaintenanceScheduleScalarRelationFilter, MaintenanceScheduleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "maintenanceId_userId">

  export type MaintenanceAssignmentOrderByWithAggregationInput = {
    maintenanceId?: SortOrder
    userId?: SortOrder
    _count?: MaintenanceAssignmentCountOrderByAggregateInput
    _max?: MaintenanceAssignmentMaxOrderByAggregateInput
    _min?: MaintenanceAssignmentMinOrderByAggregateInput
  }

  export type MaintenanceAssignmentScalarWhereWithAggregatesInput = {
    AND?: MaintenanceAssignmentScalarWhereWithAggregatesInput | MaintenanceAssignmentScalarWhereWithAggregatesInput[]
    OR?: MaintenanceAssignmentScalarWhereWithAggregatesInput[]
    NOT?: MaintenanceAssignmentScalarWhereWithAggregatesInput | MaintenanceAssignmentScalarWhereWithAggregatesInput[]
    maintenanceId?: UuidWithAggregatesFilter<"MaintenanceAssignment"> | string
    userId?: UuidWithAggregatesFilter<"MaintenanceAssignment"> | string
  }

  export type MaintenanceAssetsWhereInput = {
    AND?: MaintenanceAssetsWhereInput | MaintenanceAssetsWhereInput[]
    OR?: MaintenanceAssetsWhereInput[]
    NOT?: MaintenanceAssetsWhereInput | MaintenanceAssetsWhereInput[]
    maintenanceId?: UuidFilter<"MaintenanceAssets"> | string
    assetId?: UuidFilter<"MaintenanceAssets"> | string
    maintenance?: XOR<MaintenanceScheduleScalarRelationFilter, MaintenanceScheduleWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }

  export type MaintenanceAssetsOrderByWithRelationInput = {
    maintenanceId?: SortOrder
    assetId?: SortOrder
    maintenance?: MaintenanceScheduleOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
  }

  export type MaintenanceAssetsWhereUniqueInput = Prisma.AtLeast<{
    maintenanceId_assetId?: MaintenanceAssetsMaintenanceIdAssetIdCompoundUniqueInput
    AND?: MaintenanceAssetsWhereInput | MaintenanceAssetsWhereInput[]
    OR?: MaintenanceAssetsWhereInput[]
    NOT?: MaintenanceAssetsWhereInput | MaintenanceAssetsWhereInput[]
    maintenanceId?: UuidFilter<"MaintenanceAssets"> | string
    assetId?: UuidFilter<"MaintenanceAssets"> | string
    maintenance?: XOR<MaintenanceScheduleScalarRelationFilter, MaintenanceScheduleWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }, "maintenanceId_assetId">

  export type MaintenanceAssetsOrderByWithAggregationInput = {
    maintenanceId?: SortOrder
    assetId?: SortOrder
    _count?: MaintenanceAssetsCountOrderByAggregateInput
    _max?: MaintenanceAssetsMaxOrderByAggregateInput
    _min?: MaintenanceAssetsMinOrderByAggregateInput
  }

  export type MaintenanceAssetsScalarWhereWithAggregatesInput = {
    AND?: MaintenanceAssetsScalarWhereWithAggregatesInput | MaintenanceAssetsScalarWhereWithAggregatesInput[]
    OR?: MaintenanceAssetsScalarWhereWithAggregatesInput[]
    NOT?: MaintenanceAssetsScalarWhereWithAggregatesInput | MaintenanceAssetsScalarWhereWithAggregatesInput[]
    maintenanceId?: UuidWithAggregatesFilter<"MaintenanceAssets"> | string
    assetId?: UuidWithAggregatesFilter<"MaintenanceAssets"> | string
  }

  export type WorkOrderWhereInput = {
    AND?: WorkOrderWhereInput | WorkOrderWhereInput[]
    OR?: WorkOrderWhereInput[]
    NOT?: WorkOrderWhereInput | WorkOrderWhereInput[]
    id?: UuidFilter<"WorkOrder"> | string
    tenantId?: UuidFilter<"WorkOrder"> | string
    maintenanceId?: UuidNullableFilter<"WorkOrder"> | string | null
    description?: StringFilter<"WorkOrder"> | string
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFilter<"WorkOrder"> | $Enums.CallPriority
    dueDate?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    deletedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    maintenance?: XOR<MaintenanceScheduleNullableScalarRelationFilter, MaintenanceScheduleWhereInput> | null
    assignments?: WorkOrderAssignmentListRelationFilter
    assets?: WorkOrderAssetsListRelationFilter
    parts?: WorkOrderPartsListRelationFilter
    labor?: WorkOrderLaborListRelationFilter
    logs?: WorkOrderLogListRelationFilter
  }

  export type WorkOrderOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    maintenanceId?: SortOrderInput | SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    maintenance?: MaintenanceScheduleOrderByWithRelationInput
    assignments?: WorkOrderAssignmentOrderByRelationAggregateInput
    assets?: WorkOrderAssetsOrderByRelationAggregateInput
    parts?: WorkOrderPartsOrderByRelationAggregateInput
    labor?: WorkOrderLaborOrderByRelationAggregateInput
    logs?: WorkOrderLogOrderByRelationAggregateInput
  }

  export type WorkOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkOrderWhereInput | WorkOrderWhereInput[]
    OR?: WorkOrderWhereInput[]
    NOT?: WorkOrderWhereInput | WorkOrderWhereInput[]
    tenantId?: UuidFilter<"WorkOrder"> | string
    maintenanceId?: UuidNullableFilter<"WorkOrder"> | string | null
    description?: StringFilter<"WorkOrder"> | string
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFilter<"WorkOrder"> | $Enums.CallPriority
    dueDate?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    deletedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    maintenance?: XOR<MaintenanceScheduleNullableScalarRelationFilter, MaintenanceScheduleWhereInput> | null
    assignments?: WorkOrderAssignmentListRelationFilter
    assets?: WorkOrderAssetsListRelationFilter
    parts?: WorkOrderPartsListRelationFilter
    labor?: WorkOrderLaborListRelationFilter
    logs?: WorkOrderLogListRelationFilter
  }, "id">

  export type WorkOrderOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    maintenanceId?: SortOrderInput | SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: WorkOrderCountOrderByAggregateInput
    _max?: WorkOrderMaxOrderByAggregateInput
    _min?: WorkOrderMinOrderByAggregateInput
  }

  export type WorkOrderScalarWhereWithAggregatesInput = {
    AND?: WorkOrderScalarWhereWithAggregatesInput | WorkOrderScalarWhereWithAggregatesInput[]
    OR?: WorkOrderScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderScalarWhereWithAggregatesInput | WorkOrderScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"WorkOrder"> | string
    tenantId?: UuidWithAggregatesFilter<"WorkOrder"> | string
    maintenanceId?: UuidNullableWithAggregatesFilter<"WorkOrder"> | string | null
    description?: StringWithAggregatesFilter<"WorkOrder"> | string
    status?: EnumWorkOrderStatusWithAggregatesFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityWithAggregatesFilter<"WorkOrder"> | $Enums.CallPriority
    dueDate?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    startedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
  }

  export type WorkOrderAssignmentWhereInput = {
    AND?: WorkOrderAssignmentWhereInput | WorkOrderAssignmentWhereInput[]
    OR?: WorkOrderAssignmentWhereInput[]
    NOT?: WorkOrderAssignmentWhereInput | WorkOrderAssignmentWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderAssignment"> | string
    userId?: UuidFilter<"WorkOrderAssignment"> | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WorkOrderAssignmentOrderByWithRelationInput = {
    workOrderId?: SortOrder
    userId?: SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type WorkOrderAssignmentWhereUniqueInput = Prisma.AtLeast<{
    workOrderId_userId?: WorkOrderAssignmentWorkOrderIdUserIdCompoundUniqueInput
    AND?: WorkOrderAssignmentWhereInput | WorkOrderAssignmentWhereInput[]
    OR?: WorkOrderAssignmentWhereInput[]
    NOT?: WorkOrderAssignmentWhereInput | WorkOrderAssignmentWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderAssignment"> | string
    userId?: UuidFilter<"WorkOrderAssignment"> | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "workOrderId_userId">

  export type WorkOrderAssignmentOrderByWithAggregationInput = {
    workOrderId?: SortOrder
    userId?: SortOrder
    _count?: WorkOrderAssignmentCountOrderByAggregateInput
    _max?: WorkOrderAssignmentMaxOrderByAggregateInput
    _min?: WorkOrderAssignmentMinOrderByAggregateInput
  }

  export type WorkOrderAssignmentScalarWhereWithAggregatesInput = {
    AND?: WorkOrderAssignmentScalarWhereWithAggregatesInput | WorkOrderAssignmentScalarWhereWithAggregatesInput[]
    OR?: WorkOrderAssignmentScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderAssignmentScalarWhereWithAggregatesInput | WorkOrderAssignmentScalarWhereWithAggregatesInput[]
    workOrderId?: UuidWithAggregatesFilter<"WorkOrderAssignment"> | string
    userId?: UuidWithAggregatesFilter<"WorkOrderAssignment"> | string
  }

  export type WorkOrderAssetsWhereInput = {
    AND?: WorkOrderAssetsWhereInput | WorkOrderAssetsWhereInput[]
    OR?: WorkOrderAssetsWhereInput[]
    NOT?: WorkOrderAssetsWhereInput | WorkOrderAssetsWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderAssets"> | string
    assetId?: UuidFilter<"WorkOrderAssets"> | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }

  export type WorkOrderAssetsOrderByWithRelationInput = {
    workOrderId?: SortOrder
    assetId?: SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
  }

  export type WorkOrderAssetsWhereUniqueInput = Prisma.AtLeast<{
    workOrderId_assetId?: WorkOrderAssetsWorkOrderIdAssetIdCompoundUniqueInput
    AND?: WorkOrderAssetsWhereInput | WorkOrderAssetsWhereInput[]
    OR?: WorkOrderAssetsWhereInput[]
    NOT?: WorkOrderAssetsWhereInput | WorkOrderAssetsWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderAssets"> | string
    assetId?: UuidFilter<"WorkOrderAssets"> | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }, "workOrderId_assetId">

  export type WorkOrderAssetsOrderByWithAggregationInput = {
    workOrderId?: SortOrder
    assetId?: SortOrder
    _count?: WorkOrderAssetsCountOrderByAggregateInput
    _max?: WorkOrderAssetsMaxOrderByAggregateInput
    _min?: WorkOrderAssetsMinOrderByAggregateInput
  }

  export type WorkOrderAssetsScalarWhereWithAggregatesInput = {
    AND?: WorkOrderAssetsScalarWhereWithAggregatesInput | WorkOrderAssetsScalarWhereWithAggregatesInput[]
    OR?: WorkOrderAssetsScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderAssetsScalarWhereWithAggregatesInput | WorkOrderAssetsScalarWhereWithAggregatesInput[]
    workOrderId?: UuidWithAggregatesFilter<"WorkOrderAssets"> | string
    assetId?: UuidWithAggregatesFilter<"WorkOrderAssets"> | string
  }

  export type WorkOrderPartsWhereInput = {
    AND?: WorkOrderPartsWhereInput | WorkOrderPartsWhereInput[]
    OR?: WorkOrderPartsWhereInput[]
    NOT?: WorkOrderPartsWhereInput | WorkOrderPartsWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderParts"> | string
    partId?: UuidFilter<"WorkOrderParts"> | string
    quantityUsed?: IntFilter<"WorkOrderParts"> | number
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    part?: XOR<PartScalarRelationFilter, PartWhereInput>
  }

  export type WorkOrderPartsOrderByWithRelationInput = {
    workOrderId?: SortOrder
    partId?: SortOrder
    quantityUsed?: SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
    part?: PartOrderByWithRelationInput
  }

  export type WorkOrderPartsWhereUniqueInput = Prisma.AtLeast<{
    workOrderId_partId?: WorkOrderPartsWorkOrderIdPartIdCompoundUniqueInput
    AND?: WorkOrderPartsWhereInput | WorkOrderPartsWhereInput[]
    OR?: WorkOrderPartsWhereInput[]
    NOT?: WorkOrderPartsWhereInput | WorkOrderPartsWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderParts"> | string
    partId?: UuidFilter<"WorkOrderParts"> | string
    quantityUsed?: IntFilter<"WorkOrderParts"> | number
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    part?: XOR<PartScalarRelationFilter, PartWhereInput>
  }, "workOrderId_partId">

  export type WorkOrderPartsOrderByWithAggregationInput = {
    workOrderId?: SortOrder
    partId?: SortOrder
    quantityUsed?: SortOrder
    _count?: WorkOrderPartsCountOrderByAggregateInput
    _avg?: WorkOrderPartsAvgOrderByAggregateInput
    _max?: WorkOrderPartsMaxOrderByAggregateInput
    _min?: WorkOrderPartsMinOrderByAggregateInput
    _sum?: WorkOrderPartsSumOrderByAggregateInput
  }

  export type WorkOrderPartsScalarWhereWithAggregatesInput = {
    AND?: WorkOrderPartsScalarWhereWithAggregatesInput | WorkOrderPartsScalarWhereWithAggregatesInput[]
    OR?: WorkOrderPartsScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderPartsScalarWhereWithAggregatesInput | WorkOrderPartsScalarWhereWithAggregatesInput[]
    workOrderId?: UuidWithAggregatesFilter<"WorkOrderParts"> | string
    partId?: UuidWithAggregatesFilter<"WorkOrderParts"> | string
    quantityUsed?: IntWithAggregatesFilter<"WorkOrderParts"> | number
  }

  export type PartWhereInput = {
    AND?: PartWhereInput | PartWhereInput[]
    OR?: PartWhereInput[]
    NOT?: PartWhereInput | PartWhereInput[]
    id?: UuidFilter<"Part"> | string
    tenantId?: UuidFilter<"Part"> | string
    name?: StringFilter<"Part"> | string
    partNumber?: StringNullableFilter<"Part"> | string | null
    description?: StringNullableFilter<"Part"> | string | null
    quantity?: IntFilter<"Part"> | number
    minStock?: IntFilter<"Part"> | number
    unitCost?: DecimalNullableFilter<"Part"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Part"> | Date | string
    updatedAt?: DateTimeFilter<"Part"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Part"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    vendors?: PartVendorListRelationFilter
    workOrders?: WorkOrderPartsListRelationFilter
  }

  export type PartOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    partNumber?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    quantity?: SortOrder
    minStock?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    vendors?: PartVendorOrderByRelationAggregateInput
    workOrders?: WorkOrderPartsOrderByRelationAggregateInput
  }

  export type PartWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    partNumber?: string
    AND?: PartWhereInput | PartWhereInput[]
    OR?: PartWhereInput[]
    NOT?: PartWhereInput | PartWhereInput[]
    tenantId?: UuidFilter<"Part"> | string
    name?: StringFilter<"Part"> | string
    description?: StringNullableFilter<"Part"> | string | null
    quantity?: IntFilter<"Part"> | number
    minStock?: IntFilter<"Part"> | number
    unitCost?: DecimalNullableFilter<"Part"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Part"> | Date | string
    updatedAt?: DateTimeFilter<"Part"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Part"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    vendors?: PartVendorListRelationFilter
    workOrders?: WorkOrderPartsListRelationFilter
  }, "id" | "partNumber">

  export type PartOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    partNumber?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    quantity?: SortOrder
    minStock?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: PartCountOrderByAggregateInput
    _avg?: PartAvgOrderByAggregateInput
    _max?: PartMaxOrderByAggregateInput
    _min?: PartMinOrderByAggregateInput
    _sum?: PartSumOrderByAggregateInput
  }

  export type PartScalarWhereWithAggregatesInput = {
    AND?: PartScalarWhereWithAggregatesInput | PartScalarWhereWithAggregatesInput[]
    OR?: PartScalarWhereWithAggregatesInput[]
    NOT?: PartScalarWhereWithAggregatesInput | PartScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Part"> | string
    tenantId?: UuidWithAggregatesFilter<"Part"> | string
    name?: StringWithAggregatesFilter<"Part"> | string
    partNumber?: StringNullableWithAggregatesFilter<"Part"> | string | null
    description?: StringNullableWithAggregatesFilter<"Part"> | string | null
    quantity?: IntWithAggregatesFilter<"Part"> | number
    minStock?: IntWithAggregatesFilter<"Part"> | number
    unitCost?: DecimalNullableWithAggregatesFilter<"Part"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Part"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Part"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Part"> | Date | string | null
  }

  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: UuidFilter<"Vendor"> | string
    tenantId?: UuidFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    contactInfo?: JsonNullableFilter<"Vendor">
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Vendor"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    parts?: PartVendorListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    contactInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    parts?: PartVendorOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    tenantId?: UuidFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    contactInfo?: JsonNullableFilter<"Vendor">
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Vendor"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    parts?: PartVendorListRelationFilter
  }, "id">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    contactInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: VendorCountOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Vendor"> | string
    tenantId?: UuidWithAggregatesFilter<"Vendor"> | string
    name?: StringWithAggregatesFilter<"Vendor"> | string
    contactInfo?: JsonNullableWithAggregatesFilter<"Vendor">
    createdAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Vendor"> | Date | string | null
  }

  export type PartVendorWhereInput = {
    AND?: PartVendorWhereInput | PartVendorWhereInput[]
    OR?: PartVendorWhereInput[]
    NOT?: PartVendorWhereInput | PartVendorWhereInput[]
    partId?: UuidFilter<"PartVendor"> | string
    vendorId?: UuidFilter<"PartVendor"> | string
    cost?: DecimalFilter<"PartVendor"> | Decimal | DecimalJsLike | number | string
    leadTime?: IntNullableFilter<"PartVendor"> | number | null
    part?: XOR<PartScalarRelationFilter, PartWhereInput>
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
  }

  export type PartVendorOrderByWithRelationInput = {
    partId?: SortOrder
    vendorId?: SortOrder
    cost?: SortOrder
    leadTime?: SortOrderInput | SortOrder
    part?: PartOrderByWithRelationInput
    vendor?: VendorOrderByWithRelationInput
  }

  export type PartVendorWhereUniqueInput = Prisma.AtLeast<{
    partId_vendorId?: PartVendorPartIdVendorIdCompoundUniqueInput
    AND?: PartVendorWhereInput | PartVendorWhereInput[]
    OR?: PartVendorWhereInput[]
    NOT?: PartVendorWhereInput | PartVendorWhereInput[]
    partId?: UuidFilter<"PartVendor"> | string
    vendorId?: UuidFilter<"PartVendor"> | string
    cost?: DecimalFilter<"PartVendor"> | Decimal | DecimalJsLike | number | string
    leadTime?: IntNullableFilter<"PartVendor"> | number | null
    part?: XOR<PartScalarRelationFilter, PartWhereInput>
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
  }, "partId_vendorId">

  export type PartVendorOrderByWithAggregationInput = {
    partId?: SortOrder
    vendorId?: SortOrder
    cost?: SortOrder
    leadTime?: SortOrderInput | SortOrder
    _count?: PartVendorCountOrderByAggregateInput
    _avg?: PartVendorAvgOrderByAggregateInput
    _max?: PartVendorMaxOrderByAggregateInput
    _min?: PartVendorMinOrderByAggregateInput
    _sum?: PartVendorSumOrderByAggregateInput
  }

  export type PartVendorScalarWhereWithAggregatesInput = {
    AND?: PartVendorScalarWhereWithAggregatesInput | PartVendorScalarWhereWithAggregatesInput[]
    OR?: PartVendorScalarWhereWithAggregatesInput[]
    NOT?: PartVendorScalarWhereWithAggregatesInput | PartVendorScalarWhereWithAggregatesInput[]
    partId?: UuidWithAggregatesFilter<"PartVendor"> | string
    vendorId?: UuidWithAggregatesFilter<"PartVendor"> | string
    cost?: DecimalWithAggregatesFilter<"PartVendor"> | Decimal | DecimalJsLike | number | string
    leadTime?: IntNullableWithAggregatesFilter<"PartVendor"> | number | null
  }

  export type WorkOrderLaborWhereInput = {
    AND?: WorkOrderLaborWhereInput | WorkOrderLaborWhereInput[]
    OR?: WorkOrderLaborWhereInput[]
    NOT?: WorkOrderLaborWhereInput | WorkOrderLaborWhereInput[]
    id?: UuidFilter<"WorkOrderLabor"> | string
    workOrderId?: UuidFilter<"WorkOrderLabor"> | string
    userId?: UuidNullableFilter<"WorkOrderLabor"> | string | null
    hours?: DecimalFilter<"WorkOrderLabor"> | Decimal | DecimalJsLike | number | string
    taskDescription?: StringNullableFilter<"WorkOrderLabor"> | string | null
    createdAt?: DateTimeFilter<"WorkOrderLabor"> | Date | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type WorkOrderLaborOrderByWithRelationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrderInput | SortOrder
    hours?: SortOrder
    taskDescription?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type WorkOrderLaborWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkOrderLaborWhereInput | WorkOrderLaborWhereInput[]
    OR?: WorkOrderLaborWhereInput[]
    NOT?: WorkOrderLaborWhereInput | WorkOrderLaborWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderLabor"> | string
    userId?: UuidNullableFilter<"WorkOrderLabor"> | string | null
    hours?: DecimalFilter<"WorkOrderLabor"> | Decimal | DecimalJsLike | number | string
    taskDescription?: StringNullableFilter<"WorkOrderLabor"> | string | null
    createdAt?: DateTimeFilter<"WorkOrderLabor"> | Date | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type WorkOrderLaborOrderByWithAggregationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrderInput | SortOrder
    hours?: SortOrder
    taskDescription?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WorkOrderLaborCountOrderByAggregateInput
    _avg?: WorkOrderLaborAvgOrderByAggregateInput
    _max?: WorkOrderLaborMaxOrderByAggregateInput
    _min?: WorkOrderLaborMinOrderByAggregateInput
    _sum?: WorkOrderLaborSumOrderByAggregateInput
  }

  export type WorkOrderLaborScalarWhereWithAggregatesInput = {
    AND?: WorkOrderLaborScalarWhereWithAggregatesInput | WorkOrderLaborScalarWhereWithAggregatesInput[]
    OR?: WorkOrderLaborScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderLaborScalarWhereWithAggregatesInput | WorkOrderLaborScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"WorkOrderLabor"> | string
    workOrderId?: UuidWithAggregatesFilter<"WorkOrderLabor"> | string
    userId?: UuidNullableWithAggregatesFilter<"WorkOrderLabor"> | string | null
    hours?: DecimalWithAggregatesFilter<"WorkOrderLabor"> | Decimal | DecimalJsLike | number | string
    taskDescription?: StringNullableWithAggregatesFilter<"WorkOrderLabor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WorkOrderLabor"> | Date | string
  }

  export type IncidentWhereInput = {
    AND?: IncidentWhereInput | IncidentWhereInput[]
    OR?: IncidentWhereInput[]
    NOT?: IncidentWhereInput | IncidentWhereInput[]
    id?: UuidFilter<"Incident"> | string
    tenantId?: UuidFilter<"Incident"> | string
    assetId?: UuidNullableFilter<"Incident"> | string | null
    reportedById?: UuidNullableFilter<"Incident"> | string | null
    description?: StringFilter<"Incident"> | string
    status?: EnumCallStatusFilter<"Incident"> | $Enums.CallStatus
    priority?: EnumCallPriorityFilter<"Incident"> | $Enums.CallPriority
    reportedAt?: DateTimeFilter<"Incident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
    createdAt?: DateTimeFilter<"Incident"> | Date | string
    updatedAt?: DateTimeFilter<"Incident"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    reportedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type IncidentOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    reportedById?: SortOrderInput | SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
    reportedBy?: UserOrderByWithRelationInput
  }

  export type IncidentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IncidentWhereInput | IncidentWhereInput[]
    OR?: IncidentWhereInput[]
    NOT?: IncidentWhereInput | IncidentWhereInput[]
    tenantId?: UuidFilter<"Incident"> | string
    assetId?: UuidNullableFilter<"Incident"> | string | null
    reportedById?: UuidNullableFilter<"Incident"> | string | null
    description?: StringFilter<"Incident"> | string
    status?: EnumCallStatusFilter<"Incident"> | $Enums.CallStatus
    priority?: EnumCallPriorityFilter<"Incident"> | $Enums.CallPriority
    reportedAt?: DateTimeFilter<"Incident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
    createdAt?: DateTimeFilter<"Incident"> | Date | string
    updatedAt?: DateTimeFilter<"Incident"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    reportedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type IncidentOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    reportedById?: SortOrderInput | SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: IncidentCountOrderByAggregateInput
    _max?: IncidentMaxOrderByAggregateInput
    _min?: IncidentMinOrderByAggregateInput
  }

  export type IncidentScalarWhereWithAggregatesInput = {
    AND?: IncidentScalarWhereWithAggregatesInput | IncidentScalarWhereWithAggregatesInput[]
    OR?: IncidentScalarWhereWithAggregatesInput[]
    NOT?: IncidentScalarWhereWithAggregatesInput | IncidentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Incident"> | string
    tenantId?: UuidWithAggregatesFilter<"Incident"> | string
    assetId?: UuidNullableWithAggregatesFilter<"Incident"> | string | null
    reportedById?: UuidNullableWithAggregatesFilter<"Incident"> | string | null
    description?: StringWithAggregatesFilter<"Incident"> | string
    status?: EnumCallStatusWithAggregatesFilter<"Incident"> | $Enums.CallStatus
    priority?: EnumCallPriorityWithAggregatesFilter<"Incident"> | $Enums.CallPriority
    reportedAt?: DateTimeWithAggregatesFilter<"Incident"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Incident"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Incident"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Incident"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Incident"> | Date | string | null
  }

  export type WorkOrderLogWhereInput = {
    AND?: WorkOrderLogWhereInput | WorkOrderLogWhereInput[]
    OR?: WorkOrderLogWhereInput[]
    NOT?: WorkOrderLogWhereInput | WorkOrderLogWhereInput[]
    id?: UuidFilter<"WorkOrderLog"> | string
    workOrderId?: UuidFilter<"WorkOrderLog"> | string
    userId?: UuidNullableFilter<"WorkOrderLog"> | string | null
    action?: StringFilter<"WorkOrderLog"> | string
    details?: JsonNullableFilter<"WorkOrderLog">
    createdAt?: DateTimeFilter<"WorkOrderLog"> | Date | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type WorkOrderLogOrderByWithRelationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type WorkOrderLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkOrderLogWhereInput | WorkOrderLogWhereInput[]
    OR?: WorkOrderLogWhereInput[]
    NOT?: WorkOrderLogWhereInput | WorkOrderLogWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderLog"> | string
    userId?: UuidNullableFilter<"WorkOrderLog"> | string | null
    action?: StringFilter<"WorkOrderLog"> | string
    details?: JsonNullableFilter<"WorkOrderLog">
    createdAt?: DateTimeFilter<"WorkOrderLog"> | Date | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type WorkOrderLogOrderByWithAggregationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WorkOrderLogCountOrderByAggregateInput
    _max?: WorkOrderLogMaxOrderByAggregateInput
    _min?: WorkOrderLogMinOrderByAggregateInput
  }

  export type WorkOrderLogScalarWhereWithAggregatesInput = {
    AND?: WorkOrderLogScalarWhereWithAggregatesInput | WorkOrderLogScalarWhereWithAggregatesInput[]
    OR?: WorkOrderLogScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderLogScalarWhereWithAggregatesInput | WorkOrderLogScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"WorkOrderLog"> | string
    workOrderId?: UuidWithAggregatesFilter<"WorkOrderLog"> | string
    userId?: UuidNullableWithAggregatesFilter<"WorkOrderLog"> | string | null
    action?: StringWithAggregatesFilter<"WorkOrderLog"> | string
    details?: JsonNullableWithAggregatesFilter<"WorkOrderLog">
    createdAt?: DateTimeWithAggregatesFilter<"WorkOrderLog"> | Date | string
  }

  export type TenantCreateInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TenantSettingsCreateInput = {
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutSettingsInput
  }

  export type TenantSettingsUncheckedCreateInput = {
    tenantId: string
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantSettingsUpdateInput = {
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type TenantSettingsUncheckedUpdateInput = {
    tenantId?: StringFieldUpdateOperationsInput | string
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantSettingsCreateManyInput = {
    tenantId: string
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantSettingsUpdateManyMutationInput = {
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantSettingsUncheckedUpdateManyInput = {
    tenantId?: StringFieldUpdateOperationsInput | string
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborCreateNestedManyWithoutUserInput
    incidents?: IncidentCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutUserNestedInput
    incidents?: IncidentUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCategoryCreateInput = {
    id?: string
    name: string
    industry: $Enums.IndustryType
    description?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCategoriesInput
    assetTypes?: AssetTypeCreateNestedManyWithoutCategoryInput
  }

  export type AssetCategoryUncheckedCreateInput = {
    id?: string
    tenantId: string
    name: string
    industry: $Enums.IndustryType
    description?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type AssetCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCategoriesNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutCategoryNestedInput
  }

  export type AssetCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type AssetCategoryCreateManyInput = {
    id?: string
    tenantId: string
    name: string
    industry: $Enums.IndustryType
    description?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetTypeCreateInput = {
    id?: string
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutAssetTypesInput
    category?: AssetCategoryCreateNestedOneWithoutAssetTypesInput
    assets?: AssetCreateNestedManyWithoutAssetTypeInput
  }

  export type AssetTypeUncheckedCreateInput = {
    id?: string
    tenantId: string
    categoryId?: string | null
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutAssetTypeInput
  }

  export type AssetTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutAssetTypesNestedInput
    category?: AssetCategoryUpdateOneWithoutAssetTypesNestedInput
    assets?: AssetUpdateManyWithoutAssetTypeNestedInput
  }

  export type AssetTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutAssetTypeNestedInput
  }

  export type AssetTypeCreateManyInput = {
    id?: string
    tenantId: string
    categoryId?: string | null
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCreateInput = {
    id?: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutAssetsInput
    assetType?: AssetTypeCreateNestedOneWithoutAssetsInput
    assetMeters?: AssetMeterCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsCreateNestedManyWithoutAssetInput
    incidents?: IncidentCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateInput = {
    id?: string
    tenantId: string
    assetTypeId?: string | null
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsUncheckedCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsUncheckedCreateNestedManyWithoutAssetInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutAssetsNestedInput
    assetType?: AssetTypeUpdateOneWithoutAssetsNestedInput
    assetMeters?: AssetMeterUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUncheckedUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUncheckedUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetCreateManyInput = {
    id?: string
    tenantId: string
    assetTypeId?: string | null
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AssetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MeterCreateInput = {
    id?: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutMetersInput
    assetMeters?: AssetMeterCreateNestedManyWithoutMeterInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutMeterInput
  }

  export type MeterUncheckedCreateInput = {
    id?: string
    tenantId: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutMeterInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutMeterInput
  }

  export type MeterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutMetersNestedInput
    assetMeters?: AssetMeterUpdateManyWithoutMeterNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutMeterNestedInput
  }

  export type MeterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutMeterNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutMeterNestedInput
  }

  export type MeterCreateManyInput = {
    id?: string
    tenantId: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetMeterCreateInput = {
    id?: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutAssetMetersInput
    meter: MeterCreateNestedOneWithoutAssetMetersInput
    readings?: MeterReadingCreateNestedManyWithoutAssetMeterInput
  }

  export type AssetMeterUncheckedCreateInput = {
    id?: string
    assetId: string
    meterId: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    readings?: MeterReadingUncheckedCreateNestedManyWithoutAssetMeterInput
  }

  export type AssetMeterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutAssetMetersNestedInput
    meter?: MeterUpdateOneRequiredWithoutAssetMetersNestedInput
    readings?: MeterReadingUpdateManyWithoutAssetMeterNestedInput
  }

  export type AssetMeterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    meterId?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readings?: MeterReadingUncheckedUpdateManyWithoutAssetMeterNestedInput
  }

  export type AssetMeterCreateManyInput = {
    id?: string
    assetId: string
    meterId: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetMeterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetMeterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    meterId?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeterReadingCreateInput = {
    id?: string
    readingValue: Decimal | DecimalJsLike | number | string
    readingDate?: Date | string
    createdAt?: Date | string
    assetMeter: AssetMeterCreateNestedOneWithoutReadingsInput
  }

  export type MeterReadingUncheckedCreateInput = {
    id?: string
    assetMeterId: string
    readingValue: Decimal | DecimalJsLike | number | string
    readingDate?: Date | string
    createdAt?: Date | string
  }

  export type MeterReadingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetMeter?: AssetMeterUpdateOneRequiredWithoutReadingsNestedInput
  }

  export type MeterReadingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetMeterId?: StringFieldUpdateOperationsInput | string
    readingValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeterReadingCreateManyInput = {
    id?: string
    assetMeterId: string
    readingValue: Decimal | DecimalJsLike | number | string
    readingDate?: Date | string
    createdAt?: Date | string
  }

  export type MeterReadingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeterReadingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetMeterId?: StringFieldUpdateOperationsInput | string
    readingValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceScheduleCreateInput = {
    id?: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutMaintenanceInput
    meter?: MeterCreateNestedOneWithoutMaintenanceInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutMaintenanceInput
    assets?: MaintenanceAssetsCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleUncheckedCreateInput = {
    id?: string
    tenantId: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: string | null
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutMaintenanceInput
    assets?: MaintenanceAssetsUncheckedCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutMaintenanceNestedInput
    meter?: MeterUpdateOneWithoutMaintenanceNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: NullableStringFieldUpdateOperationsInput | string | null
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUncheckedUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleCreateManyInput = {
    id?: string
    tenantId: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: string | null
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type MaintenanceScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MaintenanceScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: NullableStringFieldUpdateOperationsInput | string | null
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MaintenanceAssignmentCreateInput = {
    maintenance: MaintenanceScheduleCreateNestedOneWithoutAssignmentsInput
    user: UserCreateNestedOneWithoutAssignmentsInput
  }

  export type MaintenanceAssignmentUncheckedCreateInput = {
    maintenanceId: string
    userId: string
  }

  export type MaintenanceAssignmentUpdateInput = {
    maintenance?: MaintenanceScheduleUpdateOneRequiredWithoutAssignmentsNestedInput
    user?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type MaintenanceAssignmentUncheckedUpdateInput = {
    maintenanceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MaintenanceAssignmentCreateManyInput = {
    maintenanceId: string
    userId: string
  }

  export type MaintenanceAssignmentUpdateManyMutationInput = {

  }

  export type MaintenanceAssignmentUncheckedUpdateManyInput = {
    maintenanceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MaintenanceAssetsCreateInput = {
    maintenance: MaintenanceScheduleCreateNestedOneWithoutAssetsInput
    asset: AssetCreateNestedOneWithoutMaintenanceInput
  }

  export type MaintenanceAssetsUncheckedCreateInput = {
    maintenanceId: string
    assetId: string
  }

  export type MaintenanceAssetsUpdateInput = {
    maintenance?: MaintenanceScheduleUpdateOneRequiredWithoutAssetsNestedInput
    asset?: AssetUpdateOneRequiredWithoutMaintenanceNestedInput
  }

  export type MaintenanceAssetsUncheckedUpdateInput = {
    maintenanceId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
  }

  export type MaintenanceAssetsCreateManyInput = {
    maintenanceId: string
    assetId: string
  }

  export type MaintenanceAssetsUpdateManyMutationInput = {

  }

  export type MaintenanceAssetsUncheckedUpdateManyInput = {
    maintenanceId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderCreateInput = {
    id?: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutWorkOrdersInput
    maintenance?: MaintenanceScheduleCreateNestedOneWithoutWorkOrdersInput
    assignments?: WorkOrderAssignmentCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateInput = {
    id?: string
    tenantId: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsUncheckedCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsUncheckedCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutWorkOrdersNestedInput
    maintenance?: MaintenanceScheduleUpdateOneWithoutWorkOrdersNestedInput
    assignments?: WorkOrderAssignmentUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderCreateManyInput = {
    id?: string
    tenantId: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type WorkOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkOrderAssignmentCreateInput = {
    workOrder: WorkOrderCreateNestedOneWithoutAssignmentsInput
    user: UserCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderAssignmentUncheckedCreateInput = {
    workOrderId: string
    userId: string
  }

  export type WorkOrderAssignmentUpdateInput = {
    workOrder?: WorkOrderUpdateOneRequiredWithoutAssignmentsNestedInput
    user?: UserUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderAssignmentUncheckedUpdateInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssignmentCreateManyInput = {
    workOrderId: string
    userId: string
  }

  export type WorkOrderAssignmentUpdateManyMutationInput = {

  }

  export type WorkOrderAssignmentUncheckedUpdateManyInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssetsCreateInput = {
    workOrder: WorkOrderCreateNestedOneWithoutAssetsInput
    asset: AssetCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderAssetsUncheckedCreateInput = {
    workOrderId: string
    assetId: string
  }

  export type WorkOrderAssetsUpdateInput = {
    workOrder?: WorkOrderUpdateOneRequiredWithoutAssetsNestedInput
    asset?: AssetUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderAssetsUncheckedUpdateInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssetsCreateManyInput = {
    workOrderId: string
    assetId: string
  }

  export type WorkOrderAssetsUpdateManyMutationInput = {

  }

  export type WorkOrderAssetsUncheckedUpdateManyInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderPartsCreateInput = {
    quantityUsed: number
    workOrder: WorkOrderCreateNestedOneWithoutPartsInput
    part: PartCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderPartsUncheckedCreateInput = {
    workOrderId: string
    partId: string
    quantityUsed: number
  }

  export type WorkOrderPartsUpdateInput = {
    quantityUsed?: IntFieldUpdateOperationsInput | number
    workOrder?: WorkOrderUpdateOneRequiredWithoutPartsNestedInput
    part?: PartUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderPartsUncheckedUpdateInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
    partId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: IntFieldUpdateOperationsInput | number
  }

  export type WorkOrderPartsCreateManyInput = {
    workOrderId: string
    partId: string
    quantityUsed: number
  }

  export type WorkOrderPartsUpdateManyMutationInput = {
    quantityUsed?: IntFieldUpdateOperationsInput | number
  }

  export type WorkOrderPartsUncheckedUpdateManyInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
    partId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: IntFieldUpdateOperationsInput | number
  }

  export type PartCreateInput = {
    id?: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutPartsInput
    vendors?: PartVendorCreateNestedManyWithoutPartInput
    workOrders?: WorkOrderPartsCreateNestedManyWithoutPartInput
  }

  export type PartUncheckedCreateInput = {
    id?: string
    tenantId: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    vendors?: PartVendorUncheckedCreateNestedManyWithoutPartInput
    workOrders?: WorkOrderPartsUncheckedCreateNestedManyWithoutPartInput
  }

  export type PartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutPartsNestedInput
    vendors?: PartVendorUpdateManyWithoutPartNestedInput
    workOrders?: WorkOrderPartsUpdateManyWithoutPartNestedInput
  }

  export type PartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vendors?: PartVendorUncheckedUpdateManyWithoutPartNestedInput
    workOrders?: WorkOrderPartsUncheckedUpdateManyWithoutPartNestedInput
  }

  export type PartCreateManyInput = {
    id?: string
    tenantId: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VendorCreateInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutVendorsInput
    parts?: PartVendorCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: string
    tenantId: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parts?: PartVendorUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutVendorsNestedInput
    parts?: PartVendorUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parts?: PartVendorUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: string
    tenantId: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type VendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PartVendorCreateInput = {
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
    part: PartCreateNestedOneWithoutVendorsInput
    vendor: VendorCreateNestedOneWithoutPartsInput
  }

  export type PartVendorUncheckedCreateInput = {
    partId: string
    vendorId: string
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
  }

  export type PartVendorUpdateInput = {
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
    part?: PartUpdateOneRequiredWithoutVendorsNestedInput
    vendor?: VendorUpdateOneRequiredWithoutPartsNestedInput
  }

  export type PartVendorUncheckedUpdateInput = {
    partId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PartVendorCreateManyInput = {
    partId: string
    vendorId: string
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
  }

  export type PartVendorUpdateManyMutationInput = {
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PartVendorUncheckedUpdateManyInput = {
    partId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WorkOrderLaborCreateInput = {
    id?: string
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
    workOrder: WorkOrderCreateNestedOneWithoutLaborInput
    user?: UserCreateNestedOneWithoutLaborInput
  }

  export type WorkOrderLaborUncheckedCreateInput = {
    id?: string
    workOrderId: string
    userId?: string | null
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
  }

  export type WorkOrderLaborUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrder?: WorkOrderUpdateOneRequiredWithoutLaborNestedInput
    user?: UserUpdateOneWithoutLaborNestedInput
  }

  export type WorkOrderLaborUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLaborCreateManyInput = {
    id?: string
    workOrderId: string
    userId?: string | null
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
  }

  export type WorkOrderLaborUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLaborUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncidentCreateInput = {
    id?: string
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutIncidentsInput
    asset?: AssetCreateNestedOneWithoutIncidentsInput
    reportedBy?: UserCreateNestedOneWithoutIncidentsInput
  }

  export type IncidentUncheckedCreateInput = {
    id?: string
    tenantId: string
    assetId?: string | null
    reportedById?: string | null
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type IncidentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutIncidentsNestedInput
    asset?: AssetUpdateOneWithoutIncidentsNestedInput
    reportedBy?: UserUpdateOneWithoutIncidentsNestedInput
  }

  export type IncidentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentCreateManyInput = {
    id?: string
    tenantId: string
    assetId?: string | null
    reportedById?: string | null
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type IncidentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkOrderLogCreateInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    workOrder: WorkOrderCreateNestedOneWithoutLogsInput
    user?: UserCreateNestedOneWithoutWorkOrderLogsInput
  }

  export type WorkOrderLogUncheckedCreateInput = {
    id?: string
    workOrderId: string
    userId?: string | null
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type WorkOrderLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrder?: WorkOrderUpdateOneRequiredWithoutLogsNestedInput
    user?: UserUpdateOneWithoutWorkOrderLogsNestedInput
  }

  export type WorkOrderLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLogCreateManyInput = {
    id?: string
    workOrderId: string
    userId?: string | null
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type WorkOrderLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TenantNullableScalarRelationFilter = {
    is?: TenantWhereInput | null
    isNot?: TenantWhereInput | null
  }

  export type TenantSettingsNullableScalarRelationFilter = {
    is?: TenantSettingsWhereInput | null
    isNot?: TenantSettingsWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type AssetCategoryListRelationFilter = {
    every?: AssetCategoryWhereInput
    some?: AssetCategoryWhereInput
    none?: AssetCategoryWhereInput
  }

  export type AssetTypeListRelationFilter = {
    every?: AssetTypeWhereInput
    some?: AssetTypeWhereInput
    none?: AssetTypeWhereInput
  }

  export type AssetListRelationFilter = {
    every?: AssetWhereInput
    some?: AssetWhereInput
    none?: AssetWhereInput
  }

  export type MeterListRelationFilter = {
    every?: MeterWhereInput
    some?: MeterWhereInput
    none?: MeterWhereInput
  }

  export type MaintenanceScheduleListRelationFilter = {
    every?: MaintenanceScheduleWhereInput
    some?: MaintenanceScheduleWhereInput
    none?: MaintenanceScheduleWhereInput
  }

  export type WorkOrderListRelationFilter = {
    every?: WorkOrderWhereInput
    some?: WorkOrderWhereInput
    none?: WorkOrderWhereInput
  }

  export type PartListRelationFilter = {
    every?: PartWhereInput
    some?: PartWhereInput
    none?: PartWhereInput
  }

  export type VendorListRelationFilter = {
    every?: VendorWhereInput
    some?: VendorWhereInput
    none?: VendorWhereInput
  }

  export type IncidentListRelationFilter = {
    every?: IncidentWhereInput
    some?: IncidentWhereInput
    none?: IncidentWhereInput
  }

  export type TenantListRelationFilter = {
    every?: TenantWhereInput
    some?: TenantWhereInput
    none?: TenantWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaintenanceScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IncidentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TenantScalarRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type TenantSettingsCountOrderByAggregateInput = {
    tenantId?: SortOrder
    config?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantSettingsMaxOrderByAggregateInput = {
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantSettingsMinOrderByAggregateInput = {
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type MaintenanceAssignmentListRelationFilter = {
    every?: MaintenanceAssignmentWhereInput
    some?: MaintenanceAssignmentWhereInput
    none?: MaintenanceAssignmentWhereInput
  }

  export type WorkOrderAssignmentListRelationFilter = {
    every?: WorkOrderAssignmentWhereInput
    some?: WorkOrderAssignmentWhereInput
    none?: WorkOrderAssignmentWhereInput
  }

  export type WorkOrderLaborListRelationFilter = {
    every?: WorkOrderLaborWhereInput
    some?: WorkOrderLaborWhereInput
    none?: WorkOrderLaborWhereInput
  }

  export type WorkOrderLogListRelationFilter = {
    every?: WorkOrderLogWhereInput
    some?: WorkOrderLogWhereInput
    none?: WorkOrderLogWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaintenanceAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderLaborOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTenantIdEmployeeIdCompoundUniqueInput = {
    tenantId: string
    employeeId: string
  }

  export type UserTenantIdEmailCompoundUniqueInput = {
    tenantId: string
    email: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumIndustryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IndustryType | EnumIndustryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IndustryType[] | ListEnumIndustryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndustryType[] | ListEnumIndustryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryTypeFilter<$PrismaModel> | $Enums.IndustryType
  }

  export type AssetCategoryTenantIdNameCompoundUniqueInput = {
    tenantId: string
    name: string
  }

  export type AssetCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    industry?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    industry?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    industry?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumIndustryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IndustryType | EnumIndustryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IndustryType[] | ListEnumIndustryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndustryType[] | ListEnumIndustryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryTypeWithAggregatesFilter<$PrismaModel> | $Enums.IndustryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndustryTypeFilter<$PrismaModel>
    _max?: NestedEnumIndustryTypeFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetCategoryNullableScalarRelationFilter = {
    is?: AssetCategoryWhereInput | null
    isNot?: AssetCategoryWhereInput | null
  }

  export type AssetTypeTenantIdNameCompoundUniqueInput = {
    tenantId: string
    name: string
  }

  export type AssetTypeCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    expectedLifespan?: SortOrder
    maintenanceFrequency?: SortOrder
    criticality?: SortOrder
    customFields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetTypeAvgOrderByAggregateInput = {
    expectedLifespan?: SortOrder
    maintenanceFrequency?: SortOrder
    criticality?: SortOrder
  }

  export type AssetTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    expectedLifespan?: SortOrder
    maintenanceFrequency?: SortOrder
    criticality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetTypeMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    expectedLifespan?: SortOrder
    maintenanceFrequency?: SortOrder
    criticality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetTypeSumOrderByAggregateInput = {
    expectedLifespan?: SortOrder
    maintenanceFrequency?: SortOrder
    criticality?: SortOrder
  }

  export type EnumAssetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusFilter<$PrismaModel> | $Enums.AssetStatus
  }

  export type AssetTypeNullableScalarRelationFilter = {
    is?: AssetTypeWhereInput | null
    isNot?: AssetTypeWhereInput | null
  }

  export type AssetMeterListRelationFilter = {
    every?: AssetMeterWhereInput
    some?: AssetMeterWhereInput
    none?: AssetMeterWhereInput
  }

  export type MaintenanceAssetsListRelationFilter = {
    every?: MaintenanceAssetsWhereInput
    some?: MaintenanceAssetsWhereInput
    none?: MaintenanceAssetsWhereInput
  }

  export type WorkOrderAssetsListRelationFilter = {
    every?: WorkOrderAssetsWhereInput
    some?: WorkOrderAssetsWhereInput
    none?: WorkOrderAssetsWhereInput
  }

  export type AssetMeterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaintenanceAssetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderAssetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetTypeId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    status?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    lastMaintenanceDate?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetTypeId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    status?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    lastMaintenanceDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetTypeId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    status?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    lastMaintenanceDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumAssetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetStatusFilter<$PrismaModel>
    _max?: NestedEnumAssetStatusFilter<$PrismaModel>
  }

  export type MeterCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeterMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeterMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type AssetScalarRelationFilter = {
    is?: AssetWhereInput
    isNot?: AssetWhereInput
  }

  export type MeterScalarRelationFilter = {
    is?: MeterWhereInput
    isNot?: MeterWhereInput
  }

  export type MeterReadingListRelationFilter = {
    every?: MeterReadingWhereInput
    some?: MeterReadingWhereInput
    none?: MeterReadingWhereInput
  }

  export type MeterReadingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetMeterAssetIdMeterIdCompoundUniqueInput = {
    assetId: string
    meterId: string
  }

  export type AssetMeterCountOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    meterId?: SortOrder
    initialReading?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetMeterAvgOrderByAggregateInput = {
    initialReading?: SortOrder
  }

  export type AssetMeterMaxOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    meterId?: SortOrder
    initialReading?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetMeterMinOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    meterId?: SortOrder
    initialReading?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetMeterSumOrderByAggregateInput = {
    initialReading?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type AssetMeterScalarRelationFilter = {
    is?: AssetMeterWhereInput
    isNot?: AssetMeterWhereInput
  }

  export type MeterReadingCountOrderByAggregateInput = {
    id?: SortOrder
    assetMeterId?: SortOrder
    readingValue?: SortOrder
    readingDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MeterReadingAvgOrderByAggregateInput = {
    readingValue?: SortOrder
  }

  export type MeterReadingMaxOrderByAggregateInput = {
    id?: SortOrder
    assetMeterId?: SortOrder
    readingValue?: SortOrder
    readingDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MeterReadingMinOrderByAggregateInput = {
    id?: SortOrder
    assetMeterId?: SortOrder
    readingValue?: SortOrder
    readingDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MeterReadingSumOrderByAggregateInput = {
    readingValue?: SortOrder
  }

  export type EnumMaintenanceTriggerFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceTrigger | EnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceTrigger[] | ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceTrigger[] | ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceTriggerFilter<$PrismaModel> | $Enums.MaintenanceTrigger
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumMaintenanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusFilter<$PrismaModel> | $Enums.MaintenanceStatus
  }

  export type EnumCallPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.CallPriority | EnumCallPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.CallPriority[] | ListEnumCallPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.CallPriority[] | ListEnumCallPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumCallPriorityFilter<$PrismaModel> | $Enums.CallPriority
  }

  export type MeterNullableScalarRelationFilter = {
    is?: MeterWhereInput | null
    isNot?: MeterWhereInput | null
  }

  export type MaintenanceScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    description?: SortOrder
    triggerType?: SortOrder
    recurrence?: SortOrder
    meterId?: SortOrder
    thresholdValue?: SortOrder
    nextRun?: SortOrder
    lastRun?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MaintenanceScheduleAvgOrderByAggregateInput = {
    thresholdValue?: SortOrder
  }

  export type MaintenanceScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    description?: SortOrder
    triggerType?: SortOrder
    meterId?: SortOrder
    thresholdValue?: SortOrder
    nextRun?: SortOrder
    lastRun?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MaintenanceScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    description?: SortOrder
    triggerType?: SortOrder
    meterId?: SortOrder
    thresholdValue?: SortOrder
    nextRun?: SortOrder
    lastRun?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MaintenanceScheduleSumOrderByAggregateInput = {
    thresholdValue?: SortOrder
  }

  export type EnumMaintenanceTriggerWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceTrigger | EnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceTrigger[] | ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceTrigger[] | ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceTriggerWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceTrigger
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceTriggerFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceTriggerFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumMaintenanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
  }

  export type EnumCallPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CallPriority | EnumCallPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.CallPriority[] | ListEnumCallPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.CallPriority[] | ListEnumCallPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumCallPriorityWithAggregatesFilter<$PrismaModel> | $Enums.CallPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCallPriorityFilter<$PrismaModel>
    _max?: NestedEnumCallPriorityFilter<$PrismaModel>
  }

  export type MaintenanceScheduleScalarRelationFilter = {
    is?: MaintenanceScheduleWhereInput
    isNot?: MaintenanceScheduleWhereInput
  }

  export type MaintenanceAssignmentMaintenanceIdUserIdCompoundUniqueInput = {
    maintenanceId: string
    userId: string
  }

  export type MaintenanceAssignmentCountOrderByAggregateInput = {
    maintenanceId?: SortOrder
    userId?: SortOrder
  }

  export type MaintenanceAssignmentMaxOrderByAggregateInput = {
    maintenanceId?: SortOrder
    userId?: SortOrder
  }

  export type MaintenanceAssignmentMinOrderByAggregateInput = {
    maintenanceId?: SortOrder
    userId?: SortOrder
  }

  export type MaintenanceAssetsMaintenanceIdAssetIdCompoundUniqueInput = {
    maintenanceId: string
    assetId: string
  }

  export type MaintenanceAssetsCountOrderByAggregateInput = {
    maintenanceId?: SortOrder
    assetId?: SortOrder
  }

  export type MaintenanceAssetsMaxOrderByAggregateInput = {
    maintenanceId?: SortOrder
    assetId?: SortOrder
  }

  export type MaintenanceAssetsMinOrderByAggregateInput = {
    maintenanceId?: SortOrder
    assetId?: SortOrder
  }

  export type EnumWorkOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusFilter<$PrismaModel> | $Enums.WorkOrderStatus
  }

  export type MaintenanceScheduleNullableScalarRelationFilter = {
    is?: MaintenanceScheduleWhereInput | null
    isNot?: MaintenanceScheduleWhereInput | null
  }

  export type WorkOrderPartsListRelationFilter = {
    every?: WorkOrderPartsWhereInput
    some?: WorkOrderPartsWhereInput
    none?: WorkOrderPartsWhereInput
  }

  export type WorkOrderPartsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    maintenanceId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type WorkOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    maintenanceId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type WorkOrderMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    maintenanceId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumWorkOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
  }

  export type WorkOrderScalarRelationFilter = {
    is?: WorkOrderWhereInput
    isNot?: WorkOrderWhereInput
  }

  export type WorkOrderAssignmentWorkOrderIdUserIdCompoundUniqueInput = {
    workOrderId: string
    userId: string
  }

  export type WorkOrderAssignmentCountOrderByAggregateInput = {
    workOrderId?: SortOrder
    userId?: SortOrder
  }

  export type WorkOrderAssignmentMaxOrderByAggregateInput = {
    workOrderId?: SortOrder
    userId?: SortOrder
  }

  export type WorkOrderAssignmentMinOrderByAggregateInput = {
    workOrderId?: SortOrder
    userId?: SortOrder
  }

  export type WorkOrderAssetsWorkOrderIdAssetIdCompoundUniqueInput = {
    workOrderId: string
    assetId: string
  }

  export type WorkOrderAssetsCountOrderByAggregateInput = {
    workOrderId?: SortOrder
    assetId?: SortOrder
  }

  export type WorkOrderAssetsMaxOrderByAggregateInput = {
    workOrderId?: SortOrder
    assetId?: SortOrder
  }

  export type WorkOrderAssetsMinOrderByAggregateInput = {
    workOrderId?: SortOrder
    assetId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PartScalarRelationFilter = {
    is?: PartWhereInput
    isNot?: PartWhereInput
  }

  export type WorkOrderPartsWorkOrderIdPartIdCompoundUniqueInput = {
    workOrderId: string
    partId: string
  }

  export type WorkOrderPartsCountOrderByAggregateInput = {
    workOrderId?: SortOrder
    partId?: SortOrder
    quantityUsed?: SortOrder
  }

  export type WorkOrderPartsAvgOrderByAggregateInput = {
    quantityUsed?: SortOrder
  }

  export type WorkOrderPartsMaxOrderByAggregateInput = {
    workOrderId?: SortOrder
    partId?: SortOrder
    quantityUsed?: SortOrder
  }

  export type WorkOrderPartsMinOrderByAggregateInput = {
    workOrderId?: SortOrder
    partId?: SortOrder
    quantityUsed?: SortOrder
  }

  export type WorkOrderPartsSumOrderByAggregateInput = {
    quantityUsed?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PartVendorListRelationFilter = {
    every?: PartVendorWhereInput
    some?: PartVendorWhereInput
    none?: PartVendorWhereInput
  }

  export type PartVendorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    partNumber?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    minStock?: SortOrder
    unitCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PartAvgOrderByAggregateInput = {
    quantity?: SortOrder
    minStock?: SortOrder
    unitCost?: SortOrder
  }

  export type PartMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    partNumber?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    minStock?: SortOrder
    unitCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PartMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    partNumber?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    minStock?: SortOrder
    unitCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PartSumOrderByAggregateInput = {
    quantity?: SortOrder
    minStock?: SortOrder
    unitCost?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    contactInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type VendorScalarRelationFilter = {
    is?: VendorWhereInput
    isNot?: VendorWhereInput
  }

  export type PartVendorPartIdVendorIdCompoundUniqueInput = {
    partId: string
    vendorId: string
  }

  export type PartVendorCountOrderByAggregateInput = {
    partId?: SortOrder
    vendorId?: SortOrder
    cost?: SortOrder
    leadTime?: SortOrder
  }

  export type PartVendorAvgOrderByAggregateInput = {
    cost?: SortOrder
    leadTime?: SortOrder
  }

  export type PartVendorMaxOrderByAggregateInput = {
    partId?: SortOrder
    vendorId?: SortOrder
    cost?: SortOrder
    leadTime?: SortOrder
  }

  export type PartVendorMinOrderByAggregateInput = {
    partId?: SortOrder
    vendorId?: SortOrder
    cost?: SortOrder
    leadTime?: SortOrder
  }

  export type PartVendorSumOrderByAggregateInput = {
    cost?: SortOrder
    leadTime?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type WorkOrderLaborCountOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    taskDescription?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkOrderLaborAvgOrderByAggregateInput = {
    hours?: SortOrder
  }

  export type WorkOrderLaborMaxOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    taskDescription?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkOrderLaborMinOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    taskDescription?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkOrderLaborSumOrderByAggregateInput = {
    hours?: SortOrder
  }

  export type EnumCallStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CallStatus | EnumCallStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CallStatus[] | ListEnumCallStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CallStatus[] | ListEnumCallStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCallStatusFilter<$PrismaModel> | $Enums.CallStatus
  }

  export type AssetNullableScalarRelationFilter = {
    is?: AssetWhereInput | null
    isNot?: AssetWhereInput | null
  }

  export type IncidentCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetId?: SortOrder
    reportedById?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type IncidentMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetId?: SortOrder
    reportedById?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type IncidentMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    assetId?: SortOrder
    reportedById?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    reportedAt?: SortOrder
    resolvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumCallStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CallStatus | EnumCallStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CallStatus[] | ListEnumCallStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CallStatus[] | ListEnumCallStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCallStatusWithAggregatesFilter<$PrismaModel> | $Enums.CallStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCallStatusFilter<$PrismaModel>
    _max?: NestedEnumCallStatusFilter<$PrismaModel>
  }

  export type WorkOrderLogCountOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkOrderLogMaxOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkOrderLogMinOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type TenantCreateNestedOneWithoutChildrenInput = {
    create?: XOR<TenantCreateWithoutChildrenInput, TenantUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: TenantCreateOrConnectWithoutChildrenInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantSettingsCreateNestedOneWithoutTenantInput = {
    create?: XOR<TenantSettingsCreateWithoutTenantInput, TenantSettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: TenantSettingsCreateOrConnectWithoutTenantInput
    connect?: TenantSettingsWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssetCategoryCreateNestedManyWithoutTenantInput = {
    create?: XOR<AssetCategoryCreateWithoutTenantInput, AssetCategoryUncheckedCreateWithoutTenantInput> | AssetCategoryCreateWithoutTenantInput[] | AssetCategoryUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetCategoryCreateOrConnectWithoutTenantInput | AssetCategoryCreateOrConnectWithoutTenantInput[]
    createMany?: AssetCategoryCreateManyTenantInputEnvelope
    connect?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
  }

  export type AssetTypeCreateNestedManyWithoutTenantInput = {
    create?: XOR<AssetTypeCreateWithoutTenantInput, AssetTypeUncheckedCreateWithoutTenantInput> | AssetTypeCreateWithoutTenantInput[] | AssetTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetTypeCreateOrConnectWithoutTenantInput | AssetTypeCreateOrConnectWithoutTenantInput[]
    createMany?: AssetTypeCreateManyTenantInputEnvelope
    connect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
  }

  export type AssetCreateNestedManyWithoutTenantInput = {
    create?: XOR<AssetCreateWithoutTenantInput, AssetUncheckedCreateWithoutTenantInput> | AssetCreateWithoutTenantInput[] | AssetUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutTenantInput | AssetCreateOrConnectWithoutTenantInput[]
    createMany?: AssetCreateManyTenantInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type MeterCreateNestedManyWithoutTenantInput = {
    create?: XOR<MeterCreateWithoutTenantInput, MeterUncheckedCreateWithoutTenantInput> | MeterCreateWithoutTenantInput[] | MeterUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MeterCreateOrConnectWithoutTenantInput | MeterCreateOrConnectWithoutTenantInput[]
    createMany?: MeterCreateManyTenantInputEnvelope
    connect?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
  }

  export type MaintenanceScheduleCreateNestedManyWithoutTenantInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutTenantInput, MaintenanceScheduleUncheckedCreateWithoutTenantInput> | MaintenanceScheduleCreateWithoutTenantInput[] | MaintenanceScheduleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutTenantInput | MaintenanceScheduleCreateOrConnectWithoutTenantInput[]
    createMany?: MaintenanceScheduleCreateManyTenantInputEnvelope
    connect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
  }

  export type WorkOrderCreateNestedManyWithoutTenantInput = {
    create?: XOR<WorkOrderCreateWithoutTenantInput, WorkOrderUncheckedCreateWithoutTenantInput> | WorkOrderCreateWithoutTenantInput[] | WorkOrderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutTenantInput | WorkOrderCreateOrConnectWithoutTenantInput[]
    createMany?: WorkOrderCreateManyTenantInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type PartCreateNestedManyWithoutTenantInput = {
    create?: XOR<PartCreateWithoutTenantInput, PartUncheckedCreateWithoutTenantInput> | PartCreateWithoutTenantInput[] | PartUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PartCreateOrConnectWithoutTenantInput | PartCreateOrConnectWithoutTenantInput[]
    createMany?: PartCreateManyTenantInputEnvelope
    connect?: PartWhereUniqueInput | PartWhereUniqueInput[]
  }

  export type VendorCreateNestedManyWithoutTenantInput = {
    create?: XOR<VendorCreateWithoutTenantInput, VendorUncheckedCreateWithoutTenantInput> | VendorCreateWithoutTenantInput[] | VendorUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutTenantInput | VendorCreateOrConnectWithoutTenantInput[]
    createMany?: VendorCreateManyTenantInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type IncidentCreateNestedManyWithoutTenantInput = {
    create?: XOR<IncidentCreateWithoutTenantInput, IncidentUncheckedCreateWithoutTenantInput> | IncidentCreateWithoutTenantInput[] | IncidentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutTenantInput | IncidentCreateOrConnectWithoutTenantInput[]
    createMany?: IncidentCreateManyTenantInputEnvelope
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
  }

  export type TenantCreateNestedManyWithoutParentInput = {
    create?: XOR<TenantCreateWithoutParentInput, TenantUncheckedCreateWithoutParentInput> | TenantCreateWithoutParentInput[] | TenantUncheckedCreateWithoutParentInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutParentInput | TenantCreateOrConnectWithoutParentInput[]
    createMany?: TenantCreateManyParentInputEnvelope
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
  }

  export type TenantSettingsUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<TenantSettingsCreateWithoutTenantInput, TenantSettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: TenantSettingsCreateOrConnectWithoutTenantInput
    connect?: TenantSettingsWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssetCategoryUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<AssetCategoryCreateWithoutTenantInput, AssetCategoryUncheckedCreateWithoutTenantInput> | AssetCategoryCreateWithoutTenantInput[] | AssetCategoryUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetCategoryCreateOrConnectWithoutTenantInput | AssetCategoryCreateOrConnectWithoutTenantInput[]
    createMany?: AssetCategoryCreateManyTenantInputEnvelope
    connect?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
  }

  export type AssetTypeUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<AssetTypeCreateWithoutTenantInput, AssetTypeUncheckedCreateWithoutTenantInput> | AssetTypeCreateWithoutTenantInput[] | AssetTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetTypeCreateOrConnectWithoutTenantInput | AssetTypeCreateOrConnectWithoutTenantInput[]
    createMany?: AssetTypeCreateManyTenantInputEnvelope
    connect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<AssetCreateWithoutTenantInput, AssetUncheckedCreateWithoutTenantInput> | AssetCreateWithoutTenantInput[] | AssetUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutTenantInput | AssetCreateOrConnectWithoutTenantInput[]
    createMany?: AssetCreateManyTenantInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type MeterUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<MeterCreateWithoutTenantInput, MeterUncheckedCreateWithoutTenantInput> | MeterCreateWithoutTenantInput[] | MeterUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MeterCreateOrConnectWithoutTenantInput | MeterCreateOrConnectWithoutTenantInput[]
    createMany?: MeterCreateManyTenantInputEnvelope
    connect?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
  }

  export type MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutTenantInput, MaintenanceScheduleUncheckedCreateWithoutTenantInput> | MaintenanceScheduleCreateWithoutTenantInput[] | MaintenanceScheduleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutTenantInput | MaintenanceScheduleCreateOrConnectWithoutTenantInput[]
    createMany?: MaintenanceScheduleCreateManyTenantInputEnvelope
    connect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<WorkOrderCreateWithoutTenantInput, WorkOrderUncheckedCreateWithoutTenantInput> | WorkOrderCreateWithoutTenantInput[] | WorkOrderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutTenantInput | WorkOrderCreateOrConnectWithoutTenantInput[]
    createMany?: WorkOrderCreateManyTenantInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type PartUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PartCreateWithoutTenantInput, PartUncheckedCreateWithoutTenantInput> | PartCreateWithoutTenantInput[] | PartUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PartCreateOrConnectWithoutTenantInput | PartCreateOrConnectWithoutTenantInput[]
    createMany?: PartCreateManyTenantInputEnvelope
    connect?: PartWhereUniqueInput | PartWhereUniqueInput[]
  }

  export type VendorUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<VendorCreateWithoutTenantInput, VendorUncheckedCreateWithoutTenantInput> | VendorCreateWithoutTenantInput[] | VendorUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutTenantInput | VendorCreateOrConnectWithoutTenantInput[]
    createMany?: VendorCreateManyTenantInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type IncidentUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<IncidentCreateWithoutTenantInput, IncidentUncheckedCreateWithoutTenantInput> | IncidentCreateWithoutTenantInput[] | IncidentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutTenantInput | IncidentCreateOrConnectWithoutTenantInput[]
    createMany?: IncidentCreateManyTenantInputEnvelope
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
  }

  export type TenantUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<TenantCreateWithoutParentInput, TenantUncheckedCreateWithoutParentInput> | TenantCreateWithoutParentInput[] | TenantUncheckedCreateWithoutParentInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutParentInput | TenantCreateOrConnectWithoutParentInput[]
    createMany?: TenantCreateManyParentInputEnvelope
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TenantUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<TenantCreateWithoutChildrenInput, TenantUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: TenantCreateOrConnectWithoutChildrenInput
    upsert?: TenantUpsertWithoutChildrenInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutChildrenInput, TenantUpdateWithoutChildrenInput>, TenantUncheckedUpdateWithoutChildrenInput>
  }

  export type TenantSettingsUpdateOneWithoutTenantNestedInput = {
    create?: XOR<TenantSettingsCreateWithoutTenantInput, TenantSettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: TenantSettingsCreateOrConnectWithoutTenantInput
    upsert?: TenantSettingsUpsertWithoutTenantInput
    disconnect?: TenantSettingsWhereInput | boolean
    delete?: TenantSettingsWhereInput | boolean
    connect?: TenantSettingsWhereUniqueInput
    update?: XOR<XOR<TenantSettingsUpdateToOneWithWhereWithoutTenantInput, TenantSettingsUpdateWithoutTenantInput>, TenantSettingsUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssetCategoryUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AssetCategoryCreateWithoutTenantInput, AssetCategoryUncheckedCreateWithoutTenantInput> | AssetCategoryCreateWithoutTenantInput[] | AssetCategoryUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetCategoryCreateOrConnectWithoutTenantInput | AssetCategoryCreateOrConnectWithoutTenantInput[]
    upsert?: AssetCategoryUpsertWithWhereUniqueWithoutTenantInput | AssetCategoryUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AssetCategoryCreateManyTenantInputEnvelope
    set?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
    disconnect?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
    delete?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
    connect?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
    update?: AssetCategoryUpdateWithWhereUniqueWithoutTenantInput | AssetCategoryUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AssetCategoryUpdateManyWithWhereWithoutTenantInput | AssetCategoryUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AssetCategoryScalarWhereInput | AssetCategoryScalarWhereInput[]
  }

  export type AssetTypeUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AssetTypeCreateWithoutTenantInput, AssetTypeUncheckedCreateWithoutTenantInput> | AssetTypeCreateWithoutTenantInput[] | AssetTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetTypeCreateOrConnectWithoutTenantInput | AssetTypeCreateOrConnectWithoutTenantInput[]
    upsert?: AssetTypeUpsertWithWhereUniqueWithoutTenantInput | AssetTypeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AssetTypeCreateManyTenantInputEnvelope
    set?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    disconnect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    delete?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    connect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    update?: AssetTypeUpdateWithWhereUniqueWithoutTenantInput | AssetTypeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AssetTypeUpdateManyWithWhereWithoutTenantInput | AssetTypeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AssetTypeScalarWhereInput | AssetTypeScalarWhereInput[]
  }

  export type AssetUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AssetCreateWithoutTenantInput, AssetUncheckedCreateWithoutTenantInput> | AssetCreateWithoutTenantInput[] | AssetUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutTenantInput | AssetCreateOrConnectWithoutTenantInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutTenantInput | AssetUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AssetCreateManyTenantInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutTenantInput | AssetUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutTenantInput | AssetUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type MeterUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MeterCreateWithoutTenantInput, MeterUncheckedCreateWithoutTenantInput> | MeterCreateWithoutTenantInput[] | MeterUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MeterCreateOrConnectWithoutTenantInput | MeterCreateOrConnectWithoutTenantInput[]
    upsert?: MeterUpsertWithWhereUniqueWithoutTenantInput | MeterUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MeterCreateManyTenantInputEnvelope
    set?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
    disconnect?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
    delete?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
    connect?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
    update?: MeterUpdateWithWhereUniqueWithoutTenantInput | MeterUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MeterUpdateManyWithWhereWithoutTenantInput | MeterUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MeterScalarWhereInput | MeterScalarWhereInput[]
  }

  export type MaintenanceScheduleUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutTenantInput, MaintenanceScheduleUncheckedCreateWithoutTenantInput> | MaintenanceScheduleCreateWithoutTenantInput[] | MaintenanceScheduleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutTenantInput | MaintenanceScheduleCreateOrConnectWithoutTenantInput[]
    upsert?: MaintenanceScheduleUpsertWithWhereUniqueWithoutTenantInput | MaintenanceScheduleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MaintenanceScheduleCreateManyTenantInputEnvelope
    set?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    disconnect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    delete?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    connect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    update?: MaintenanceScheduleUpdateWithWhereUniqueWithoutTenantInput | MaintenanceScheduleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MaintenanceScheduleUpdateManyWithWhereWithoutTenantInput | MaintenanceScheduleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MaintenanceScheduleScalarWhereInput | MaintenanceScheduleScalarWhereInput[]
  }

  export type WorkOrderUpdateManyWithoutTenantNestedInput = {
    create?: XOR<WorkOrderCreateWithoutTenantInput, WorkOrderUncheckedCreateWithoutTenantInput> | WorkOrderCreateWithoutTenantInput[] | WorkOrderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutTenantInput | WorkOrderCreateOrConnectWithoutTenantInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutTenantInput | WorkOrderUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: WorkOrderCreateManyTenantInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutTenantInput | WorkOrderUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutTenantInput | WorkOrderUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type PartUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PartCreateWithoutTenantInput, PartUncheckedCreateWithoutTenantInput> | PartCreateWithoutTenantInput[] | PartUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PartCreateOrConnectWithoutTenantInput | PartCreateOrConnectWithoutTenantInput[]
    upsert?: PartUpsertWithWhereUniqueWithoutTenantInput | PartUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PartCreateManyTenantInputEnvelope
    set?: PartWhereUniqueInput | PartWhereUniqueInput[]
    disconnect?: PartWhereUniqueInput | PartWhereUniqueInput[]
    delete?: PartWhereUniqueInput | PartWhereUniqueInput[]
    connect?: PartWhereUniqueInput | PartWhereUniqueInput[]
    update?: PartUpdateWithWhereUniqueWithoutTenantInput | PartUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PartUpdateManyWithWhereWithoutTenantInput | PartUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PartScalarWhereInput | PartScalarWhereInput[]
  }

  export type VendorUpdateManyWithoutTenantNestedInput = {
    create?: XOR<VendorCreateWithoutTenantInput, VendorUncheckedCreateWithoutTenantInput> | VendorCreateWithoutTenantInput[] | VendorUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutTenantInput | VendorCreateOrConnectWithoutTenantInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutTenantInput | VendorUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: VendorCreateManyTenantInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutTenantInput | VendorUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutTenantInput | VendorUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type IncidentUpdateManyWithoutTenantNestedInput = {
    create?: XOR<IncidentCreateWithoutTenantInput, IncidentUncheckedCreateWithoutTenantInput> | IncidentCreateWithoutTenantInput[] | IncidentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutTenantInput | IncidentCreateOrConnectWithoutTenantInput[]
    upsert?: IncidentUpsertWithWhereUniqueWithoutTenantInput | IncidentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: IncidentCreateManyTenantInputEnvelope
    set?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    disconnect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    delete?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    update?: IncidentUpdateWithWhereUniqueWithoutTenantInput | IncidentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: IncidentUpdateManyWithWhereWithoutTenantInput | IncidentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
  }

  export type TenantUpdateManyWithoutParentNestedInput = {
    create?: XOR<TenantCreateWithoutParentInput, TenantUncheckedCreateWithoutParentInput> | TenantCreateWithoutParentInput[] | TenantUncheckedCreateWithoutParentInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutParentInput | TenantCreateOrConnectWithoutParentInput[]
    upsert?: TenantUpsertWithWhereUniqueWithoutParentInput | TenantUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: TenantCreateManyParentInputEnvelope
    set?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    disconnect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    delete?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    update?: TenantUpdateWithWhereUniqueWithoutParentInput | TenantUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: TenantUpdateManyWithWhereWithoutParentInput | TenantUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: TenantScalarWhereInput | TenantScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<TenantSettingsCreateWithoutTenantInput, TenantSettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: TenantSettingsCreateOrConnectWithoutTenantInput
    upsert?: TenantSettingsUpsertWithoutTenantInput
    disconnect?: TenantSettingsWhereInput | boolean
    delete?: TenantSettingsWhereInput | boolean
    connect?: TenantSettingsWhereUniqueInput
    update?: XOR<XOR<TenantSettingsUpdateToOneWithWhereWithoutTenantInput, TenantSettingsUpdateWithoutTenantInput>, TenantSettingsUncheckedUpdateWithoutTenantInput>
  }

  export type UserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AssetCategoryCreateWithoutTenantInput, AssetCategoryUncheckedCreateWithoutTenantInput> | AssetCategoryCreateWithoutTenantInput[] | AssetCategoryUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetCategoryCreateOrConnectWithoutTenantInput | AssetCategoryCreateOrConnectWithoutTenantInput[]
    upsert?: AssetCategoryUpsertWithWhereUniqueWithoutTenantInput | AssetCategoryUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AssetCategoryCreateManyTenantInputEnvelope
    set?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
    disconnect?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
    delete?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
    connect?: AssetCategoryWhereUniqueInput | AssetCategoryWhereUniqueInput[]
    update?: AssetCategoryUpdateWithWhereUniqueWithoutTenantInput | AssetCategoryUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AssetCategoryUpdateManyWithWhereWithoutTenantInput | AssetCategoryUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AssetCategoryScalarWhereInput | AssetCategoryScalarWhereInput[]
  }

  export type AssetTypeUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AssetTypeCreateWithoutTenantInput, AssetTypeUncheckedCreateWithoutTenantInput> | AssetTypeCreateWithoutTenantInput[] | AssetTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetTypeCreateOrConnectWithoutTenantInput | AssetTypeCreateOrConnectWithoutTenantInput[]
    upsert?: AssetTypeUpsertWithWhereUniqueWithoutTenantInput | AssetTypeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AssetTypeCreateManyTenantInputEnvelope
    set?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    disconnect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    delete?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    connect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    update?: AssetTypeUpdateWithWhereUniqueWithoutTenantInput | AssetTypeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AssetTypeUpdateManyWithWhereWithoutTenantInput | AssetTypeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AssetTypeScalarWhereInput | AssetTypeScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AssetCreateWithoutTenantInput, AssetUncheckedCreateWithoutTenantInput> | AssetCreateWithoutTenantInput[] | AssetUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutTenantInput | AssetCreateOrConnectWithoutTenantInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutTenantInput | AssetUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AssetCreateManyTenantInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutTenantInput | AssetUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutTenantInput | AssetUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type MeterUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MeterCreateWithoutTenantInput, MeterUncheckedCreateWithoutTenantInput> | MeterCreateWithoutTenantInput[] | MeterUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MeterCreateOrConnectWithoutTenantInput | MeterCreateOrConnectWithoutTenantInput[]
    upsert?: MeterUpsertWithWhereUniqueWithoutTenantInput | MeterUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MeterCreateManyTenantInputEnvelope
    set?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
    disconnect?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
    delete?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
    connect?: MeterWhereUniqueInput | MeterWhereUniqueInput[]
    update?: MeterUpdateWithWhereUniqueWithoutTenantInput | MeterUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MeterUpdateManyWithWhereWithoutTenantInput | MeterUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MeterScalarWhereInput | MeterScalarWhereInput[]
  }

  export type MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutTenantInput, MaintenanceScheduleUncheckedCreateWithoutTenantInput> | MaintenanceScheduleCreateWithoutTenantInput[] | MaintenanceScheduleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutTenantInput | MaintenanceScheduleCreateOrConnectWithoutTenantInput[]
    upsert?: MaintenanceScheduleUpsertWithWhereUniqueWithoutTenantInput | MaintenanceScheduleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MaintenanceScheduleCreateManyTenantInputEnvelope
    set?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    disconnect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    delete?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    connect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    update?: MaintenanceScheduleUpdateWithWhereUniqueWithoutTenantInput | MaintenanceScheduleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MaintenanceScheduleUpdateManyWithWhereWithoutTenantInput | MaintenanceScheduleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MaintenanceScheduleScalarWhereInput | MaintenanceScheduleScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<WorkOrderCreateWithoutTenantInput, WorkOrderUncheckedCreateWithoutTenantInput> | WorkOrderCreateWithoutTenantInput[] | WorkOrderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutTenantInput | WorkOrderCreateOrConnectWithoutTenantInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutTenantInput | WorkOrderUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: WorkOrderCreateManyTenantInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutTenantInput | WorkOrderUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutTenantInput | WorkOrderUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type PartUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PartCreateWithoutTenantInput, PartUncheckedCreateWithoutTenantInput> | PartCreateWithoutTenantInput[] | PartUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PartCreateOrConnectWithoutTenantInput | PartCreateOrConnectWithoutTenantInput[]
    upsert?: PartUpsertWithWhereUniqueWithoutTenantInput | PartUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PartCreateManyTenantInputEnvelope
    set?: PartWhereUniqueInput | PartWhereUniqueInput[]
    disconnect?: PartWhereUniqueInput | PartWhereUniqueInput[]
    delete?: PartWhereUniqueInput | PartWhereUniqueInput[]
    connect?: PartWhereUniqueInput | PartWhereUniqueInput[]
    update?: PartUpdateWithWhereUniqueWithoutTenantInput | PartUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PartUpdateManyWithWhereWithoutTenantInput | PartUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PartScalarWhereInput | PartScalarWhereInput[]
  }

  export type VendorUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<VendorCreateWithoutTenantInput, VendorUncheckedCreateWithoutTenantInput> | VendorCreateWithoutTenantInput[] | VendorUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutTenantInput | VendorCreateOrConnectWithoutTenantInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutTenantInput | VendorUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: VendorCreateManyTenantInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutTenantInput | VendorUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutTenantInput | VendorUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type IncidentUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<IncidentCreateWithoutTenantInput, IncidentUncheckedCreateWithoutTenantInput> | IncidentCreateWithoutTenantInput[] | IncidentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutTenantInput | IncidentCreateOrConnectWithoutTenantInput[]
    upsert?: IncidentUpsertWithWhereUniqueWithoutTenantInput | IncidentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: IncidentCreateManyTenantInputEnvelope
    set?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    disconnect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    delete?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    update?: IncidentUpdateWithWhereUniqueWithoutTenantInput | IncidentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: IncidentUpdateManyWithWhereWithoutTenantInput | IncidentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
  }

  export type TenantUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<TenantCreateWithoutParentInput, TenantUncheckedCreateWithoutParentInput> | TenantCreateWithoutParentInput[] | TenantUncheckedCreateWithoutParentInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutParentInput | TenantCreateOrConnectWithoutParentInput[]
    upsert?: TenantUpsertWithWhereUniqueWithoutParentInput | TenantUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: TenantCreateManyParentInputEnvelope
    set?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    disconnect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    delete?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    update?: TenantUpdateWithWhereUniqueWithoutParentInput | TenantUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: TenantUpdateManyWithWhereWithoutParentInput | TenantUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: TenantScalarWhereInput | TenantScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutSettingsInput = {
    create?: XOR<TenantCreateWithoutSettingsInput, TenantUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSettingsInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<TenantCreateWithoutSettingsInput, TenantUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSettingsInput
    upsert?: TenantUpsertWithoutSettingsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSettingsInput, TenantUpdateWithoutSettingsInput>, TenantUncheckedUpdateWithoutSettingsInput>
  }

  export type TenantCreateNestedOneWithoutUsersInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    connect?: TenantWhereUniqueInput
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MaintenanceAssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<MaintenanceAssignmentCreateWithoutUserInput, MaintenanceAssignmentUncheckedCreateWithoutUserInput> | MaintenanceAssignmentCreateWithoutUserInput[] | MaintenanceAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MaintenanceAssignmentCreateOrConnectWithoutUserInput | MaintenanceAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: MaintenanceAssignmentCreateManyUserInputEnvelope
    connect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
  }

  export type WorkOrderAssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkOrderAssignmentCreateWithoutUserInput, WorkOrderAssignmentUncheckedCreateWithoutUserInput> | WorkOrderAssignmentCreateWithoutUserInput[] | WorkOrderAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderAssignmentCreateOrConnectWithoutUserInput | WorkOrderAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: WorkOrderAssignmentCreateManyUserInputEnvelope
    connect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
  }

  export type WorkOrderLaborCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkOrderLaborCreateWithoutUserInput, WorkOrderLaborUncheckedCreateWithoutUserInput> | WorkOrderLaborCreateWithoutUserInput[] | WorkOrderLaborUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderLaborCreateOrConnectWithoutUserInput | WorkOrderLaborCreateOrConnectWithoutUserInput[]
    createMany?: WorkOrderLaborCreateManyUserInputEnvelope
    connect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
  }

  export type IncidentCreateNestedManyWithoutReportedByInput = {
    create?: XOR<IncidentCreateWithoutReportedByInput, IncidentUncheckedCreateWithoutReportedByInput> | IncidentCreateWithoutReportedByInput[] | IncidentUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutReportedByInput | IncidentCreateOrConnectWithoutReportedByInput[]
    createMany?: IncidentCreateManyReportedByInputEnvelope
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
  }

  export type WorkOrderLogCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkOrderLogCreateWithoutUserInput, WorkOrderLogUncheckedCreateWithoutUserInput> | WorkOrderLogCreateWithoutUserInput[] | WorkOrderLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderLogCreateOrConnectWithoutUserInput | WorkOrderLogCreateOrConnectWithoutUserInput[]
    createMany?: WorkOrderLogCreateManyUserInputEnvelope
    connect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MaintenanceAssignmentCreateWithoutUserInput, MaintenanceAssignmentUncheckedCreateWithoutUserInput> | MaintenanceAssignmentCreateWithoutUserInput[] | MaintenanceAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MaintenanceAssignmentCreateOrConnectWithoutUserInput | MaintenanceAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: MaintenanceAssignmentCreateManyUserInputEnvelope
    connect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
  }

  export type WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkOrderAssignmentCreateWithoutUserInput, WorkOrderAssignmentUncheckedCreateWithoutUserInput> | WorkOrderAssignmentCreateWithoutUserInput[] | WorkOrderAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderAssignmentCreateOrConnectWithoutUserInput | WorkOrderAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: WorkOrderAssignmentCreateManyUserInputEnvelope
    connect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
  }

  export type WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkOrderLaborCreateWithoutUserInput, WorkOrderLaborUncheckedCreateWithoutUserInput> | WorkOrderLaborCreateWithoutUserInput[] | WorkOrderLaborUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderLaborCreateOrConnectWithoutUserInput | WorkOrderLaborCreateOrConnectWithoutUserInput[]
    createMany?: WorkOrderLaborCreateManyUserInputEnvelope
    connect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
  }

  export type IncidentUncheckedCreateNestedManyWithoutReportedByInput = {
    create?: XOR<IncidentCreateWithoutReportedByInput, IncidentUncheckedCreateWithoutReportedByInput> | IncidentCreateWithoutReportedByInput[] | IncidentUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutReportedByInput | IncidentCreateOrConnectWithoutReportedByInput[]
    createMany?: IncidentCreateManyReportedByInputEnvelope
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
  }

  export type WorkOrderLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkOrderLogCreateWithoutUserInput, WorkOrderLogUncheckedCreateWithoutUserInput> | WorkOrderLogCreateWithoutUserInput[] | WorkOrderLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderLogCreateOrConnectWithoutUserInput | WorkOrderLogCreateOrConnectWithoutUserInput[]
    createMany?: WorkOrderLogCreateManyUserInputEnvelope
    connect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type TenantUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    upsert?: TenantUpsertWithoutUsersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUsersInput, TenantUpdateWithoutUsersInput>, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MaintenanceAssignmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<MaintenanceAssignmentCreateWithoutUserInput, MaintenanceAssignmentUncheckedCreateWithoutUserInput> | MaintenanceAssignmentCreateWithoutUserInput[] | MaintenanceAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MaintenanceAssignmentCreateOrConnectWithoutUserInput | MaintenanceAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: MaintenanceAssignmentUpsertWithWhereUniqueWithoutUserInput | MaintenanceAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MaintenanceAssignmentCreateManyUserInputEnvelope
    set?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    disconnect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    delete?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    connect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    update?: MaintenanceAssignmentUpdateWithWhereUniqueWithoutUserInput | MaintenanceAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MaintenanceAssignmentUpdateManyWithWhereWithoutUserInput | MaintenanceAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MaintenanceAssignmentScalarWhereInput | MaintenanceAssignmentScalarWhereInput[]
  }

  export type WorkOrderAssignmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkOrderAssignmentCreateWithoutUserInput, WorkOrderAssignmentUncheckedCreateWithoutUserInput> | WorkOrderAssignmentCreateWithoutUserInput[] | WorkOrderAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderAssignmentCreateOrConnectWithoutUserInput | WorkOrderAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: WorkOrderAssignmentUpsertWithWhereUniqueWithoutUserInput | WorkOrderAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkOrderAssignmentCreateManyUserInputEnvelope
    set?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    disconnect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    delete?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    connect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    update?: WorkOrderAssignmentUpdateWithWhereUniqueWithoutUserInput | WorkOrderAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkOrderAssignmentUpdateManyWithWhereWithoutUserInput | WorkOrderAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkOrderAssignmentScalarWhereInput | WorkOrderAssignmentScalarWhereInput[]
  }

  export type WorkOrderLaborUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkOrderLaborCreateWithoutUserInput, WorkOrderLaborUncheckedCreateWithoutUserInput> | WorkOrderLaborCreateWithoutUserInput[] | WorkOrderLaborUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderLaborCreateOrConnectWithoutUserInput | WorkOrderLaborCreateOrConnectWithoutUserInput[]
    upsert?: WorkOrderLaborUpsertWithWhereUniqueWithoutUserInput | WorkOrderLaborUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkOrderLaborCreateManyUserInputEnvelope
    set?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    disconnect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    delete?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    connect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    update?: WorkOrderLaborUpdateWithWhereUniqueWithoutUserInput | WorkOrderLaborUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkOrderLaborUpdateManyWithWhereWithoutUserInput | WorkOrderLaborUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkOrderLaborScalarWhereInput | WorkOrderLaborScalarWhereInput[]
  }

  export type IncidentUpdateManyWithoutReportedByNestedInput = {
    create?: XOR<IncidentCreateWithoutReportedByInput, IncidentUncheckedCreateWithoutReportedByInput> | IncidentCreateWithoutReportedByInput[] | IncidentUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutReportedByInput | IncidentCreateOrConnectWithoutReportedByInput[]
    upsert?: IncidentUpsertWithWhereUniqueWithoutReportedByInput | IncidentUpsertWithWhereUniqueWithoutReportedByInput[]
    createMany?: IncidentCreateManyReportedByInputEnvelope
    set?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    disconnect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    delete?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    update?: IncidentUpdateWithWhereUniqueWithoutReportedByInput | IncidentUpdateWithWhereUniqueWithoutReportedByInput[]
    updateMany?: IncidentUpdateManyWithWhereWithoutReportedByInput | IncidentUpdateManyWithWhereWithoutReportedByInput[]
    deleteMany?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
  }

  export type WorkOrderLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkOrderLogCreateWithoutUserInput, WorkOrderLogUncheckedCreateWithoutUserInput> | WorkOrderLogCreateWithoutUserInput[] | WorkOrderLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderLogCreateOrConnectWithoutUserInput | WorkOrderLogCreateOrConnectWithoutUserInput[]
    upsert?: WorkOrderLogUpsertWithWhereUniqueWithoutUserInput | WorkOrderLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkOrderLogCreateManyUserInputEnvelope
    set?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    disconnect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    delete?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    connect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    update?: WorkOrderLogUpdateWithWhereUniqueWithoutUserInput | WorkOrderLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkOrderLogUpdateManyWithWhereWithoutUserInput | WorkOrderLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkOrderLogScalarWhereInput | WorkOrderLogScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MaintenanceAssignmentCreateWithoutUserInput, MaintenanceAssignmentUncheckedCreateWithoutUserInput> | MaintenanceAssignmentCreateWithoutUserInput[] | MaintenanceAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MaintenanceAssignmentCreateOrConnectWithoutUserInput | MaintenanceAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: MaintenanceAssignmentUpsertWithWhereUniqueWithoutUserInput | MaintenanceAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MaintenanceAssignmentCreateManyUserInputEnvelope
    set?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    disconnect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    delete?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    connect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    update?: MaintenanceAssignmentUpdateWithWhereUniqueWithoutUserInput | MaintenanceAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MaintenanceAssignmentUpdateManyWithWhereWithoutUserInput | MaintenanceAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MaintenanceAssignmentScalarWhereInput | MaintenanceAssignmentScalarWhereInput[]
  }

  export type WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkOrderAssignmentCreateWithoutUserInput, WorkOrderAssignmentUncheckedCreateWithoutUserInput> | WorkOrderAssignmentCreateWithoutUserInput[] | WorkOrderAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderAssignmentCreateOrConnectWithoutUserInput | WorkOrderAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: WorkOrderAssignmentUpsertWithWhereUniqueWithoutUserInput | WorkOrderAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkOrderAssignmentCreateManyUserInputEnvelope
    set?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    disconnect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    delete?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    connect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    update?: WorkOrderAssignmentUpdateWithWhereUniqueWithoutUserInput | WorkOrderAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkOrderAssignmentUpdateManyWithWhereWithoutUserInput | WorkOrderAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkOrderAssignmentScalarWhereInput | WorkOrderAssignmentScalarWhereInput[]
  }

  export type WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkOrderLaborCreateWithoutUserInput, WorkOrderLaborUncheckedCreateWithoutUserInput> | WorkOrderLaborCreateWithoutUserInput[] | WorkOrderLaborUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderLaborCreateOrConnectWithoutUserInput | WorkOrderLaborCreateOrConnectWithoutUserInput[]
    upsert?: WorkOrderLaborUpsertWithWhereUniqueWithoutUserInput | WorkOrderLaborUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkOrderLaborCreateManyUserInputEnvelope
    set?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    disconnect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    delete?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    connect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    update?: WorkOrderLaborUpdateWithWhereUniqueWithoutUserInput | WorkOrderLaborUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkOrderLaborUpdateManyWithWhereWithoutUserInput | WorkOrderLaborUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkOrderLaborScalarWhereInput | WorkOrderLaborScalarWhereInput[]
  }

  export type IncidentUncheckedUpdateManyWithoutReportedByNestedInput = {
    create?: XOR<IncidentCreateWithoutReportedByInput, IncidentUncheckedCreateWithoutReportedByInput> | IncidentCreateWithoutReportedByInput[] | IncidentUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutReportedByInput | IncidentCreateOrConnectWithoutReportedByInput[]
    upsert?: IncidentUpsertWithWhereUniqueWithoutReportedByInput | IncidentUpsertWithWhereUniqueWithoutReportedByInput[]
    createMany?: IncidentCreateManyReportedByInputEnvelope
    set?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    disconnect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    delete?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    update?: IncidentUpdateWithWhereUniqueWithoutReportedByInput | IncidentUpdateWithWhereUniqueWithoutReportedByInput[]
    updateMany?: IncidentUpdateManyWithWhereWithoutReportedByInput | IncidentUpdateManyWithWhereWithoutReportedByInput[]
    deleteMany?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
  }

  export type WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkOrderLogCreateWithoutUserInput, WorkOrderLogUncheckedCreateWithoutUserInput> | WorkOrderLogCreateWithoutUserInput[] | WorkOrderLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkOrderLogCreateOrConnectWithoutUserInput | WorkOrderLogCreateOrConnectWithoutUserInput[]
    upsert?: WorkOrderLogUpsertWithWhereUniqueWithoutUserInput | WorkOrderLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkOrderLogCreateManyUserInputEnvelope
    set?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    disconnect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    delete?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    connect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    update?: WorkOrderLogUpdateWithWhereUniqueWithoutUserInput | WorkOrderLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkOrderLogUpdateManyWithWhereWithoutUserInput | WorkOrderLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkOrderLogScalarWhereInput | WorkOrderLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type TenantCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<TenantCreateWithoutCategoriesInput, TenantUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCategoriesInput
    connect?: TenantWhereUniqueInput
  }

  export type AssetTypeCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AssetTypeCreateWithoutCategoryInput, AssetTypeUncheckedCreateWithoutCategoryInput> | AssetTypeCreateWithoutCategoryInput[] | AssetTypeUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetTypeCreateOrConnectWithoutCategoryInput | AssetTypeCreateOrConnectWithoutCategoryInput[]
    createMany?: AssetTypeCreateManyCategoryInputEnvelope
    connect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
  }

  export type AssetTypeUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AssetTypeCreateWithoutCategoryInput, AssetTypeUncheckedCreateWithoutCategoryInput> | AssetTypeCreateWithoutCategoryInput[] | AssetTypeUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetTypeCreateOrConnectWithoutCategoryInput | AssetTypeCreateOrConnectWithoutCategoryInput[]
    createMany?: AssetTypeCreateManyCategoryInputEnvelope
    connect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
  }

  export type EnumIndustryTypeFieldUpdateOperationsInput = {
    set?: $Enums.IndustryType
  }

  export type TenantUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<TenantCreateWithoutCategoriesInput, TenantUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCategoriesInput
    upsert?: TenantUpsertWithoutCategoriesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCategoriesInput, TenantUpdateWithoutCategoriesInput>, TenantUncheckedUpdateWithoutCategoriesInput>
  }

  export type AssetTypeUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AssetTypeCreateWithoutCategoryInput, AssetTypeUncheckedCreateWithoutCategoryInput> | AssetTypeCreateWithoutCategoryInput[] | AssetTypeUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetTypeCreateOrConnectWithoutCategoryInput | AssetTypeCreateOrConnectWithoutCategoryInput[]
    upsert?: AssetTypeUpsertWithWhereUniqueWithoutCategoryInput | AssetTypeUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AssetTypeCreateManyCategoryInputEnvelope
    set?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    disconnect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    delete?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    connect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    update?: AssetTypeUpdateWithWhereUniqueWithoutCategoryInput | AssetTypeUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AssetTypeUpdateManyWithWhereWithoutCategoryInput | AssetTypeUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AssetTypeScalarWhereInput | AssetTypeScalarWhereInput[]
  }

  export type AssetTypeUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AssetTypeCreateWithoutCategoryInput, AssetTypeUncheckedCreateWithoutCategoryInput> | AssetTypeCreateWithoutCategoryInput[] | AssetTypeUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetTypeCreateOrConnectWithoutCategoryInput | AssetTypeCreateOrConnectWithoutCategoryInput[]
    upsert?: AssetTypeUpsertWithWhereUniqueWithoutCategoryInput | AssetTypeUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AssetTypeCreateManyCategoryInputEnvelope
    set?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    disconnect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    delete?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    connect?: AssetTypeWhereUniqueInput | AssetTypeWhereUniqueInput[]
    update?: AssetTypeUpdateWithWhereUniqueWithoutCategoryInput | AssetTypeUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AssetTypeUpdateManyWithWhereWithoutCategoryInput | AssetTypeUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AssetTypeScalarWhereInput | AssetTypeScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutAssetTypesInput = {
    create?: XOR<TenantCreateWithoutAssetTypesInput, TenantUncheckedCreateWithoutAssetTypesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAssetTypesInput
    connect?: TenantWhereUniqueInput
  }

  export type AssetCategoryCreateNestedOneWithoutAssetTypesInput = {
    create?: XOR<AssetCategoryCreateWithoutAssetTypesInput, AssetCategoryUncheckedCreateWithoutAssetTypesInput>
    connectOrCreate?: AssetCategoryCreateOrConnectWithoutAssetTypesInput
    connect?: AssetCategoryWhereUniqueInput
  }

  export type AssetCreateNestedManyWithoutAssetTypeInput = {
    create?: XOR<AssetCreateWithoutAssetTypeInput, AssetUncheckedCreateWithoutAssetTypeInput> | AssetCreateWithoutAssetTypeInput[] | AssetUncheckedCreateWithoutAssetTypeInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutAssetTypeInput | AssetCreateOrConnectWithoutAssetTypeInput[]
    createMany?: AssetCreateManyAssetTypeInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutAssetTypeInput = {
    create?: XOR<AssetCreateWithoutAssetTypeInput, AssetUncheckedCreateWithoutAssetTypeInput> | AssetCreateWithoutAssetTypeInput[] | AssetUncheckedCreateWithoutAssetTypeInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutAssetTypeInput | AssetCreateOrConnectWithoutAssetTypeInput[]
    createMany?: AssetCreateManyAssetTypeInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutAssetTypesNestedInput = {
    create?: XOR<TenantCreateWithoutAssetTypesInput, TenantUncheckedCreateWithoutAssetTypesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAssetTypesInput
    upsert?: TenantUpsertWithoutAssetTypesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutAssetTypesInput, TenantUpdateWithoutAssetTypesInput>, TenantUncheckedUpdateWithoutAssetTypesInput>
  }

  export type AssetCategoryUpdateOneWithoutAssetTypesNestedInput = {
    create?: XOR<AssetCategoryCreateWithoutAssetTypesInput, AssetCategoryUncheckedCreateWithoutAssetTypesInput>
    connectOrCreate?: AssetCategoryCreateOrConnectWithoutAssetTypesInput
    upsert?: AssetCategoryUpsertWithoutAssetTypesInput
    disconnect?: AssetCategoryWhereInput | boolean
    delete?: AssetCategoryWhereInput | boolean
    connect?: AssetCategoryWhereUniqueInput
    update?: XOR<XOR<AssetCategoryUpdateToOneWithWhereWithoutAssetTypesInput, AssetCategoryUpdateWithoutAssetTypesInput>, AssetCategoryUncheckedUpdateWithoutAssetTypesInput>
  }

  export type AssetUpdateManyWithoutAssetTypeNestedInput = {
    create?: XOR<AssetCreateWithoutAssetTypeInput, AssetUncheckedCreateWithoutAssetTypeInput> | AssetCreateWithoutAssetTypeInput[] | AssetUncheckedCreateWithoutAssetTypeInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutAssetTypeInput | AssetCreateOrConnectWithoutAssetTypeInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutAssetTypeInput | AssetUpsertWithWhereUniqueWithoutAssetTypeInput[]
    createMany?: AssetCreateManyAssetTypeInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutAssetTypeInput | AssetUpdateWithWhereUniqueWithoutAssetTypeInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutAssetTypeInput | AssetUpdateManyWithWhereWithoutAssetTypeInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutAssetTypeNestedInput = {
    create?: XOR<AssetCreateWithoutAssetTypeInput, AssetUncheckedCreateWithoutAssetTypeInput> | AssetCreateWithoutAssetTypeInput[] | AssetUncheckedCreateWithoutAssetTypeInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutAssetTypeInput | AssetCreateOrConnectWithoutAssetTypeInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutAssetTypeInput | AssetUpsertWithWhereUniqueWithoutAssetTypeInput[]
    createMany?: AssetCreateManyAssetTypeInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutAssetTypeInput | AssetUpdateWithWhereUniqueWithoutAssetTypeInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutAssetTypeInput | AssetUpdateManyWithWhereWithoutAssetTypeInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutAssetsInput = {
    create?: XOR<TenantCreateWithoutAssetsInput, TenantUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAssetsInput
    connect?: TenantWhereUniqueInput
  }

  export type AssetTypeCreateNestedOneWithoutAssetsInput = {
    create?: XOR<AssetTypeCreateWithoutAssetsInput, AssetTypeUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: AssetTypeCreateOrConnectWithoutAssetsInput
    connect?: AssetTypeWhereUniqueInput
  }

  export type AssetMeterCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetMeterCreateWithoutAssetInput, AssetMeterUncheckedCreateWithoutAssetInput> | AssetMeterCreateWithoutAssetInput[] | AssetMeterUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetMeterCreateOrConnectWithoutAssetInput | AssetMeterCreateOrConnectWithoutAssetInput[]
    createMany?: AssetMeterCreateManyAssetInputEnvelope
    connect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
  }

  export type MaintenanceAssetsCreateNestedManyWithoutAssetInput = {
    create?: XOR<MaintenanceAssetsCreateWithoutAssetInput, MaintenanceAssetsUncheckedCreateWithoutAssetInput> | MaintenanceAssetsCreateWithoutAssetInput[] | MaintenanceAssetsUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaintenanceAssetsCreateOrConnectWithoutAssetInput | MaintenanceAssetsCreateOrConnectWithoutAssetInput[]
    createMany?: MaintenanceAssetsCreateManyAssetInputEnvelope
    connect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
  }

  export type WorkOrderAssetsCreateNestedManyWithoutAssetInput = {
    create?: XOR<WorkOrderAssetsCreateWithoutAssetInput, WorkOrderAssetsUncheckedCreateWithoutAssetInput> | WorkOrderAssetsCreateWithoutAssetInput[] | WorkOrderAssetsUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: WorkOrderAssetsCreateOrConnectWithoutAssetInput | WorkOrderAssetsCreateOrConnectWithoutAssetInput[]
    createMany?: WorkOrderAssetsCreateManyAssetInputEnvelope
    connect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
  }

  export type IncidentCreateNestedManyWithoutAssetInput = {
    create?: XOR<IncidentCreateWithoutAssetInput, IncidentUncheckedCreateWithoutAssetInput> | IncidentCreateWithoutAssetInput[] | IncidentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutAssetInput | IncidentCreateOrConnectWithoutAssetInput[]
    createMany?: IncidentCreateManyAssetInputEnvelope
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
  }

  export type AssetMeterUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetMeterCreateWithoutAssetInput, AssetMeterUncheckedCreateWithoutAssetInput> | AssetMeterCreateWithoutAssetInput[] | AssetMeterUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetMeterCreateOrConnectWithoutAssetInput | AssetMeterCreateOrConnectWithoutAssetInput[]
    createMany?: AssetMeterCreateManyAssetInputEnvelope
    connect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
  }

  export type MaintenanceAssetsUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<MaintenanceAssetsCreateWithoutAssetInput, MaintenanceAssetsUncheckedCreateWithoutAssetInput> | MaintenanceAssetsCreateWithoutAssetInput[] | MaintenanceAssetsUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaintenanceAssetsCreateOrConnectWithoutAssetInput | MaintenanceAssetsCreateOrConnectWithoutAssetInput[]
    createMany?: MaintenanceAssetsCreateManyAssetInputEnvelope
    connect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
  }

  export type WorkOrderAssetsUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<WorkOrderAssetsCreateWithoutAssetInput, WorkOrderAssetsUncheckedCreateWithoutAssetInput> | WorkOrderAssetsCreateWithoutAssetInput[] | WorkOrderAssetsUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: WorkOrderAssetsCreateOrConnectWithoutAssetInput | WorkOrderAssetsCreateOrConnectWithoutAssetInput[]
    createMany?: WorkOrderAssetsCreateManyAssetInputEnvelope
    connect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
  }

  export type IncidentUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<IncidentCreateWithoutAssetInput, IncidentUncheckedCreateWithoutAssetInput> | IncidentCreateWithoutAssetInput[] | IncidentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutAssetInput | IncidentCreateOrConnectWithoutAssetInput[]
    createMany?: IncidentCreateManyAssetInputEnvelope
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
  }

  export type EnumAssetStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssetStatus
  }

  export type TenantUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<TenantCreateWithoutAssetsInput, TenantUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAssetsInput
    upsert?: TenantUpsertWithoutAssetsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutAssetsInput, TenantUpdateWithoutAssetsInput>, TenantUncheckedUpdateWithoutAssetsInput>
  }

  export type AssetTypeUpdateOneWithoutAssetsNestedInput = {
    create?: XOR<AssetTypeCreateWithoutAssetsInput, AssetTypeUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: AssetTypeCreateOrConnectWithoutAssetsInput
    upsert?: AssetTypeUpsertWithoutAssetsInput
    disconnect?: AssetTypeWhereInput | boolean
    delete?: AssetTypeWhereInput | boolean
    connect?: AssetTypeWhereUniqueInput
    update?: XOR<XOR<AssetTypeUpdateToOneWithWhereWithoutAssetsInput, AssetTypeUpdateWithoutAssetsInput>, AssetTypeUncheckedUpdateWithoutAssetsInput>
  }

  export type AssetMeterUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetMeterCreateWithoutAssetInput, AssetMeterUncheckedCreateWithoutAssetInput> | AssetMeterCreateWithoutAssetInput[] | AssetMeterUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetMeterCreateOrConnectWithoutAssetInput | AssetMeterCreateOrConnectWithoutAssetInput[]
    upsert?: AssetMeterUpsertWithWhereUniqueWithoutAssetInput | AssetMeterUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetMeterCreateManyAssetInputEnvelope
    set?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    disconnect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    delete?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    connect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    update?: AssetMeterUpdateWithWhereUniqueWithoutAssetInput | AssetMeterUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetMeterUpdateManyWithWhereWithoutAssetInput | AssetMeterUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetMeterScalarWhereInput | AssetMeterScalarWhereInput[]
  }

  export type MaintenanceAssetsUpdateManyWithoutAssetNestedInput = {
    create?: XOR<MaintenanceAssetsCreateWithoutAssetInput, MaintenanceAssetsUncheckedCreateWithoutAssetInput> | MaintenanceAssetsCreateWithoutAssetInput[] | MaintenanceAssetsUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaintenanceAssetsCreateOrConnectWithoutAssetInput | MaintenanceAssetsCreateOrConnectWithoutAssetInput[]
    upsert?: MaintenanceAssetsUpsertWithWhereUniqueWithoutAssetInput | MaintenanceAssetsUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: MaintenanceAssetsCreateManyAssetInputEnvelope
    set?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    disconnect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    delete?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    connect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    update?: MaintenanceAssetsUpdateWithWhereUniqueWithoutAssetInput | MaintenanceAssetsUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: MaintenanceAssetsUpdateManyWithWhereWithoutAssetInput | MaintenanceAssetsUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: MaintenanceAssetsScalarWhereInput | MaintenanceAssetsScalarWhereInput[]
  }

  export type WorkOrderAssetsUpdateManyWithoutAssetNestedInput = {
    create?: XOR<WorkOrderAssetsCreateWithoutAssetInput, WorkOrderAssetsUncheckedCreateWithoutAssetInput> | WorkOrderAssetsCreateWithoutAssetInput[] | WorkOrderAssetsUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: WorkOrderAssetsCreateOrConnectWithoutAssetInput | WorkOrderAssetsCreateOrConnectWithoutAssetInput[]
    upsert?: WorkOrderAssetsUpsertWithWhereUniqueWithoutAssetInput | WorkOrderAssetsUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: WorkOrderAssetsCreateManyAssetInputEnvelope
    set?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    disconnect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    delete?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    connect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    update?: WorkOrderAssetsUpdateWithWhereUniqueWithoutAssetInput | WorkOrderAssetsUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: WorkOrderAssetsUpdateManyWithWhereWithoutAssetInput | WorkOrderAssetsUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: WorkOrderAssetsScalarWhereInput | WorkOrderAssetsScalarWhereInput[]
  }

  export type IncidentUpdateManyWithoutAssetNestedInput = {
    create?: XOR<IncidentCreateWithoutAssetInput, IncidentUncheckedCreateWithoutAssetInput> | IncidentCreateWithoutAssetInput[] | IncidentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutAssetInput | IncidentCreateOrConnectWithoutAssetInput[]
    upsert?: IncidentUpsertWithWhereUniqueWithoutAssetInput | IncidentUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: IncidentCreateManyAssetInputEnvelope
    set?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    disconnect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    delete?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    update?: IncidentUpdateWithWhereUniqueWithoutAssetInput | IncidentUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: IncidentUpdateManyWithWhereWithoutAssetInput | IncidentUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
  }

  export type AssetMeterUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetMeterCreateWithoutAssetInput, AssetMeterUncheckedCreateWithoutAssetInput> | AssetMeterCreateWithoutAssetInput[] | AssetMeterUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetMeterCreateOrConnectWithoutAssetInput | AssetMeterCreateOrConnectWithoutAssetInput[]
    upsert?: AssetMeterUpsertWithWhereUniqueWithoutAssetInput | AssetMeterUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetMeterCreateManyAssetInputEnvelope
    set?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    disconnect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    delete?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    connect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    update?: AssetMeterUpdateWithWhereUniqueWithoutAssetInput | AssetMeterUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetMeterUpdateManyWithWhereWithoutAssetInput | AssetMeterUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetMeterScalarWhereInput | AssetMeterScalarWhereInput[]
  }

  export type MaintenanceAssetsUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<MaintenanceAssetsCreateWithoutAssetInput, MaintenanceAssetsUncheckedCreateWithoutAssetInput> | MaintenanceAssetsCreateWithoutAssetInput[] | MaintenanceAssetsUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaintenanceAssetsCreateOrConnectWithoutAssetInput | MaintenanceAssetsCreateOrConnectWithoutAssetInput[]
    upsert?: MaintenanceAssetsUpsertWithWhereUniqueWithoutAssetInput | MaintenanceAssetsUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: MaintenanceAssetsCreateManyAssetInputEnvelope
    set?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    disconnect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    delete?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    connect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    update?: MaintenanceAssetsUpdateWithWhereUniqueWithoutAssetInput | MaintenanceAssetsUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: MaintenanceAssetsUpdateManyWithWhereWithoutAssetInput | MaintenanceAssetsUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: MaintenanceAssetsScalarWhereInput | MaintenanceAssetsScalarWhereInput[]
  }

  export type WorkOrderAssetsUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<WorkOrderAssetsCreateWithoutAssetInput, WorkOrderAssetsUncheckedCreateWithoutAssetInput> | WorkOrderAssetsCreateWithoutAssetInput[] | WorkOrderAssetsUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: WorkOrderAssetsCreateOrConnectWithoutAssetInput | WorkOrderAssetsCreateOrConnectWithoutAssetInput[]
    upsert?: WorkOrderAssetsUpsertWithWhereUniqueWithoutAssetInput | WorkOrderAssetsUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: WorkOrderAssetsCreateManyAssetInputEnvelope
    set?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    disconnect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    delete?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    connect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    update?: WorkOrderAssetsUpdateWithWhereUniqueWithoutAssetInput | WorkOrderAssetsUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: WorkOrderAssetsUpdateManyWithWhereWithoutAssetInput | WorkOrderAssetsUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: WorkOrderAssetsScalarWhereInput | WorkOrderAssetsScalarWhereInput[]
  }

  export type IncidentUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<IncidentCreateWithoutAssetInput, IncidentUncheckedCreateWithoutAssetInput> | IncidentCreateWithoutAssetInput[] | IncidentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutAssetInput | IncidentCreateOrConnectWithoutAssetInput[]
    upsert?: IncidentUpsertWithWhereUniqueWithoutAssetInput | IncidentUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: IncidentCreateManyAssetInputEnvelope
    set?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    disconnect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    delete?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    update?: IncidentUpdateWithWhereUniqueWithoutAssetInput | IncidentUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: IncidentUpdateManyWithWhereWithoutAssetInput | IncidentUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutMetersInput = {
    create?: XOR<TenantCreateWithoutMetersInput, TenantUncheckedCreateWithoutMetersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMetersInput
    connect?: TenantWhereUniqueInput
  }

  export type AssetMeterCreateNestedManyWithoutMeterInput = {
    create?: XOR<AssetMeterCreateWithoutMeterInput, AssetMeterUncheckedCreateWithoutMeterInput> | AssetMeterCreateWithoutMeterInput[] | AssetMeterUncheckedCreateWithoutMeterInput[]
    connectOrCreate?: AssetMeterCreateOrConnectWithoutMeterInput | AssetMeterCreateOrConnectWithoutMeterInput[]
    createMany?: AssetMeterCreateManyMeterInputEnvelope
    connect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
  }

  export type MaintenanceScheduleCreateNestedManyWithoutMeterInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutMeterInput, MaintenanceScheduleUncheckedCreateWithoutMeterInput> | MaintenanceScheduleCreateWithoutMeterInput[] | MaintenanceScheduleUncheckedCreateWithoutMeterInput[]
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutMeterInput | MaintenanceScheduleCreateOrConnectWithoutMeterInput[]
    createMany?: MaintenanceScheduleCreateManyMeterInputEnvelope
    connect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
  }

  export type AssetMeterUncheckedCreateNestedManyWithoutMeterInput = {
    create?: XOR<AssetMeterCreateWithoutMeterInput, AssetMeterUncheckedCreateWithoutMeterInput> | AssetMeterCreateWithoutMeterInput[] | AssetMeterUncheckedCreateWithoutMeterInput[]
    connectOrCreate?: AssetMeterCreateOrConnectWithoutMeterInput | AssetMeterCreateOrConnectWithoutMeterInput[]
    createMany?: AssetMeterCreateManyMeterInputEnvelope
    connect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
  }

  export type MaintenanceScheduleUncheckedCreateNestedManyWithoutMeterInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutMeterInput, MaintenanceScheduleUncheckedCreateWithoutMeterInput> | MaintenanceScheduleCreateWithoutMeterInput[] | MaintenanceScheduleUncheckedCreateWithoutMeterInput[]
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutMeterInput | MaintenanceScheduleCreateOrConnectWithoutMeterInput[]
    createMany?: MaintenanceScheduleCreateManyMeterInputEnvelope
    connect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutMetersNestedInput = {
    create?: XOR<TenantCreateWithoutMetersInput, TenantUncheckedCreateWithoutMetersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMetersInput
    upsert?: TenantUpsertWithoutMetersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutMetersInput, TenantUpdateWithoutMetersInput>, TenantUncheckedUpdateWithoutMetersInput>
  }

  export type AssetMeterUpdateManyWithoutMeterNestedInput = {
    create?: XOR<AssetMeterCreateWithoutMeterInput, AssetMeterUncheckedCreateWithoutMeterInput> | AssetMeterCreateWithoutMeterInput[] | AssetMeterUncheckedCreateWithoutMeterInput[]
    connectOrCreate?: AssetMeterCreateOrConnectWithoutMeterInput | AssetMeterCreateOrConnectWithoutMeterInput[]
    upsert?: AssetMeterUpsertWithWhereUniqueWithoutMeterInput | AssetMeterUpsertWithWhereUniqueWithoutMeterInput[]
    createMany?: AssetMeterCreateManyMeterInputEnvelope
    set?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    disconnect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    delete?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    connect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    update?: AssetMeterUpdateWithWhereUniqueWithoutMeterInput | AssetMeterUpdateWithWhereUniqueWithoutMeterInput[]
    updateMany?: AssetMeterUpdateManyWithWhereWithoutMeterInput | AssetMeterUpdateManyWithWhereWithoutMeterInput[]
    deleteMany?: AssetMeterScalarWhereInput | AssetMeterScalarWhereInput[]
  }

  export type MaintenanceScheduleUpdateManyWithoutMeterNestedInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutMeterInput, MaintenanceScheduleUncheckedCreateWithoutMeterInput> | MaintenanceScheduleCreateWithoutMeterInput[] | MaintenanceScheduleUncheckedCreateWithoutMeterInput[]
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutMeterInput | MaintenanceScheduleCreateOrConnectWithoutMeterInput[]
    upsert?: MaintenanceScheduleUpsertWithWhereUniqueWithoutMeterInput | MaintenanceScheduleUpsertWithWhereUniqueWithoutMeterInput[]
    createMany?: MaintenanceScheduleCreateManyMeterInputEnvelope
    set?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    disconnect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    delete?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    connect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    update?: MaintenanceScheduleUpdateWithWhereUniqueWithoutMeterInput | MaintenanceScheduleUpdateWithWhereUniqueWithoutMeterInput[]
    updateMany?: MaintenanceScheduleUpdateManyWithWhereWithoutMeterInput | MaintenanceScheduleUpdateManyWithWhereWithoutMeterInput[]
    deleteMany?: MaintenanceScheduleScalarWhereInput | MaintenanceScheduleScalarWhereInput[]
  }

  export type AssetMeterUncheckedUpdateManyWithoutMeterNestedInput = {
    create?: XOR<AssetMeterCreateWithoutMeterInput, AssetMeterUncheckedCreateWithoutMeterInput> | AssetMeterCreateWithoutMeterInput[] | AssetMeterUncheckedCreateWithoutMeterInput[]
    connectOrCreate?: AssetMeterCreateOrConnectWithoutMeterInput | AssetMeterCreateOrConnectWithoutMeterInput[]
    upsert?: AssetMeterUpsertWithWhereUniqueWithoutMeterInput | AssetMeterUpsertWithWhereUniqueWithoutMeterInput[]
    createMany?: AssetMeterCreateManyMeterInputEnvelope
    set?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    disconnect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    delete?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    connect?: AssetMeterWhereUniqueInput | AssetMeterWhereUniqueInput[]
    update?: AssetMeterUpdateWithWhereUniqueWithoutMeterInput | AssetMeterUpdateWithWhereUniqueWithoutMeterInput[]
    updateMany?: AssetMeterUpdateManyWithWhereWithoutMeterInput | AssetMeterUpdateManyWithWhereWithoutMeterInput[]
    deleteMany?: AssetMeterScalarWhereInput | AssetMeterScalarWhereInput[]
  }

  export type MaintenanceScheduleUncheckedUpdateManyWithoutMeterNestedInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutMeterInput, MaintenanceScheduleUncheckedCreateWithoutMeterInput> | MaintenanceScheduleCreateWithoutMeterInput[] | MaintenanceScheduleUncheckedCreateWithoutMeterInput[]
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutMeterInput | MaintenanceScheduleCreateOrConnectWithoutMeterInput[]
    upsert?: MaintenanceScheduleUpsertWithWhereUniqueWithoutMeterInput | MaintenanceScheduleUpsertWithWhereUniqueWithoutMeterInput[]
    createMany?: MaintenanceScheduleCreateManyMeterInputEnvelope
    set?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    disconnect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    delete?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    connect?: MaintenanceScheduleWhereUniqueInput | MaintenanceScheduleWhereUniqueInput[]
    update?: MaintenanceScheduleUpdateWithWhereUniqueWithoutMeterInput | MaintenanceScheduleUpdateWithWhereUniqueWithoutMeterInput[]
    updateMany?: MaintenanceScheduleUpdateManyWithWhereWithoutMeterInput | MaintenanceScheduleUpdateManyWithWhereWithoutMeterInput[]
    deleteMany?: MaintenanceScheduleScalarWhereInput | MaintenanceScheduleScalarWhereInput[]
  }

  export type AssetCreateNestedOneWithoutAssetMetersInput = {
    create?: XOR<AssetCreateWithoutAssetMetersInput, AssetUncheckedCreateWithoutAssetMetersInput>
    connectOrCreate?: AssetCreateOrConnectWithoutAssetMetersInput
    connect?: AssetWhereUniqueInput
  }

  export type MeterCreateNestedOneWithoutAssetMetersInput = {
    create?: XOR<MeterCreateWithoutAssetMetersInput, MeterUncheckedCreateWithoutAssetMetersInput>
    connectOrCreate?: MeterCreateOrConnectWithoutAssetMetersInput
    connect?: MeterWhereUniqueInput
  }

  export type MeterReadingCreateNestedManyWithoutAssetMeterInput = {
    create?: XOR<MeterReadingCreateWithoutAssetMeterInput, MeterReadingUncheckedCreateWithoutAssetMeterInput> | MeterReadingCreateWithoutAssetMeterInput[] | MeterReadingUncheckedCreateWithoutAssetMeterInput[]
    connectOrCreate?: MeterReadingCreateOrConnectWithoutAssetMeterInput | MeterReadingCreateOrConnectWithoutAssetMeterInput[]
    createMany?: MeterReadingCreateManyAssetMeterInputEnvelope
    connect?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
  }

  export type MeterReadingUncheckedCreateNestedManyWithoutAssetMeterInput = {
    create?: XOR<MeterReadingCreateWithoutAssetMeterInput, MeterReadingUncheckedCreateWithoutAssetMeterInput> | MeterReadingCreateWithoutAssetMeterInput[] | MeterReadingUncheckedCreateWithoutAssetMeterInput[]
    connectOrCreate?: MeterReadingCreateOrConnectWithoutAssetMeterInput | MeterReadingCreateOrConnectWithoutAssetMeterInput[]
    createMany?: MeterReadingCreateManyAssetMeterInputEnvelope
    connect?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type AssetUpdateOneRequiredWithoutAssetMetersNestedInput = {
    create?: XOR<AssetCreateWithoutAssetMetersInput, AssetUncheckedCreateWithoutAssetMetersInput>
    connectOrCreate?: AssetCreateOrConnectWithoutAssetMetersInput
    upsert?: AssetUpsertWithoutAssetMetersInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutAssetMetersInput, AssetUpdateWithoutAssetMetersInput>, AssetUncheckedUpdateWithoutAssetMetersInput>
  }

  export type MeterUpdateOneRequiredWithoutAssetMetersNestedInput = {
    create?: XOR<MeterCreateWithoutAssetMetersInput, MeterUncheckedCreateWithoutAssetMetersInput>
    connectOrCreate?: MeterCreateOrConnectWithoutAssetMetersInput
    upsert?: MeterUpsertWithoutAssetMetersInput
    connect?: MeterWhereUniqueInput
    update?: XOR<XOR<MeterUpdateToOneWithWhereWithoutAssetMetersInput, MeterUpdateWithoutAssetMetersInput>, MeterUncheckedUpdateWithoutAssetMetersInput>
  }

  export type MeterReadingUpdateManyWithoutAssetMeterNestedInput = {
    create?: XOR<MeterReadingCreateWithoutAssetMeterInput, MeterReadingUncheckedCreateWithoutAssetMeterInput> | MeterReadingCreateWithoutAssetMeterInput[] | MeterReadingUncheckedCreateWithoutAssetMeterInput[]
    connectOrCreate?: MeterReadingCreateOrConnectWithoutAssetMeterInput | MeterReadingCreateOrConnectWithoutAssetMeterInput[]
    upsert?: MeterReadingUpsertWithWhereUniqueWithoutAssetMeterInput | MeterReadingUpsertWithWhereUniqueWithoutAssetMeterInput[]
    createMany?: MeterReadingCreateManyAssetMeterInputEnvelope
    set?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
    disconnect?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
    delete?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
    connect?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
    update?: MeterReadingUpdateWithWhereUniqueWithoutAssetMeterInput | MeterReadingUpdateWithWhereUniqueWithoutAssetMeterInput[]
    updateMany?: MeterReadingUpdateManyWithWhereWithoutAssetMeterInput | MeterReadingUpdateManyWithWhereWithoutAssetMeterInput[]
    deleteMany?: MeterReadingScalarWhereInput | MeterReadingScalarWhereInput[]
  }

  export type MeterReadingUncheckedUpdateManyWithoutAssetMeterNestedInput = {
    create?: XOR<MeterReadingCreateWithoutAssetMeterInput, MeterReadingUncheckedCreateWithoutAssetMeterInput> | MeterReadingCreateWithoutAssetMeterInput[] | MeterReadingUncheckedCreateWithoutAssetMeterInput[]
    connectOrCreate?: MeterReadingCreateOrConnectWithoutAssetMeterInput | MeterReadingCreateOrConnectWithoutAssetMeterInput[]
    upsert?: MeterReadingUpsertWithWhereUniqueWithoutAssetMeterInput | MeterReadingUpsertWithWhereUniqueWithoutAssetMeterInput[]
    createMany?: MeterReadingCreateManyAssetMeterInputEnvelope
    set?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
    disconnect?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
    delete?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
    connect?: MeterReadingWhereUniqueInput | MeterReadingWhereUniqueInput[]
    update?: MeterReadingUpdateWithWhereUniqueWithoutAssetMeterInput | MeterReadingUpdateWithWhereUniqueWithoutAssetMeterInput[]
    updateMany?: MeterReadingUpdateManyWithWhereWithoutAssetMeterInput | MeterReadingUpdateManyWithWhereWithoutAssetMeterInput[]
    deleteMany?: MeterReadingScalarWhereInput | MeterReadingScalarWhereInput[]
  }

  export type AssetMeterCreateNestedOneWithoutReadingsInput = {
    create?: XOR<AssetMeterCreateWithoutReadingsInput, AssetMeterUncheckedCreateWithoutReadingsInput>
    connectOrCreate?: AssetMeterCreateOrConnectWithoutReadingsInput
    connect?: AssetMeterWhereUniqueInput
  }

  export type AssetMeterUpdateOneRequiredWithoutReadingsNestedInput = {
    create?: XOR<AssetMeterCreateWithoutReadingsInput, AssetMeterUncheckedCreateWithoutReadingsInput>
    connectOrCreate?: AssetMeterCreateOrConnectWithoutReadingsInput
    upsert?: AssetMeterUpsertWithoutReadingsInput
    connect?: AssetMeterWhereUniqueInput
    update?: XOR<XOR<AssetMeterUpdateToOneWithWhereWithoutReadingsInput, AssetMeterUpdateWithoutReadingsInput>, AssetMeterUncheckedUpdateWithoutReadingsInput>
  }

  export type TenantCreateNestedOneWithoutMaintenanceInput = {
    create?: XOR<TenantCreateWithoutMaintenanceInput, TenantUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMaintenanceInput
    connect?: TenantWhereUniqueInput
  }

  export type MeterCreateNestedOneWithoutMaintenanceInput = {
    create?: XOR<MeterCreateWithoutMaintenanceInput, MeterUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: MeterCreateOrConnectWithoutMaintenanceInput
    connect?: MeterWhereUniqueInput
  }

  export type MaintenanceAssignmentCreateNestedManyWithoutMaintenanceInput = {
    create?: XOR<MaintenanceAssignmentCreateWithoutMaintenanceInput, MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput> | MaintenanceAssignmentCreateWithoutMaintenanceInput[] | MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput | MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput[]
    createMany?: MaintenanceAssignmentCreateManyMaintenanceInputEnvelope
    connect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
  }

  export type MaintenanceAssetsCreateNestedManyWithoutMaintenanceInput = {
    create?: XOR<MaintenanceAssetsCreateWithoutMaintenanceInput, MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput> | MaintenanceAssetsCreateWithoutMaintenanceInput[] | MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput | MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput[]
    createMany?: MaintenanceAssetsCreateManyMaintenanceInputEnvelope
    connect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
  }

  export type WorkOrderCreateNestedManyWithoutMaintenanceInput = {
    create?: XOR<WorkOrderCreateWithoutMaintenanceInput, WorkOrderUncheckedCreateWithoutMaintenanceInput> | WorkOrderCreateWithoutMaintenanceInput[] | WorkOrderUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutMaintenanceInput | WorkOrderCreateOrConnectWithoutMaintenanceInput[]
    createMany?: WorkOrderCreateManyMaintenanceInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type MaintenanceAssignmentUncheckedCreateNestedManyWithoutMaintenanceInput = {
    create?: XOR<MaintenanceAssignmentCreateWithoutMaintenanceInput, MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput> | MaintenanceAssignmentCreateWithoutMaintenanceInput[] | MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput | MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput[]
    createMany?: MaintenanceAssignmentCreateManyMaintenanceInputEnvelope
    connect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
  }

  export type MaintenanceAssetsUncheckedCreateNestedManyWithoutMaintenanceInput = {
    create?: XOR<MaintenanceAssetsCreateWithoutMaintenanceInput, MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput> | MaintenanceAssetsCreateWithoutMaintenanceInput[] | MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput | MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput[]
    createMany?: MaintenanceAssetsCreateManyMaintenanceInputEnvelope
    connect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutMaintenanceInput = {
    create?: XOR<WorkOrderCreateWithoutMaintenanceInput, WorkOrderUncheckedCreateWithoutMaintenanceInput> | WorkOrderCreateWithoutMaintenanceInput[] | WorkOrderUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutMaintenanceInput | WorkOrderCreateOrConnectWithoutMaintenanceInput[]
    createMany?: WorkOrderCreateManyMaintenanceInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type EnumMaintenanceTriggerFieldUpdateOperationsInput = {
    set?: $Enums.MaintenanceTrigger
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumMaintenanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.MaintenanceStatus
  }

  export type EnumCallPriorityFieldUpdateOperationsInput = {
    set?: $Enums.CallPriority
  }

  export type TenantUpdateOneRequiredWithoutMaintenanceNestedInput = {
    create?: XOR<TenantCreateWithoutMaintenanceInput, TenantUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMaintenanceInput
    upsert?: TenantUpsertWithoutMaintenanceInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutMaintenanceInput, TenantUpdateWithoutMaintenanceInput>, TenantUncheckedUpdateWithoutMaintenanceInput>
  }

  export type MeterUpdateOneWithoutMaintenanceNestedInput = {
    create?: XOR<MeterCreateWithoutMaintenanceInput, MeterUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: MeterCreateOrConnectWithoutMaintenanceInput
    upsert?: MeterUpsertWithoutMaintenanceInput
    disconnect?: MeterWhereInput | boolean
    delete?: MeterWhereInput | boolean
    connect?: MeterWhereUniqueInput
    update?: XOR<XOR<MeterUpdateToOneWithWhereWithoutMaintenanceInput, MeterUpdateWithoutMaintenanceInput>, MeterUncheckedUpdateWithoutMaintenanceInput>
  }

  export type MaintenanceAssignmentUpdateManyWithoutMaintenanceNestedInput = {
    create?: XOR<MaintenanceAssignmentCreateWithoutMaintenanceInput, MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput> | MaintenanceAssignmentCreateWithoutMaintenanceInput[] | MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput | MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput[]
    upsert?: MaintenanceAssignmentUpsertWithWhereUniqueWithoutMaintenanceInput | MaintenanceAssignmentUpsertWithWhereUniqueWithoutMaintenanceInput[]
    createMany?: MaintenanceAssignmentCreateManyMaintenanceInputEnvelope
    set?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    disconnect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    delete?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    connect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    update?: MaintenanceAssignmentUpdateWithWhereUniqueWithoutMaintenanceInput | MaintenanceAssignmentUpdateWithWhereUniqueWithoutMaintenanceInput[]
    updateMany?: MaintenanceAssignmentUpdateManyWithWhereWithoutMaintenanceInput | MaintenanceAssignmentUpdateManyWithWhereWithoutMaintenanceInput[]
    deleteMany?: MaintenanceAssignmentScalarWhereInput | MaintenanceAssignmentScalarWhereInput[]
  }

  export type MaintenanceAssetsUpdateManyWithoutMaintenanceNestedInput = {
    create?: XOR<MaintenanceAssetsCreateWithoutMaintenanceInput, MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput> | MaintenanceAssetsCreateWithoutMaintenanceInput[] | MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput | MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput[]
    upsert?: MaintenanceAssetsUpsertWithWhereUniqueWithoutMaintenanceInput | MaintenanceAssetsUpsertWithWhereUniqueWithoutMaintenanceInput[]
    createMany?: MaintenanceAssetsCreateManyMaintenanceInputEnvelope
    set?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    disconnect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    delete?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    connect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    update?: MaintenanceAssetsUpdateWithWhereUniqueWithoutMaintenanceInput | MaintenanceAssetsUpdateWithWhereUniqueWithoutMaintenanceInput[]
    updateMany?: MaintenanceAssetsUpdateManyWithWhereWithoutMaintenanceInput | MaintenanceAssetsUpdateManyWithWhereWithoutMaintenanceInput[]
    deleteMany?: MaintenanceAssetsScalarWhereInput | MaintenanceAssetsScalarWhereInput[]
  }

  export type WorkOrderUpdateManyWithoutMaintenanceNestedInput = {
    create?: XOR<WorkOrderCreateWithoutMaintenanceInput, WorkOrderUncheckedCreateWithoutMaintenanceInput> | WorkOrderCreateWithoutMaintenanceInput[] | WorkOrderUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutMaintenanceInput | WorkOrderCreateOrConnectWithoutMaintenanceInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutMaintenanceInput | WorkOrderUpsertWithWhereUniqueWithoutMaintenanceInput[]
    createMany?: WorkOrderCreateManyMaintenanceInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutMaintenanceInput | WorkOrderUpdateWithWhereUniqueWithoutMaintenanceInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutMaintenanceInput | WorkOrderUpdateManyWithWhereWithoutMaintenanceInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type MaintenanceAssignmentUncheckedUpdateManyWithoutMaintenanceNestedInput = {
    create?: XOR<MaintenanceAssignmentCreateWithoutMaintenanceInput, MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput> | MaintenanceAssignmentCreateWithoutMaintenanceInput[] | MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput | MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput[]
    upsert?: MaintenanceAssignmentUpsertWithWhereUniqueWithoutMaintenanceInput | MaintenanceAssignmentUpsertWithWhereUniqueWithoutMaintenanceInput[]
    createMany?: MaintenanceAssignmentCreateManyMaintenanceInputEnvelope
    set?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    disconnect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    delete?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    connect?: MaintenanceAssignmentWhereUniqueInput | MaintenanceAssignmentWhereUniqueInput[]
    update?: MaintenanceAssignmentUpdateWithWhereUniqueWithoutMaintenanceInput | MaintenanceAssignmentUpdateWithWhereUniqueWithoutMaintenanceInput[]
    updateMany?: MaintenanceAssignmentUpdateManyWithWhereWithoutMaintenanceInput | MaintenanceAssignmentUpdateManyWithWhereWithoutMaintenanceInput[]
    deleteMany?: MaintenanceAssignmentScalarWhereInput | MaintenanceAssignmentScalarWhereInput[]
  }

  export type MaintenanceAssetsUncheckedUpdateManyWithoutMaintenanceNestedInput = {
    create?: XOR<MaintenanceAssetsCreateWithoutMaintenanceInput, MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput> | MaintenanceAssetsCreateWithoutMaintenanceInput[] | MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput | MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput[]
    upsert?: MaintenanceAssetsUpsertWithWhereUniqueWithoutMaintenanceInput | MaintenanceAssetsUpsertWithWhereUniqueWithoutMaintenanceInput[]
    createMany?: MaintenanceAssetsCreateManyMaintenanceInputEnvelope
    set?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    disconnect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    delete?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    connect?: MaintenanceAssetsWhereUniqueInput | MaintenanceAssetsWhereUniqueInput[]
    update?: MaintenanceAssetsUpdateWithWhereUniqueWithoutMaintenanceInput | MaintenanceAssetsUpdateWithWhereUniqueWithoutMaintenanceInput[]
    updateMany?: MaintenanceAssetsUpdateManyWithWhereWithoutMaintenanceInput | MaintenanceAssetsUpdateManyWithWhereWithoutMaintenanceInput[]
    deleteMany?: MaintenanceAssetsScalarWhereInput | MaintenanceAssetsScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutMaintenanceNestedInput = {
    create?: XOR<WorkOrderCreateWithoutMaintenanceInput, WorkOrderUncheckedCreateWithoutMaintenanceInput> | WorkOrderCreateWithoutMaintenanceInput[] | WorkOrderUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutMaintenanceInput | WorkOrderCreateOrConnectWithoutMaintenanceInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutMaintenanceInput | WorkOrderUpsertWithWhereUniqueWithoutMaintenanceInput[]
    createMany?: WorkOrderCreateManyMaintenanceInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutMaintenanceInput | WorkOrderUpdateWithWhereUniqueWithoutMaintenanceInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutMaintenanceInput | WorkOrderUpdateManyWithWhereWithoutMaintenanceInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type MaintenanceScheduleCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutAssignmentsInput, MaintenanceScheduleUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutAssignmentsInput
    connect?: MaintenanceScheduleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type MaintenanceScheduleUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutAssignmentsInput, MaintenanceScheduleUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutAssignmentsInput
    upsert?: MaintenanceScheduleUpsertWithoutAssignmentsInput
    connect?: MaintenanceScheduleWhereUniqueInput
    update?: XOR<XOR<MaintenanceScheduleUpdateToOneWithWhereWithoutAssignmentsInput, MaintenanceScheduleUpdateWithoutAssignmentsInput>, MaintenanceScheduleUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsInput
    upsert?: UserUpsertWithoutAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentsInput, UserUpdateWithoutAssignmentsInput>, UserUncheckedUpdateWithoutAssignmentsInput>
  }

  export type MaintenanceScheduleCreateNestedOneWithoutAssetsInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutAssetsInput, MaintenanceScheduleUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutAssetsInput
    connect?: MaintenanceScheduleWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutMaintenanceInput = {
    create?: XOR<AssetCreateWithoutMaintenanceInput, AssetUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: AssetCreateOrConnectWithoutMaintenanceInput
    connect?: AssetWhereUniqueInput
  }

  export type MaintenanceScheduleUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutAssetsInput, MaintenanceScheduleUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutAssetsInput
    upsert?: MaintenanceScheduleUpsertWithoutAssetsInput
    connect?: MaintenanceScheduleWhereUniqueInput
    update?: XOR<XOR<MaintenanceScheduleUpdateToOneWithWhereWithoutAssetsInput, MaintenanceScheduleUpdateWithoutAssetsInput>, MaintenanceScheduleUncheckedUpdateWithoutAssetsInput>
  }

  export type AssetUpdateOneRequiredWithoutMaintenanceNestedInput = {
    create?: XOR<AssetCreateWithoutMaintenanceInput, AssetUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: AssetCreateOrConnectWithoutMaintenanceInput
    upsert?: AssetUpsertWithoutMaintenanceInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutMaintenanceInput, AssetUpdateWithoutMaintenanceInput>, AssetUncheckedUpdateWithoutMaintenanceInput>
  }

  export type TenantCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<TenantCreateWithoutWorkOrdersInput, TenantUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutWorkOrdersInput
    connect?: TenantWhereUniqueInput
  }

  export type MaintenanceScheduleCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutWorkOrdersInput, MaintenanceScheduleUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutWorkOrdersInput
    connect?: MaintenanceScheduleWhereUniqueInput
  }

  export type WorkOrderAssignmentCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderAssignmentCreateWithoutWorkOrderInput, WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput> | WorkOrderAssignmentCreateWithoutWorkOrderInput[] | WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput | WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderAssignmentCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
  }

  export type WorkOrderAssetsCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderAssetsCreateWithoutWorkOrderInput, WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput> | WorkOrderAssetsCreateWithoutWorkOrderInput[] | WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput | WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderAssetsCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
  }

  export type WorkOrderPartsCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderPartsCreateWithoutWorkOrderInput, WorkOrderPartsUncheckedCreateWithoutWorkOrderInput> | WorkOrderPartsCreateWithoutWorkOrderInput[] | WorkOrderPartsUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderPartsCreateOrConnectWithoutWorkOrderInput | WorkOrderPartsCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderPartsCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
  }

  export type WorkOrderLaborCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderLaborCreateWithoutWorkOrderInput, WorkOrderLaborUncheckedCreateWithoutWorkOrderInput> | WorkOrderLaborCreateWithoutWorkOrderInput[] | WorkOrderLaborUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderLaborCreateOrConnectWithoutWorkOrderInput | WorkOrderLaborCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderLaborCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
  }

  export type WorkOrderLogCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderLogCreateWithoutWorkOrderInput, WorkOrderLogUncheckedCreateWithoutWorkOrderInput> | WorkOrderLogCreateWithoutWorkOrderInput[] | WorkOrderLogUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderLogCreateOrConnectWithoutWorkOrderInput | WorkOrderLogCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderLogCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
  }

  export type WorkOrderAssignmentUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderAssignmentCreateWithoutWorkOrderInput, WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput> | WorkOrderAssignmentCreateWithoutWorkOrderInput[] | WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput | WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderAssignmentCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
  }

  export type WorkOrderAssetsUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderAssetsCreateWithoutWorkOrderInput, WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput> | WorkOrderAssetsCreateWithoutWorkOrderInput[] | WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput | WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderAssetsCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
  }

  export type WorkOrderPartsUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderPartsCreateWithoutWorkOrderInput, WorkOrderPartsUncheckedCreateWithoutWorkOrderInput> | WorkOrderPartsCreateWithoutWorkOrderInput[] | WorkOrderPartsUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderPartsCreateOrConnectWithoutWorkOrderInput | WorkOrderPartsCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderPartsCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
  }

  export type WorkOrderLaborUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderLaborCreateWithoutWorkOrderInput, WorkOrderLaborUncheckedCreateWithoutWorkOrderInput> | WorkOrderLaborCreateWithoutWorkOrderInput[] | WorkOrderLaborUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderLaborCreateOrConnectWithoutWorkOrderInput | WorkOrderLaborCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderLaborCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
  }

  export type WorkOrderLogUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderLogCreateWithoutWorkOrderInput, WorkOrderLogUncheckedCreateWithoutWorkOrderInput> | WorkOrderLogCreateWithoutWorkOrderInput[] | WorkOrderLogUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderLogCreateOrConnectWithoutWorkOrderInput | WorkOrderLogCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderLogCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
  }

  export type EnumWorkOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.WorkOrderStatus
  }

  export type TenantUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<TenantCreateWithoutWorkOrdersInput, TenantUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutWorkOrdersInput
    upsert?: TenantUpsertWithoutWorkOrdersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutWorkOrdersInput, TenantUpdateWithoutWorkOrdersInput>, TenantUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type MaintenanceScheduleUpdateOneWithoutWorkOrdersNestedInput = {
    create?: XOR<MaintenanceScheduleCreateWithoutWorkOrdersInput, MaintenanceScheduleUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: MaintenanceScheduleCreateOrConnectWithoutWorkOrdersInput
    upsert?: MaintenanceScheduleUpsertWithoutWorkOrdersInput
    disconnect?: MaintenanceScheduleWhereInput | boolean
    delete?: MaintenanceScheduleWhereInput | boolean
    connect?: MaintenanceScheduleWhereUniqueInput
    update?: XOR<XOR<MaintenanceScheduleUpdateToOneWithWhereWithoutWorkOrdersInput, MaintenanceScheduleUpdateWithoutWorkOrdersInput>, MaintenanceScheduleUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type WorkOrderAssignmentUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderAssignmentCreateWithoutWorkOrderInput, WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput> | WorkOrderAssignmentCreateWithoutWorkOrderInput[] | WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput | WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderAssignmentUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderAssignmentUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderAssignmentCreateManyWorkOrderInputEnvelope
    set?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    disconnect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    delete?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    connect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    update?: WorkOrderAssignmentUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderAssignmentUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderAssignmentUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderAssignmentUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderAssignmentScalarWhereInput | WorkOrderAssignmentScalarWhereInput[]
  }

  export type WorkOrderAssetsUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderAssetsCreateWithoutWorkOrderInput, WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput> | WorkOrderAssetsCreateWithoutWorkOrderInput[] | WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput | WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderAssetsUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderAssetsUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderAssetsCreateManyWorkOrderInputEnvelope
    set?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    disconnect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    delete?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    connect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    update?: WorkOrderAssetsUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderAssetsUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderAssetsUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderAssetsUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderAssetsScalarWhereInput | WorkOrderAssetsScalarWhereInput[]
  }

  export type WorkOrderPartsUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderPartsCreateWithoutWorkOrderInput, WorkOrderPartsUncheckedCreateWithoutWorkOrderInput> | WorkOrderPartsCreateWithoutWorkOrderInput[] | WorkOrderPartsUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderPartsCreateOrConnectWithoutWorkOrderInput | WorkOrderPartsCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderPartsUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderPartsUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderPartsCreateManyWorkOrderInputEnvelope
    set?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    disconnect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    delete?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    connect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    update?: WorkOrderPartsUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderPartsUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderPartsUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderPartsUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderPartsScalarWhereInput | WorkOrderPartsScalarWhereInput[]
  }

  export type WorkOrderLaborUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderLaborCreateWithoutWorkOrderInput, WorkOrderLaborUncheckedCreateWithoutWorkOrderInput> | WorkOrderLaborCreateWithoutWorkOrderInput[] | WorkOrderLaborUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderLaborCreateOrConnectWithoutWorkOrderInput | WorkOrderLaborCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderLaborUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderLaborUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderLaborCreateManyWorkOrderInputEnvelope
    set?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    disconnect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    delete?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    connect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    update?: WorkOrderLaborUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderLaborUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderLaborUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderLaborUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderLaborScalarWhereInput | WorkOrderLaborScalarWhereInput[]
  }

  export type WorkOrderLogUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderLogCreateWithoutWorkOrderInput, WorkOrderLogUncheckedCreateWithoutWorkOrderInput> | WorkOrderLogCreateWithoutWorkOrderInput[] | WorkOrderLogUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderLogCreateOrConnectWithoutWorkOrderInput | WorkOrderLogCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderLogUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderLogUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderLogCreateManyWorkOrderInputEnvelope
    set?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    disconnect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    delete?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    connect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    update?: WorkOrderLogUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderLogUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderLogUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderLogUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderLogScalarWhereInput | WorkOrderLogScalarWhereInput[]
  }

  export type WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderAssignmentCreateWithoutWorkOrderInput, WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput> | WorkOrderAssignmentCreateWithoutWorkOrderInput[] | WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput | WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderAssignmentUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderAssignmentUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderAssignmentCreateManyWorkOrderInputEnvelope
    set?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    disconnect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    delete?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    connect?: WorkOrderAssignmentWhereUniqueInput | WorkOrderAssignmentWhereUniqueInput[]
    update?: WorkOrderAssignmentUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderAssignmentUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderAssignmentUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderAssignmentUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderAssignmentScalarWhereInput | WorkOrderAssignmentScalarWhereInput[]
  }

  export type WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderAssetsCreateWithoutWorkOrderInput, WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput> | WorkOrderAssetsCreateWithoutWorkOrderInput[] | WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput | WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderAssetsUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderAssetsUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderAssetsCreateManyWorkOrderInputEnvelope
    set?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    disconnect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    delete?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    connect?: WorkOrderAssetsWhereUniqueInput | WorkOrderAssetsWhereUniqueInput[]
    update?: WorkOrderAssetsUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderAssetsUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderAssetsUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderAssetsUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderAssetsScalarWhereInput | WorkOrderAssetsScalarWhereInput[]
  }

  export type WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderPartsCreateWithoutWorkOrderInput, WorkOrderPartsUncheckedCreateWithoutWorkOrderInput> | WorkOrderPartsCreateWithoutWorkOrderInput[] | WorkOrderPartsUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderPartsCreateOrConnectWithoutWorkOrderInput | WorkOrderPartsCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderPartsUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderPartsUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderPartsCreateManyWorkOrderInputEnvelope
    set?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    disconnect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    delete?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    connect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    update?: WorkOrderPartsUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderPartsUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderPartsUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderPartsUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderPartsScalarWhereInput | WorkOrderPartsScalarWhereInput[]
  }

  export type WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderLaborCreateWithoutWorkOrderInput, WorkOrderLaborUncheckedCreateWithoutWorkOrderInput> | WorkOrderLaborCreateWithoutWorkOrderInput[] | WorkOrderLaborUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderLaborCreateOrConnectWithoutWorkOrderInput | WorkOrderLaborCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderLaborUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderLaborUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderLaborCreateManyWorkOrderInputEnvelope
    set?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    disconnect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    delete?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    connect?: WorkOrderLaborWhereUniqueInput | WorkOrderLaborWhereUniqueInput[]
    update?: WorkOrderLaborUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderLaborUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderLaborUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderLaborUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderLaborScalarWhereInput | WorkOrderLaborScalarWhereInput[]
  }

  export type WorkOrderLogUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderLogCreateWithoutWorkOrderInput, WorkOrderLogUncheckedCreateWithoutWorkOrderInput> | WorkOrderLogCreateWithoutWorkOrderInput[] | WorkOrderLogUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderLogCreateOrConnectWithoutWorkOrderInput | WorkOrderLogCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderLogUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderLogUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderLogCreateManyWorkOrderInputEnvelope
    set?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    disconnect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    delete?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    connect?: WorkOrderLogWhereUniqueInput | WorkOrderLogWhereUniqueInput[]
    update?: WorkOrderLogUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderLogUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderLogUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderLogUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderLogScalarWhereInput | WorkOrderLogScalarWhereInput[]
  }

  export type WorkOrderCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<WorkOrderCreateWithoutAssignmentsInput, WorkOrderUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignmentsInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<UserCreateWithoutWorkOrdersInput, UserUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type WorkOrderUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<WorkOrderCreateWithoutAssignmentsInput, WorkOrderUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignmentsInput
    upsert?: WorkOrderUpsertWithoutAssignmentsInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutAssignmentsInput, WorkOrderUpdateWithoutAssignmentsInput>, WorkOrderUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<UserCreateWithoutWorkOrdersInput, UserUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkOrdersInput
    upsert?: UserUpsertWithoutWorkOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkOrdersInput, UserUpdateWithoutWorkOrdersInput>, UserUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type WorkOrderCreateNestedOneWithoutAssetsInput = {
    create?: XOR<WorkOrderCreateWithoutAssetsInput, WorkOrderUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssetsInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<AssetCreateWithoutWorkOrdersInput, AssetUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: AssetCreateOrConnectWithoutWorkOrdersInput
    connect?: AssetWhereUniqueInput
  }

  export type WorkOrderUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<WorkOrderCreateWithoutAssetsInput, WorkOrderUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssetsInput
    upsert?: WorkOrderUpsertWithoutAssetsInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutAssetsInput, WorkOrderUpdateWithoutAssetsInput>, WorkOrderUncheckedUpdateWithoutAssetsInput>
  }

  export type AssetUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<AssetCreateWithoutWorkOrdersInput, AssetUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: AssetCreateOrConnectWithoutWorkOrdersInput
    upsert?: AssetUpsertWithoutWorkOrdersInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutWorkOrdersInput, AssetUpdateWithoutWorkOrdersInput>, AssetUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type WorkOrderCreateNestedOneWithoutPartsInput = {
    create?: XOR<WorkOrderCreateWithoutPartsInput, WorkOrderUncheckedCreateWithoutPartsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutPartsInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type PartCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<PartCreateWithoutWorkOrdersInput, PartUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: PartCreateOrConnectWithoutWorkOrdersInput
    connect?: PartWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkOrderUpdateOneRequiredWithoutPartsNestedInput = {
    create?: XOR<WorkOrderCreateWithoutPartsInput, WorkOrderUncheckedCreateWithoutPartsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutPartsInput
    upsert?: WorkOrderUpsertWithoutPartsInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutPartsInput, WorkOrderUpdateWithoutPartsInput>, WorkOrderUncheckedUpdateWithoutPartsInput>
  }

  export type PartUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<PartCreateWithoutWorkOrdersInput, PartUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: PartCreateOrConnectWithoutWorkOrdersInput
    upsert?: PartUpsertWithoutWorkOrdersInput
    connect?: PartWhereUniqueInput
    update?: XOR<XOR<PartUpdateToOneWithWhereWithoutWorkOrdersInput, PartUpdateWithoutWorkOrdersInput>, PartUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type TenantCreateNestedOneWithoutPartsInput = {
    create?: XOR<TenantCreateWithoutPartsInput, TenantUncheckedCreateWithoutPartsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPartsInput
    connect?: TenantWhereUniqueInput
  }

  export type PartVendorCreateNestedManyWithoutPartInput = {
    create?: XOR<PartVendorCreateWithoutPartInput, PartVendorUncheckedCreateWithoutPartInput> | PartVendorCreateWithoutPartInput[] | PartVendorUncheckedCreateWithoutPartInput[]
    connectOrCreate?: PartVendorCreateOrConnectWithoutPartInput | PartVendorCreateOrConnectWithoutPartInput[]
    createMany?: PartVendorCreateManyPartInputEnvelope
    connect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
  }

  export type WorkOrderPartsCreateNestedManyWithoutPartInput = {
    create?: XOR<WorkOrderPartsCreateWithoutPartInput, WorkOrderPartsUncheckedCreateWithoutPartInput> | WorkOrderPartsCreateWithoutPartInput[] | WorkOrderPartsUncheckedCreateWithoutPartInput[]
    connectOrCreate?: WorkOrderPartsCreateOrConnectWithoutPartInput | WorkOrderPartsCreateOrConnectWithoutPartInput[]
    createMany?: WorkOrderPartsCreateManyPartInputEnvelope
    connect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
  }

  export type PartVendorUncheckedCreateNestedManyWithoutPartInput = {
    create?: XOR<PartVendorCreateWithoutPartInput, PartVendorUncheckedCreateWithoutPartInput> | PartVendorCreateWithoutPartInput[] | PartVendorUncheckedCreateWithoutPartInput[]
    connectOrCreate?: PartVendorCreateOrConnectWithoutPartInput | PartVendorCreateOrConnectWithoutPartInput[]
    createMany?: PartVendorCreateManyPartInputEnvelope
    connect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
  }

  export type WorkOrderPartsUncheckedCreateNestedManyWithoutPartInput = {
    create?: XOR<WorkOrderPartsCreateWithoutPartInput, WorkOrderPartsUncheckedCreateWithoutPartInput> | WorkOrderPartsCreateWithoutPartInput[] | WorkOrderPartsUncheckedCreateWithoutPartInput[]
    connectOrCreate?: WorkOrderPartsCreateOrConnectWithoutPartInput | WorkOrderPartsCreateOrConnectWithoutPartInput[]
    createMany?: WorkOrderPartsCreateManyPartInputEnvelope
    connect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutPartsNestedInput = {
    create?: XOR<TenantCreateWithoutPartsInput, TenantUncheckedCreateWithoutPartsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPartsInput
    upsert?: TenantUpsertWithoutPartsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPartsInput, TenantUpdateWithoutPartsInput>, TenantUncheckedUpdateWithoutPartsInput>
  }

  export type PartVendorUpdateManyWithoutPartNestedInput = {
    create?: XOR<PartVendorCreateWithoutPartInput, PartVendorUncheckedCreateWithoutPartInput> | PartVendorCreateWithoutPartInput[] | PartVendorUncheckedCreateWithoutPartInput[]
    connectOrCreate?: PartVendorCreateOrConnectWithoutPartInput | PartVendorCreateOrConnectWithoutPartInput[]
    upsert?: PartVendorUpsertWithWhereUniqueWithoutPartInput | PartVendorUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: PartVendorCreateManyPartInputEnvelope
    set?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    disconnect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    delete?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    connect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    update?: PartVendorUpdateWithWhereUniqueWithoutPartInput | PartVendorUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: PartVendorUpdateManyWithWhereWithoutPartInput | PartVendorUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: PartVendorScalarWhereInput | PartVendorScalarWhereInput[]
  }

  export type WorkOrderPartsUpdateManyWithoutPartNestedInput = {
    create?: XOR<WorkOrderPartsCreateWithoutPartInput, WorkOrderPartsUncheckedCreateWithoutPartInput> | WorkOrderPartsCreateWithoutPartInput[] | WorkOrderPartsUncheckedCreateWithoutPartInput[]
    connectOrCreate?: WorkOrderPartsCreateOrConnectWithoutPartInput | WorkOrderPartsCreateOrConnectWithoutPartInput[]
    upsert?: WorkOrderPartsUpsertWithWhereUniqueWithoutPartInput | WorkOrderPartsUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: WorkOrderPartsCreateManyPartInputEnvelope
    set?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    disconnect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    delete?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    connect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    update?: WorkOrderPartsUpdateWithWhereUniqueWithoutPartInput | WorkOrderPartsUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: WorkOrderPartsUpdateManyWithWhereWithoutPartInput | WorkOrderPartsUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: WorkOrderPartsScalarWhereInput | WorkOrderPartsScalarWhereInput[]
  }

  export type PartVendorUncheckedUpdateManyWithoutPartNestedInput = {
    create?: XOR<PartVendorCreateWithoutPartInput, PartVendorUncheckedCreateWithoutPartInput> | PartVendorCreateWithoutPartInput[] | PartVendorUncheckedCreateWithoutPartInput[]
    connectOrCreate?: PartVendorCreateOrConnectWithoutPartInput | PartVendorCreateOrConnectWithoutPartInput[]
    upsert?: PartVendorUpsertWithWhereUniqueWithoutPartInput | PartVendorUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: PartVendorCreateManyPartInputEnvelope
    set?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    disconnect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    delete?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    connect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    update?: PartVendorUpdateWithWhereUniqueWithoutPartInput | PartVendorUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: PartVendorUpdateManyWithWhereWithoutPartInput | PartVendorUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: PartVendorScalarWhereInput | PartVendorScalarWhereInput[]
  }

  export type WorkOrderPartsUncheckedUpdateManyWithoutPartNestedInput = {
    create?: XOR<WorkOrderPartsCreateWithoutPartInput, WorkOrderPartsUncheckedCreateWithoutPartInput> | WorkOrderPartsCreateWithoutPartInput[] | WorkOrderPartsUncheckedCreateWithoutPartInput[]
    connectOrCreate?: WorkOrderPartsCreateOrConnectWithoutPartInput | WorkOrderPartsCreateOrConnectWithoutPartInput[]
    upsert?: WorkOrderPartsUpsertWithWhereUniqueWithoutPartInput | WorkOrderPartsUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: WorkOrderPartsCreateManyPartInputEnvelope
    set?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    disconnect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    delete?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    connect?: WorkOrderPartsWhereUniqueInput | WorkOrderPartsWhereUniqueInput[]
    update?: WorkOrderPartsUpdateWithWhereUniqueWithoutPartInput | WorkOrderPartsUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: WorkOrderPartsUpdateManyWithWhereWithoutPartInput | WorkOrderPartsUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: WorkOrderPartsScalarWhereInput | WorkOrderPartsScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutVendorsInput = {
    create?: XOR<TenantCreateWithoutVendorsInput, TenantUncheckedCreateWithoutVendorsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutVendorsInput
    connect?: TenantWhereUniqueInput
  }

  export type PartVendorCreateNestedManyWithoutVendorInput = {
    create?: XOR<PartVendorCreateWithoutVendorInput, PartVendorUncheckedCreateWithoutVendorInput> | PartVendorCreateWithoutVendorInput[] | PartVendorUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: PartVendorCreateOrConnectWithoutVendorInput | PartVendorCreateOrConnectWithoutVendorInput[]
    createMany?: PartVendorCreateManyVendorInputEnvelope
    connect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
  }

  export type PartVendorUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<PartVendorCreateWithoutVendorInput, PartVendorUncheckedCreateWithoutVendorInput> | PartVendorCreateWithoutVendorInput[] | PartVendorUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: PartVendorCreateOrConnectWithoutVendorInput | PartVendorCreateOrConnectWithoutVendorInput[]
    createMany?: PartVendorCreateManyVendorInputEnvelope
    connect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutVendorsNestedInput = {
    create?: XOR<TenantCreateWithoutVendorsInput, TenantUncheckedCreateWithoutVendorsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutVendorsInput
    upsert?: TenantUpsertWithoutVendorsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutVendorsInput, TenantUpdateWithoutVendorsInput>, TenantUncheckedUpdateWithoutVendorsInput>
  }

  export type PartVendorUpdateManyWithoutVendorNestedInput = {
    create?: XOR<PartVendorCreateWithoutVendorInput, PartVendorUncheckedCreateWithoutVendorInput> | PartVendorCreateWithoutVendorInput[] | PartVendorUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: PartVendorCreateOrConnectWithoutVendorInput | PartVendorCreateOrConnectWithoutVendorInput[]
    upsert?: PartVendorUpsertWithWhereUniqueWithoutVendorInput | PartVendorUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: PartVendorCreateManyVendorInputEnvelope
    set?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    disconnect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    delete?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    connect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    update?: PartVendorUpdateWithWhereUniqueWithoutVendorInput | PartVendorUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: PartVendorUpdateManyWithWhereWithoutVendorInput | PartVendorUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: PartVendorScalarWhereInput | PartVendorScalarWhereInput[]
  }

  export type PartVendorUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<PartVendorCreateWithoutVendorInput, PartVendorUncheckedCreateWithoutVendorInput> | PartVendorCreateWithoutVendorInput[] | PartVendorUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: PartVendorCreateOrConnectWithoutVendorInput | PartVendorCreateOrConnectWithoutVendorInput[]
    upsert?: PartVendorUpsertWithWhereUniqueWithoutVendorInput | PartVendorUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: PartVendorCreateManyVendorInputEnvelope
    set?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    disconnect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    delete?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    connect?: PartVendorWhereUniqueInput | PartVendorWhereUniqueInput[]
    update?: PartVendorUpdateWithWhereUniqueWithoutVendorInput | PartVendorUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: PartVendorUpdateManyWithWhereWithoutVendorInput | PartVendorUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: PartVendorScalarWhereInput | PartVendorScalarWhereInput[]
  }

  export type PartCreateNestedOneWithoutVendorsInput = {
    create?: XOR<PartCreateWithoutVendorsInput, PartUncheckedCreateWithoutVendorsInput>
    connectOrCreate?: PartCreateOrConnectWithoutVendorsInput
    connect?: PartWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutPartsInput = {
    create?: XOR<VendorCreateWithoutPartsInput, VendorUncheckedCreateWithoutPartsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutPartsInput
    connect?: VendorWhereUniqueInput
  }

  export type PartUpdateOneRequiredWithoutVendorsNestedInput = {
    create?: XOR<PartCreateWithoutVendorsInput, PartUncheckedCreateWithoutVendorsInput>
    connectOrCreate?: PartCreateOrConnectWithoutVendorsInput
    upsert?: PartUpsertWithoutVendorsInput
    connect?: PartWhereUniqueInput
    update?: XOR<XOR<PartUpdateToOneWithWhereWithoutVendorsInput, PartUpdateWithoutVendorsInput>, PartUncheckedUpdateWithoutVendorsInput>
  }

  export type VendorUpdateOneRequiredWithoutPartsNestedInput = {
    create?: XOR<VendorCreateWithoutPartsInput, VendorUncheckedCreateWithoutPartsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutPartsInput
    upsert?: VendorUpsertWithoutPartsInput
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutPartsInput, VendorUpdateWithoutPartsInput>, VendorUncheckedUpdateWithoutPartsInput>
  }

  export type WorkOrderCreateNestedOneWithoutLaborInput = {
    create?: XOR<WorkOrderCreateWithoutLaborInput, WorkOrderUncheckedCreateWithoutLaborInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutLaborInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLaborInput = {
    create?: XOR<UserCreateWithoutLaborInput, UserUncheckedCreateWithoutLaborInput>
    connectOrCreate?: UserCreateOrConnectWithoutLaborInput
    connect?: UserWhereUniqueInput
  }

  export type WorkOrderUpdateOneRequiredWithoutLaborNestedInput = {
    create?: XOR<WorkOrderCreateWithoutLaborInput, WorkOrderUncheckedCreateWithoutLaborInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutLaborInput
    upsert?: WorkOrderUpsertWithoutLaborInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutLaborInput, WorkOrderUpdateWithoutLaborInput>, WorkOrderUncheckedUpdateWithoutLaborInput>
  }

  export type UserUpdateOneWithoutLaborNestedInput = {
    create?: XOR<UserCreateWithoutLaborInput, UserUncheckedCreateWithoutLaborInput>
    connectOrCreate?: UserCreateOrConnectWithoutLaborInput
    upsert?: UserUpsertWithoutLaborInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLaborInput, UserUpdateWithoutLaborInput>, UserUncheckedUpdateWithoutLaborInput>
  }

  export type TenantCreateNestedOneWithoutIncidentsInput = {
    create?: XOR<TenantCreateWithoutIncidentsInput, TenantUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutIncidentsInput
    connect?: TenantWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutIncidentsInput = {
    create?: XOR<AssetCreateWithoutIncidentsInput, AssetUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutIncidentsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutIncidentsInput = {
    create?: XOR<UserCreateWithoutIncidentsInput, UserUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutIncidentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCallStatusFieldUpdateOperationsInput = {
    set?: $Enums.CallStatus
  }

  export type TenantUpdateOneRequiredWithoutIncidentsNestedInput = {
    create?: XOR<TenantCreateWithoutIncidentsInput, TenantUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutIncidentsInput
    upsert?: TenantUpsertWithoutIncidentsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutIncidentsInput, TenantUpdateWithoutIncidentsInput>, TenantUncheckedUpdateWithoutIncidentsInput>
  }

  export type AssetUpdateOneWithoutIncidentsNestedInput = {
    create?: XOR<AssetCreateWithoutIncidentsInput, AssetUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutIncidentsInput
    upsert?: AssetUpsertWithoutIncidentsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutIncidentsInput, AssetUpdateWithoutIncidentsInput>, AssetUncheckedUpdateWithoutIncidentsInput>
  }

  export type UserUpdateOneWithoutIncidentsNestedInput = {
    create?: XOR<UserCreateWithoutIncidentsInput, UserUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutIncidentsInput
    upsert?: UserUpsertWithoutIncidentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutIncidentsInput, UserUpdateWithoutIncidentsInput>, UserUncheckedUpdateWithoutIncidentsInput>
  }

  export type WorkOrderCreateNestedOneWithoutLogsInput = {
    create?: XOR<WorkOrderCreateWithoutLogsInput, WorkOrderUncheckedCreateWithoutLogsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutLogsInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkOrderLogsInput = {
    create?: XOR<UserCreateWithoutWorkOrderLogsInput, UserUncheckedCreateWithoutWorkOrderLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkOrderLogsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkOrderUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<WorkOrderCreateWithoutLogsInput, WorkOrderUncheckedCreateWithoutLogsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutLogsInput
    upsert?: WorkOrderUpsertWithoutLogsInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutLogsInput, WorkOrderUpdateWithoutLogsInput>, WorkOrderUncheckedUpdateWithoutLogsInput>
  }

  export type UserUpdateOneWithoutWorkOrderLogsNestedInput = {
    create?: XOR<UserCreateWithoutWorkOrderLogsInput, UserUncheckedCreateWithoutWorkOrderLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkOrderLogsInput
    upsert?: UserUpsertWithoutWorkOrderLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkOrderLogsInput, UserUpdateWithoutWorkOrderLogsInput>, UserUncheckedUpdateWithoutWorkOrderLogsInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumIndustryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IndustryType | EnumIndustryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IndustryType[] | ListEnumIndustryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndustryType[] | ListEnumIndustryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryTypeFilter<$PrismaModel> | $Enums.IndustryType
  }

  export type NestedEnumIndustryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IndustryType | EnumIndustryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IndustryType[] | ListEnumIndustryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndustryType[] | ListEnumIndustryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryTypeWithAggregatesFilter<$PrismaModel> | $Enums.IndustryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndustryTypeFilter<$PrismaModel>
    _max?: NestedEnumIndustryTypeFilter<$PrismaModel>
  }

  export type NestedEnumAssetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusFilter<$PrismaModel> | $Enums.AssetStatus
  }

  export type NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetStatusFilter<$PrismaModel>
    _max?: NestedEnumAssetStatusFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumMaintenanceTriggerFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceTrigger | EnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceTrigger[] | ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceTrigger[] | ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceTriggerFilter<$PrismaModel> | $Enums.MaintenanceTrigger
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumMaintenanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusFilter<$PrismaModel> | $Enums.MaintenanceStatus
  }

  export type NestedEnumCallPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.CallPriority | EnumCallPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.CallPriority[] | ListEnumCallPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.CallPriority[] | ListEnumCallPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumCallPriorityFilter<$PrismaModel> | $Enums.CallPriority
  }

  export type NestedEnumMaintenanceTriggerWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceTrigger | EnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceTrigger[] | ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceTrigger[] | ListEnumMaintenanceTriggerFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceTriggerWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceTrigger
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceTriggerFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceTriggerFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
  }

  export type NestedEnumCallPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CallPriority | EnumCallPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.CallPriority[] | ListEnumCallPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.CallPriority[] | ListEnumCallPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumCallPriorityWithAggregatesFilter<$PrismaModel> | $Enums.CallPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCallPriorityFilter<$PrismaModel>
    _max?: NestedEnumCallPriorityFilter<$PrismaModel>
  }

  export type NestedEnumWorkOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusFilter<$PrismaModel> | $Enums.WorkOrderStatus
  }

  export type NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumCallStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CallStatus | EnumCallStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CallStatus[] | ListEnumCallStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CallStatus[] | ListEnumCallStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCallStatusFilter<$PrismaModel> | $Enums.CallStatus
  }

  export type NestedEnumCallStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CallStatus | EnumCallStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CallStatus[] | ListEnumCallStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CallStatus[] | ListEnumCallStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCallStatusWithAggregatesFilter<$PrismaModel> | $Enums.CallStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCallStatusFilter<$PrismaModel>
    _max?: NestedEnumCallStatusFilter<$PrismaModel>
  }

  export type TenantCreateWithoutChildrenInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutChildrenInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutChildrenInput, TenantUncheckedCreateWithoutChildrenInput>
  }

  export type TenantSettingsCreateWithoutTenantInput = {
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantSettingsUncheckedCreateWithoutTenantInput = {
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantSettingsCreateOrConnectWithoutTenantInput = {
    where: TenantSettingsWhereUniqueInput
    create: XOR<TenantSettingsCreateWithoutTenantInput, TenantSettingsUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateWithoutTenantInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborCreateNestedManyWithoutUserInput
    incidents?: IncidentCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateManyTenantInputEnvelope = {
    data: UserCreateManyTenantInput | UserCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type AssetCategoryCreateWithoutTenantInput = {
    id?: string
    name: string
    industry: $Enums.IndustryType
    description?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assetTypes?: AssetTypeCreateNestedManyWithoutCategoryInput
  }

  export type AssetCategoryUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    industry: $Enums.IndustryType
    description?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type AssetCategoryCreateOrConnectWithoutTenantInput = {
    where: AssetCategoryWhereUniqueInput
    create: XOR<AssetCategoryCreateWithoutTenantInput, AssetCategoryUncheckedCreateWithoutTenantInput>
  }

  export type AssetCategoryCreateManyTenantInputEnvelope = {
    data: AssetCategoryCreateManyTenantInput | AssetCategoryCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type AssetTypeCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: AssetCategoryCreateNestedOneWithoutAssetTypesInput
    assets?: AssetCreateNestedManyWithoutAssetTypeInput
  }

  export type AssetTypeUncheckedCreateWithoutTenantInput = {
    id?: string
    categoryId?: string | null
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutAssetTypeInput
  }

  export type AssetTypeCreateOrConnectWithoutTenantInput = {
    where: AssetTypeWhereUniqueInput
    create: XOR<AssetTypeCreateWithoutTenantInput, AssetTypeUncheckedCreateWithoutTenantInput>
  }

  export type AssetTypeCreateManyTenantInputEnvelope = {
    data: AssetTypeCreateManyTenantInput | AssetTypeCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type AssetCreateWithoutTenantInput = {
    id?: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assetType?: AssetTypeCreateNestedOneWithoutAssetsInput
    assetMeters?: AssetMeterCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsCreateNestedManyWithoutAssetInput
    incidents?: IncidentCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutTenantInput = {
    id?: string
    assetTypeId?: string | null
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsUncheckedCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsUncheckedCreateNestedManyWithoutAssetInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutTenantInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutTenantInput, AssetUncheckedCreateWithoutTenantInput>
  }

  export type AssetCreateManyTenantInputEnvelope = {
    data: AssetCreateManyTenantInput | AssetCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type MeterCreateWithoutTenantInput = {
    id?: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assetMeters?: AssetMeterCreateNestedManyWithoutMeterInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutMeterInput
  }

  export type MeterUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutMeterInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutMeterInput
  }

  export type MeterCreateOrConnectWithoutTenantInput = {
    where: MeterWhereUniqueInput
    create: XOR<MeterCreateWithoutTenantInput, MeterUncheckedCreateWithoutTenantInput>
  }

  export type MeterCreateManyTenantInputEnvelope = {
    data: MeterCreateManyTenantInput | MeterCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceScheduleCreateWithoutTenantInput = {
    id?: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    meter?: MeterCreateNestedOneWithoutMaintenanceInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutMaintenanceInput
    assets?: MaintenanceAssetsCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleUncheckedCreateWithoutTenantInput = {
    id?: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: string | null
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutMaintenanceInput
    assets?: MaintenanceAssetsUncheckedCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleCreateOrConnectWithoutTenantInput = {
    where: MaintenanceScheduleWhereUniqueInput
    create: XOR<MaintenanceScheduleCreateWithoutTenantInput, MaintenanceScheduleUncheckedCreateWithoutTenantInput>
  }

  export type MaintenanceScheduleCreateManyTenantInputEnvelope = {
    data: MaintenanceScheduleCreateManyTenantInput | MaintenanceScheduleCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderCreateWithoutTenantInput = {
    id?: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    maintenance?: MaintenanceScheduleCreateNestedOneWithoutWorkOrdersInput
    assignments?: WorkOrderAssignmentCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutTenantInput = {
    id?: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsUncheckedCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsUncheckedCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutTenantInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutTenantInput, WorkOrderUncheckedCreateWithoutTenantInput>
  }

  export type WorkOrderCreateManyTenantInputEnvelope = {
    data: WorkOrderCreateManyTenantInput | WorkOrderCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PartCreateWithoutTenantInput = {
    id?: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    vendors?: PartVendorCreateNestedManyWithoutPartInput
    workOrders?: WorkOrderPartsCreateNestedManyWithoutPartInput
  }

  export type PartUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    vendors?: PartVendorUncheckedCreateNestedManyWithoutPartInput
    workOrders?: WorkOrderPartsUncheckedCreateNestedManyWithoutPartInput
  }

  export type PartCreateOrConnectWithoutTenantInput = {
    where: PartWhereUniqueInput
    create: XOR<PartCreateWithoutTenantInput, PartUncheckedCreateWithoutTenantInput>
  }

  export type PartCreateManyTenantInputEnvelope = {
    data: PartCreateManyTenantInput | PartCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type VendorCreateWithoutTenantInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parts?: PartVendorCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parts?: PartVendorUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutTenantInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutTenantInput, VendorUncheckedCreateWithoutTenantInput>
  }

  export type VendorCreateManyTenantInputEnvelope = {
    data: VendorCreateManyTenantInput | VendorCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type IncidentCreateWithoutTenantInput = {
    id?: string
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    asset?: AssetCreateNestedOneWithoutIncidentsInput
    reportedBy?: UserCreateNestedOneWithoutIncidentsInput
  }

  export type IncidentUncheckedCreateWithoutTenantInput = {
    id?: string
    assetId?: string | null
    reportedById?: string | null
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type IncidentCreateOrConnectWithoutTenantInput = {
    where: IncidentWhereUniqueInput
    create: XOR<IncidentCreateWithoutTenantInput, IncidentUncheckedCreateWithoutTenantInput>
  }

  export type IncidentCreateManyTenantInputEnvelope = {
    data: IncidentCreateManyTenantInput | IncidentCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutParentInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutParentInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutParentInput, TenantUncheckedCreateWithoutParentInput>
  }

  export type TenantCreateManyParentInputEnvelope = {
    data: TenantCreateManyParentInput | TenantCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutChildrenInput = {
    update: XOR<TenantUpdateWithoutChildrenInput, TenantUncheckedUpdateWithoutChildrenInput>
    create: XOR<TenantCreateWithoutChildrenInput, TenantUncheckedCreateWithoutChildrenInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutChildrenInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutChildrenInput, TenantUncheckedUpdateWithoutChildrenInput>
  }

  export type TenantUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantSettingsUpsertWithoutTenantInput = {
    update: XOR<TenantSettingsUpdateWithoutTenantInput, TenantSettingsUncheckedUpdateWithoutTenantInput>
    create: XOR<TenantSettingsCreateWithoutTenantInput, TenantSettingsUncheckedCreateWithoutTenantInput>
    where?: TenantSettingsWhereInput
  }

  export type TenantSettingsUpdateToOneWithWhereWithoutTenantInput = {
    where?: TenantSettingsWhereInput
    data: XOR<TenantSettingsUpdateWithoutTenantInput, TenantSettingsUncheckedUpdateWithoutTenantInput>
  }

  export type TenantSettingsUpdateWithoutTenantInput = {
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantSettingsUncheckedUpdateWithoutTenantInput = {
    config?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithWhereWithoutTenantInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTenantInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: UuidFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    tenantId?: UuidFilter<"User"> | string
    employeeId?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type AssetCategoryUpsertWithWhereUniqueWithoutTenantInput = {
    where: AssetCategoryWhereUniqueInput
    update: XOR<AssetCategoryUpdateWithoutTenantInput, AssetCategoryUncheckedUpdateWithoutTenantInput>
    create: XOR<AssetCategoryCreateWithoutTenantInput, AssetCategoryUncheckedCreateWithoutTenantInput>
  }

  export type AssetCategoryUpdateWithWhereUniqueWithoutTenantInput = {
    where: AssetCategoryWhereUniqueInput
    data: XOR<AssetCategoryUpdateWithoutTenantInput, AssetCategoryUncheckedUpdateWithoutTenantInput>
  }

  export type AssetCategoryUpdateManyWithWhereWithoutTenantInput = {
    where: AssetCategoryScalarWhereInput
    data: XOR<AssetCategoryUpdateManyMutationInput, AssetCategoryUncheckedUpdateManyWithoutTenantInput>
  }

  export type AssetCategoryScalarWhereInput = {
    AND?: AssetCategoryScalarWhereInput | AssetCategoryScalarWhereInput[]
    OR?: AssetCategoryScalarWhereInput[]
    NOT?: AssetCategoryScalarWhereInput | AssetCategoryScalarWhereInput[]
    id?: UuidFilter<"AssetCategory"> | string
    tenantId?: UuidFilter<"AssetCategory"> | string
    name?: StringFilter<"AssetCategory"> | string
    industry?: EnumIndustryTypeFilter<"AssetCategory"> | $Enums.IndustryType
    description?: StringNullableFilter<"AssetCategory"> | string | null
    metadata?: JsonFilter<"AssetCategory">
    createdAt?: DateTimeFilter<"AssetCategory"> | Date | string
    updatedAt?: DateTimeFilter<"AssetCategory"> | Date | string
  }

  export type AssetTypeUpsertWithWhereUniqueWithoutTenantInput = {
    where: AssetTypeWhereUniqueInput
    update: XOR<AssetTypeUpdateWithoutTenantInput, AssetTypeUncheckedUpdateWithoutTenantInput>
    create: XOR<AssetTypeCreateWithoutTenantInput, AssetTypeUncheckedCreateWithoutTenantInput>
  }

  export type AssetTypeUpdateWithWhereUniqueWithoutTenantInput = {
    where: AssetTypeWhereUniqueInput
    data: XOR<AssetTypeUpdateWithoutTenantInput, AssetTypeUncheckedUpdateWithoutTenantInput>
  }

  export type AssetTypeUpdateManyWithWhereWithoutTenantInput = {
    where: AssetTypeScalarWhereInput
    data: XOR<AssetTypeUpdateManyMutationInput, AssetTypeUncheckedUpdateManyWithoutTenantInput>
  }

  export type AssetTypeScalarWhereInput = {
    AND?: AssetTypeScalarWhereInput | AssetTypeScalarWhereInput[]
    OR?: AssetTypeScalarWhereInput[]
    NOT?: AssetTypeScalarWhereInput | AssetTypeScalarWhereInput[]
    id?: UuidFilter<"AssetType"> | string
    tenantId?: UuidFilter<"AssetType"> | string
    categoryId?: UuidNullableFilter<"AssetType"> | string | null
    name?: StringFilter<"AssetType"> | string
    description?: StringNullableFilter<"AssetType"> | string | null
    expectedLifespan?: IntNullableFilter<"AssetType"> | number | null
    maintenanceFrequency?: IntNullableFilter<"AssetType"> | number | null
    criticality?: IntNullableFilter<"AssetType"> | number | null
    customFields?: JsonFilter<"AssetType">
    createdAt?: DateTimeFilter<"AssetType"> | Date | string
    updatedAt?: DateTimeFilter<"AssetType"> | Date | string
  }

  export type AssetUpsertWithWhereUniqueWithoutTenantInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutTenantInput, AssetUncheckedUpdateWithoutTenantInput>
    create: XOR<AssetCreateWithoutTenantInput, AssetUncheckedCreateWithoutTenantInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutTenantInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutTenantInput, AssetUncheckedUpdateWithoutTenantInput>
  }

  export type AssetUpdateManyWithWhereWithoutTenantInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutTenantInput>
  }

  export type AssetScalarWhereInput = {
    AND?: AssetScalarWhereInput | AssetScalarWhereInput[]
    OR?: AssetScalarWhereInput[]
    NOT?: AssetScalarWhereInput | AssetScalarWhereInput[]
    id?: UuidFilter<"Asset"> | string
    tenantId?: UuidFilter<"Asset"> | string
    assetTypeId?: UuidNullableFilter<"Asset"> | string | null
    name?: StringFilter<"Asset"> | string
    location?: StringNullableFilter<"Asset"> | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    serialNumber?: StringNullableFilter<"Asset"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    lastMaintenanceDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    metadata?: JsonFilter<"Asset">
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
  }

  export type MeterUpsertWithWhereUniqueWithoutTenantInput = {
    where: MeterWhereUniqueInput
    update: XOR<MeterUpdateWithoutTenantInput, MeterUncheckedUpdateWithoutTenantInput>
    create: XOR<MeterCreateWithoutTenantInput, MeterUncheckedCreateWithoutTenantInput>
  }

  export type MeterUpdateWithWhereUniqueWithoutTenantInput = {
    where: MeterWhereUniqueInput
    data: XOR<MeterUpdateWithoutTenantInput, MeterUncheckedUpdateWithoutTenantInput>
  }

  export type MeterUpdateManyWithWhereWithoutTenantInput = {
    where: MeterScalarWhereInput
    data: XOR<MeterUpdateManyMutationInput, MeterUncheckedUpdateManyWithoutTenantInput>
  }

  export type MeterScalarWhereInput = {
    AND?: MeterScalarWhereInput | MeterScalarWhereInput[]
    OR?: MeterScalarWhereInput[]
    NOT?: MeterScalarWhereInput | MeterScalarWhereInput[]
    id?: UuidFilter<"Meter"> | string
    tenantId?: UuidFilter<"Meter"> | string
    name?: StringFilter<"Meter"> | string
    unit?: StringFilter<"Meter"> | string
    createdAt?: DateTimeFilter<"Meter"> | Date | string
    updatedAt?: DateTimeFilter<"Meter"> | Date | string
  }

  export type MaintenanceScheduleUpsertWithWhereUniqueWithoutTenantInput = {
    where: MaintenanceScheduleWhereUniqueInput
    update: XOR<MaintenanceScheduleUpdateWithoutTenantInput, MaintenanceScheduleUncheckedUpdateWithoutTenantInput>
    create: XOR<MaintenanceScheduleCreateWithoutTenantInput, MaintenanceScheduleUncheckedCreateWithoutTenantInput>
  }

  export type MaintenanceScheduleUpdateWithWhereUniqueWithoutTenantInput = {
    where: MaintenanceScheduleWhereUniqueInput
    data: XOR<MaintenanceScheduleUpdateWithoutTenantInput, MaintenanceScheduleUncheckedUpdateWithoutTenantInput>
  }

  export type MaintenanceScheduleUpdateManyWithWhereWithoutTenantInput = {
    where: MaintenanceScheduleScalarWhereInput
    data: XOR<MaintenanceScheduleUpdateManyMutationInput, MaintenanceScheduleUncheckedUpdateManyWithoutTenantInput>
  }

  export type MaintenanceScheduleScalarWhereInput = {
    AND?: MaintenanceScheduleScalarWhereInput | MaintenanceScheduleScalarWhereInput[]
    OR?: MaintenanceScheduleScalarWhereInput[]
    NOT?: MaintenanceScheduleScalarWhereInput | MaintenanceScheduleScalarWhereInput[]
    id?: UuidFilter<"MaintenanceSchedule"> | string
    tenantId?: UuidFilter<"MaintenanceSchedule"> | string
    description?: StringFilter<"MaintenanceSchedule"> | string
    triggerType?: EnumMaintenanceTriggerFilter<"MaintenanceSchedule"> | $Enums.MaintenanceTrigger
    recurrence?: JsonNullableFilter<"MaintenanceSchedule">
    meterId?: UuidNullableFilter<"MaintenanceSchedule"> | string | null
    thresholdValue?: DecimalNullableFilter<"MaintenanceSchedule"> | Decimal | DecimalJsLike | number | string | null
    nextRun?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
    lastRun?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceSchedule"> | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFilter<"MaintenanceSchedule"> | $Enums.CallPriority
    createdAt?: DateTimeFilter<"MaintenanceSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceSchedule"> | Date | string
    deletedAt?: DateTimeNullableFilter<"MaintenanceSchedule"> | Date | string | null
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutTenantInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutTenantInput, WorkOrderUncheckedUpdateWithoutTenantInput>
    create: XOR<WorkOrderCreateWithoutTenantInput, WorkOrderUncheckedCreateWithoutTenantInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutTenantInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutTenantInput, WorkOrderUncheckedUpdateWithoutTenantInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutTenantInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutTenantInput>
  }

  export type WorkOrderScalarWhereInput = {
    AND?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
    OR?: WorkOrderScalarWhereInput[]
    NOT?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
    id?: UuidFilter<"WorkOrder"> | string
    tenantId?: UuidFilter<"WorkOrder"> | string
    maintenanceId?: UuidNullableFilter<"WorkOrder"> | string | null
    description?: StringFilter<"WorkOrder"> | string
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFilter<"WorkOrder"> | $Enums.CallPriority
    dueDate?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    deletedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
  }

  export type PartUpsertWithWhereUniqueWithoutTenantInput = {
    where: PartWhereUniqueInput
    update: XOR<PartUpdateWithoutTenantInput, PartUncheckedUpdateWithoutTenantInput>
    create: XOR<PartCreateWithoutTenantInput, PartUncheckedCreateWithoutTenantInput>
  }

  export type PartUpdateWithWhereUniqueWithoutTenantInput = {
    where: PartWhereUniqueInput
    data: XOR<PartUpdateWithoutTenantInput, PartUncheckedUpdateWithoutTenantInput>
  }

  export type PartUpdateManyWithWhereWithoutTenantInput = {
    where: PartScalarWhereInput
    data: XOR<PartUpdateManyMutationInput, PartUncheckedUpdateManyWithoutTenantInput>
  }

  export type PartScalarWhereInput = {
    AND?: PartScalarWhereInput | PartScalarWhereInput[]
    OR?: PartScalarWhereInput[]
    NOT?: PartScalarWhereInput | PartScalarWhereInput[]
    id?: UuidFilter<"Part"> | string
    tenantId?: UuidFilter<"Part"> | string
    name?: StringFilter<"Part"> | string
    partNumber?: StringNullableFilter<"Part"> | string | null
    description?: StringNullableFilter<"Part"> | string | null
    quantity?: IntFilter<"Part"> | number
    minStock?: IntFilter<"Part"> | number
    unitCost?: DecimalNullableFilter<"Part"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Part"> | Date | string
    updatedAt?: DateTimeFilter<"Part"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Part"> | Date | string | null
  }

  export type VendorUpsertWithWhereUniqueWithoutTenantInput = {
    where: VendorWhereUniqueInput
    update: XOR<VendorUpdateWithoutTenantInput, VendorUncheckedUpdateWithoutTenantInput>
    create: XOR<VendorCreateWithoutTenantInput, VendorUncheckedCreateWithoutTenantInput>
  }

  export type VendorUpdateWithWhereUniqueWithoutTenantInput = {
    where: VendorWhereUniqueInput
    data: XOR<VendorUpdateWithoutTenantInput, VendorUncheckedUpdateWithoutTenantInput>
  }

  export type VendorUpdateManyWithWhereWithoutTenantInput = {
    where: VendorScalarWhereInput
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyWithoutTenantInput>
  }

  export type VendorScalarWhereInput = {
    AND?: VendorScalarWhereInput | VendorScalarWhereInput[]
    OR?: VendorScalarWhereInput[]
    NOT?: VendorScalarWhereInput | VendorScalarWhereInput[]
    id?: UuidFilter<"Vendor"> | string
    tenantId?: UuidFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    contactInfo?: JsonNullableFilter<"Vendor">
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Vendor"> | Date | string | null
  }

  export type IncidentUpsertWithWhereUniqueWithoutTenantInput = {
    where: IncidentWhereUniqueInput
    update: XOR<IncidentUpdateWithoutTenantInput, IncidentUncheckedUpdateWithoutTenantInput>
    create: XOR<IncidentCreateWithoutTenantInput, IncidentUncheckedCreateWithoutTenantInput>
  }

  export type IncidentUpdateWithWhereUniqueWithoutTenantInput = {
    where: IncidentWhereUniqueInput
    data: XOR<IncidentUpdateWithoutTenantInput, IncidentUncheckedUpdateWithoutTenantInput>
  }

  export type IncidentUpdateManyWithWhereWithoutTenantInput = {
    where: IncidentScalarWhereInput
    data: XOR<IncidentUpdateManyMutationInput, IncidentUncheckedUpdateManyWithoutTenantInput>
  }

  export type IncidentScalarWhereInput = {
    AND?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
    OR?: IncidentScalarWhereInput[]
    NOT?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
    id?: UuidFilter<"Incident"> | string
    tenantId?: UuidFilter<"Incident"> | string
    assetId?: UuidNullableFilter<"Incident"> | string | null
    reportedById?: UuidNullableFilter<"Incident"> | string | null
    description?: StringFilter<"Incident"> | string
    status?: EnumCallStatusFilter<"Incident"> | $Enums.CallStatus
    priority?: EnumCallPriorityFilter<"Incident"> | $Enums.CallPriority
    reportedAt?: DateTimeFilter<"Incident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
    createdAt?: DateTimeFilter<"Incident"> | Date | string
    updatedAt?: DateTimeFilter<"Incident"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
  }

  export type TenantUpsertWithWhereUniqueWithoutParentInput = {
    where: TenantWhereUniqueInput
    update: XOR<TenantUpdateWithoutParentInput, TenantUncheckedUpdateWithoutParentInput>
    create: XOR<TenantCreateWithoutParentInput, TenantUncheckedCreateWithoutParentInput>
  }

  export type TenantUpdateWithWhereUniqueWithoutParentInput = {
    where: TenantWhereUniqueInput
    data: XOR<TenantUpdateWithoutParentInput, TenantUncheckedUpdateWithoutParentInput>
  }

  export type TenantUpdateManyWithWhereWithoutParentInput = {
    where: TenantScalarWhereInput
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyWithoutParentInput>
  }

  export type TenantScalarWhereInput = {
    AND?: TenantScalarWhereInput | TenantScalarWhereInput[]
    OR?: TenantScalarWhereInput[]
    NOT?: TenantScalarWhereInput | TenantScalarWhereInput[]
    id?: UuidFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    subdomain?: StringFilter<"Tenant"> | string
    parentId?: UuidNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
  }

  export type TenantCreateWithoutSettingsInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutSettingsInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutSettingsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSettingsInput, TenantUncheckedCreateWithoutSettingsInput>
  }

  export type TenantUpsertWithoutSettingsInput = {
    update: XOR<TenantUpdateWithoutSettingsInput, TenantUncheckedUpdateWithoutSettingsInput>
    create: XOR<TenantCreateWithoutSettingsInput, TenantUncheckedCreateWithoutSettingsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSettingsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSettingsInput, TenantUncheckedUpdateWithoutSettingsInput>
  }

  export type TenantUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type TenantCreateWithoutUsersInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutUsersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceAssignmentCreateWithoutUserInput = {
    maintenance: MaintenanceScheduleCreateNestedOneWithoutAssignmentsInput
  }

  export type MaintenanceAssignmentUncheckedCreateWithoutUserInput = {
    maintenanceId: string
  }

  export type MaintenanceAssignmentCreateOrConnectWithoutUserInput = {
    where: MaintenanceAssignmentWhereUniqueInput
    create: XOR<MaintenanceAssignmentCreateWithoutUserInput, MaintenanceAssignmentUncheckedCreateWithoutUserInput>
  }

  export type MaintenanceAssignmentCreateManyUserInputEnvelope = {
    data: MaintenanceAssignmentCreateManyUserInput | MaintenanceAssignmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderAssignmentCreateWithoutUserInput = {
    workOrder: WorkOrderCreateNestedOneWithoutAssignmentsInput
  }

  export type WorkOrderAssignmentUncheckedCreateWithoutUserInput = {
    workOrderId: string
  }

  export type WorkOrderAssignmentCreateOrConnectWithoutUserInput = {
    where: WorkOrderAssignmentWhereUniqueInput
    create: XOR<WorkOrderAssignmentCreateWithoutUserInput, WorkOrderAssignmentUncheckedCreateWithoutUserInput>
  }

  export type WorkOrderAssignmentCreateManyUserInputEnvelope = {
    data: WorkOrderAssignmentCreateManyUserInput | WorkOrderAssignmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderLaborCreateWithoutUserInput = {
    id?: string
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
    workOrder: WorkOrderCreateNestedOneWithoutLaborInput
  }

  export type WorkOrderLaborUncheckedCreateWithoutUserInput = {
    id?: string
    workOrderId: string
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
  }

  export type WorkOrderLaborCreateOrConnectWithoutUserInput = {
    where: WorkOrderLaborWhereUniqueInput
    create: XOR<WorkOrderLaborCreateWithoutUserInput, WorkOrderLaborUncheckedCreateWithoutUserInput>
  }

  export type WorkOrderLaborCreateManyUserInputEnvelope = {
    data: WorkOrderLaborCreateManyUserInput | WorkOrderLaborCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type IncidentCreateWithoutReportedByInput = {
    id?: string
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutIncidentsInput
    asset?: AssetCreateNestedOneWithoutIncidentsInput
  }

  export type IncidentUncheckedCreateWithoutReportedByInput = {
    id?: string
    tenantId: string
    assetId?: string | null
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type IncidentCreateOrConnectWithoutReportedByInput = {
    where: IncidentWhereUniqueInput
    create: XOR<IncidentCreateWithoutReportedByInput, IncidentUncheckedCreateWithoutReportedByInput>
  }

  export type IncidentCreateManyReportedByInputEnvelope = {
    data: IncidentCreateManyReportedByInput | IncidentCreateManyReportedByInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderLogCreateWithoutUserInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    workOrder: WorkOrderCreateNestedOneWithoutLogsInput
  }

  export type WorkOrderLogUncheckedCreateWithoutUserInput = {
    id?: string
    workOrderId: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type WorkOrderLogCreateOrConnectWithoutUserInput = {
    where: WorkOrderLogWhereUniqueInput
    create: XOR<WorkOrderLogCreateWithoutUserInput, WorkOrderLogUncheckedCreateWithoutUserInput>
  }

  export type WorkOrderLogCreateManyUserInputEnvelope = {
    data: WorkOrderLogCreateManyUserInput | WorkOrderLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutUsersInput = {
    update: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUsersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type TenantUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: UuidFilter<"Account"> | string
    userId?: UuidFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: UuidFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: UuidFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type MaintenanceAssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: MaintenanceAssignmentWhereUniqueInput
    update: XOR<MaintenanceAssignmentUpdateWithoutUserInput, MaintenanceAssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<MaintenanceAssignmentCreateWithoutUserInput, MaintenanceAssignmentUncheckedCreateWithoutUserInput>
  }

  export type MaintenanceAssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: MaintenanceAssignmentWhereUniqueInput
    data: XOR<MaintenanceAssignmentUpdateWithoutUserInput, MaintenanceAssignmentUncheckedUpdateWithoutUserInput>
  }

  export type MaintenanceAssignmentUpdateManyWithWhereWithoutUserInput = {
    where: MaintenanceAssignmentScalarWhereInput
    data: XOR<MaintenanceAssignmentUpdateManyMutationInput, MaintenanceAssignmentUncheckedUpdateManyWithoutUserInput>
  }

  export type MaintenanceAssignmentScalarWhereInput = {
    AND?: MaintenanceAssignmentScalarWhereInput | MaintenanceAssignmentScalarWhereInput[]
    OR?: MaintenanceAssignmentScalarWhereInput[]
    NOT?: MaintenanceAssignmentScalarWhereInput | MaintenanceAssignmentScalarWhereInput[]
    maintenanceId?: UuidFilter<"MaintenanceAssignment"> | string
    userId?: UuidFilter<"MaintenanceAssignment"> | string
  }

  export type WorkOrderAssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkOrderAssignmentWhereUniqueInput
    update: XOR<WorkOrderAssignmentUpdateWithoutUserInput, WorkOrderAssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<WorkOrderAssignmentCreateWithoutUserInput, WorkOrderAssignmentUncheckedCreateWithoutUserInput>
  }

  export type WorkOrderAssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkOrderAssignmentWhereUniqueInput
    data: XOR<WorkOrderAssignmentUpdateWithoutUserInput, WorkOrderAssignmentUncheckedUpdateWithoutUserInput>
  }

  export type WorkOrderAssignmentUpdateManyWithWhereWithoutUserInput = {
    where: WorkOrderAssignmentScalarWhereInput
    data: XOR<WorkOrderAssignmentUpdateManyMutationInput, WorkOrderAssignmentUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkOrderAssignmentScalarWhereInput = {
    AND?: WorkOrderAssignmentScalarWhereInput | WorkOrderAssignmentScalarWhereInput[]
    OR?: WorkOrderAssignmentScalarWhereInput[]
    NOT?: WorkOrderAssignmentScalarWhereInput | WorkOrderAssignmentScalarWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderAssignment"> | string
    userId?: UuidFilter<"WorkOrderAssignment"> | string
  }

  export type WorkOrderLaborUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkOrderLaborWhereUniqueInput
    update: XOR<WorkOrderLaborUpdateWithoutUserInput, WorkOrderLaborUncheckedUpdateWithoutUserInput>
    create: XOR<WorkOrderLaborCreateWithoutUserInput, WorkOrderLaborUncheckedCreateWithoutUserInput>
  }

  export type WorkOrderLaborUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkOrderLaborWhereUniqueInput
    data: XOR<WorkOrderLaborUpdateWithoutUserInput, WorkOrderLaborUncheckedUpdateWithoutUserInput>
  }

  export type WorkOrderLaborUpdateManyWithWhereWithoutUserInput = {
    where: WorkOrderLaborScalarWhereInput
    data: XOR<WorkOrderLaborUpdateManyMutationInput, WorkOrderLaborUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkOrderLaborScalarWhereInput = {
    AND?: WorkOrderLaborScalarWhereInput | WorkOrderLaborScalarWhereInput[]
    OR?: WorkOrderLaborScalarWhereInput[]
    NOT?: WorkOrderLaborScalarWhereInput | WorkOrderLaborScalarWhereInput[]
    id?: UuidFilter<"WorkOrderLabor"> | string
    workOrderId?: UuidFilter<"WorkOrderLabor"> | string
    userId?: UuidNullableFilter<"WorkOrderLabor"> | string | null
    hours?: DecimalFilter<"WorkOrderLabor"> | Decimal | DecimalJsLike | number | string
    taskDescription?: StringNullableFilter<"WorkOrderLabor"> | string | null
    createdAt?: DateTimeFilter<"WorkOrderLabor"> | Date | string
  }

  export type IncidentUpsertWithWhereUniqueWithoutReportedByInput = {
    where: IncidentWhereUniqueInput
    update: XOR<IncidentUpdateWithoutReportedByInput, IncidentUncheckedUpdateWithoutReportedByInput>
    create: XOR<IncidentCreateWithoutReportedByInput, IncidentUncheckedCreateWithoutReportedByInput>
  }

  export type IncidentUpdateWithWhereUniqueWithoutReportedByInput = {
    where: IncidentWhereUniqueInput
    data: XOR<IncidentUpdateWithoutReportedByInput, IncidentUncheckedUpdateWithoutReportedByInput>
  }

  export type IncidentUpdateManyWithWhereWithoutReportedByInput = {
    where: IncidentScalarWhereInput
    data: XOR<IncidentUpdateManyMutationInput, IncidentUncheckedUpdateManyWithoutReportedByInput>
  }

  export type WorkOrderLogUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkOrderLogWhereUniqueInput
    update: XOR<WorkOrderLogUpdateWithoutUserInput, WorkOrderLogUncheckedUpdateWithoutUserInput>
    create: XOR<WorkOrderLogCreateWithoutUserInput, WorkOrderLogUncheckedCreateWithoutUserInput>
  }

  export type WorkOrderLogUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkOrderLogWhereUniqueInput
    data: XOR<WorkOrderLogUpdateWithoutUserInput, WorkOrderLogUncheckedUpdateWithoutUserInput>
  }

  export type WorkOrderLogUpdateManyWithWhereWithoutUserInput = {
    where: WorkOrderLogScalarWhereInput
    data: XOR<WorkOrderLogUpdateManyMutationInput, WorkOrderLogUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkOrderLogScalarWhereInput = {
    AND?: WorkOrderLogScalarWhereInput | WorkOrderLogScalarWhereInput[]
    OR?: WorkOrderLogScalarWhereInput[]
    NOT?: WorkOrderLogScalarWhereInput | WorkOrderLogScalarWhereInput[]
    id?: UuidFilter<"WorkOrderLog"> | string
    workOrderId?: UuidFilter<"WorkOrderLog"> | string
    userId?: UuidNullableFilter<"WorkOrderLog"> | string | null
    action?: StringFilter<"WorkOrderLog"> | string
    details?: JsonNullableFilter<"WorkOrderLog">
    createdAt?: DateTimeFilter<"WorkOrderLog"> | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborCreateNestedManyWithoutUserInput
    incidents?: IncidentCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutUserNestedInput
    incidents?: IncidentUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborCreateNestedManyWithoutUserInput
    incidents?: IncidentCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutUserNestedInput
    incidents?: IncidentUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TenantCreateWithoutCategoriesInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutCategoriesInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutCategoriesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCategoriesInput, TenantUncheckedCreateWithoutCategoriesInput>
  }

  export type AssetTypeCreateWithoutCategoryInput = {
    id?: string
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutAssetTypesInput
    assets?: AssetCreateNestedManyWithoutAssetTypeInput
  }

  export type AssetTypeUncheckedCreateWithoutCategoryInput = {
    id?: string
    tenantId: string
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutAssetTypeInput
  }

  export type AssetTypeCreateOrConnectWithoutCategoryInput = {
    where: AssetTypeWhereUniqueInput
    create: XOR<AssetTypeCreateWithoutCategoryInput, AssetTypeUncheckedCreateWithoutCategoryInput>
  }

  export type AssetTypeCreateManyCategoryInputEnvelope = {
    data: AssetTypeCreateManyCategoryInput | AssetTypeCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutCategoriesInput = {
    update: XOR<TenantUpdateWithoutCategoriesInput, TenantUncheckedUpdateWithoutCategoriesInput>
    create: XOR<TenantCreateWithoutCategoriesInput, TenantUncheckedCreateWithoutCategoriesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCategoriesInput, TenantUncheckedUpdateWithoutCategoriesInput>
  }

  export type TenantUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AssetTypeUpsertWithWhereUniqueWithoutCategoryInput = {
    where: AssetTypeWhereUniqueInput
    update: XOR<AssetTypeUpdateWithoutCategoryInput, AssetTypeUncheckedUpdateWithoutCategoryInput>
    create: XOR<AssetTypeCreateWithoutCategoryInput, AssetTypeUncheckedCreateWithoutCategoryInput>
  }

  export type AssetTypeUpdateWithWhereUniqueWithoutCategoryInput = {
    where: AssetTypeWhereUniqueInput
    data: XOR<AssetTypeUpdateWithoutCategoryInput, AssetTypeUncheckedUpdateWithoutCategoryInput>
  }

  export type AssetTypeUpdateManyWithWhereWithoutCategoryInput = {
    where: AssetTypeScalarWhereInput
    data: XOR<AssetTypeUpdateManyMutationInput, AssetTypeUncheckedUpdateManyWithoutCategoryInput>
  }

  export type TenantCreateWithoutAssetTypesInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutAssetTypesInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutAssetTypesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutAssetTypesInput, TenantUncheckedCreateWithoutAssetTypesInput>
  }

  export type AssetCategoryCreateWithoutAssetTypesInput = {
    id?: string
    name: string
    industry: $Enums.IndustryType
    description?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCategoriesInput
  }

  export type AssetCategoryUncheckedCreateWithoutAssetTypesInput = {
    id?: string
    tenantId: string
    name: string
    industry: $Enums.IndustryType
    description?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCategoryCreateOrConnectWithoutAssetTypesInput = {
    where: AssetCategoryWhereUniqueInput
    create: XOR<AssetCategoryCreateWithoutAssetTypesInput, AssetCategoryUncheckedCreateWithoutAssetTypesInput>
  }

  export type AssetCreateWithoutAssetTypeInput = {
    id?: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutAssetsInput
    assetMeters?: AssetMeterCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsCreateNestedManyWithoutAssetInput
    incidents?: IncidentCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutAssetTypeInput = {
    id?: string
    tenantId: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsUncheckedCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsUncheckedCreateNestedManyWithoutAssetInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutAssetTypeInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutAssetTypeInput, AssetUncheckedCreateWithoutAssetTypeInput>
  }

  export type AssetCreateManyAssetTypeInputEnvelope = {
    data: AssetCreateManyAssetTypeInput | AssetCreateManyAssetTypeInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutAssetTypesInput = {
    update: XOR<TenantUpdateWithoutAssetTypesInput, TenantUncheckedUpdateWithoutAssetTypesInput>
    create: XOR<TenantCreateWithoutAssetTypesInput, TenantUncheckedCreateWithoutAssetTypesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutAssetTypesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutAssetTypesInput, TenantUncheckedUpdateWithoutAssetTypesInput>
  }

  export type TenantUpdateWithoutAssetTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutAssetTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AssetCategoryUpsertWithoutAssetTypesInput = {
    update: XOR<AssetCategoryUpdateWithoutAssetTypesInput, AssetCategoryUncheckedUpdateWithoutAssetTypesInput>
    create: XOR<AssetCategoryCreateWithoutAssetTypesInput, AssetCategoryUncheckedCreateWithoutAssetTypesInput>
    where?: AssetCategoryWhereInput
  }

  export type AssetCategoryUpdateToOneWithWhereWithoutAssetTypesInput = {
    where?: AssetCategoryWhereInput
    data: XOR<AssetCategoryUpdateWithoutAssetTypesInput, AssetCategoryUncheckedUpdateWithoutAssetTypesInput>
  }

  export type AssetCategoryUpdateWithoutAssetTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type AssetCategoryUncheckedUpdateWithoutAssetTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpsertWithWhereUniqueWithoutAssetTypeInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutAssetTypeInput, AssetUncheckedUpdateWithoutAssetTypeInput>
    create: XOR<AssetCreateWithoutAssetTypeInput, AssetUncheckedCreateWithoutAssetTypeInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutAssetTypeInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutAssetTypeInput, AssetUncheckedUpdateWithoutAssetTypeInput>
  }

  export type AssetUpdateManyWithWhereWithoutAssetTypeInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutAssetTypeInput>
  }

  export type TenantCreateWithoutAssetsInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutAssetsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutAssetsInput, TenantUncheckedCreateWithoutAssetsInput>
  }

  export type AssetTypeCreateWithoutAssetsInput = {
    id?: string
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutAssetTypesInput
    category?: AssetCategoryCreateNestedOneWithoutAssetTypesInput
  }

  export type AssetTypeUncheckedCreateWithoutAssetsInput = {
    id?: string
    tenantId: string
    categoryId?: string | null
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetTypeCreateOrConnectWithoutAssetsInput = {
    where: AssetTypeWhereUniqueInput
    create: XOR<AssetTypeCreateWithoutAssetsInput, AssetTypeUncheckedCreateWithoutAssetsInput>
  }

  export type AssetMeterCreateWithoutAssetInput = {
    id?: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    meter: MeterCreateNestedOneWithoutAssetMetersInput
    readings?: MeterReadingCreateNestedManyWithoutAssetMeterInput
  }

  export type AssetMeterUncheckedCreateWithoutAssetInput = {
    id?: string
    meterId: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    readings?: MeterReadingUncheckedCreateNestedManyWithoutAssetMeterInput
  }

  export type AssetMeterCreateOrConnectWithoutAssetInput = {
    where: AssetMeterWhereUniqueInput
    create: XOR<AssetMeterCreateWithoutAssetInput, AssetMeterUncheckedCreateWithoutAssetInput>
  }

  export type AssetMeterCreateManyAssetInputEnvelope = {
    data: AssetMeterCreateManyAssetInput | AssetMeterCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceAssetsCreateWithoutAssetInput = {
    maintenance: MaintenanceScheduleCreateNestedOneWithoutAssetsInput
  }

  export type MaintenanceAssetsUncheckedCreateWithoutAssetInput = {
    maintenanceId: string
  }

  export type MaintenanceAssetsCreateOrConnectWithoutAssetInput = {
    where: MaintenanceAssetsWhereUniqueInput
    create: XOR<MaintenanceAssetsCreateWithoutAssetInput, MaintenanceAssetsUncheckedCreateWithoutAssetInput>
  }

  export type MaintenanceAssetsCreateManyAssetInputEnvelope = {
    data: MaintenanceAssetsCreateManyAssetInput | MaintenanceAssetsCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderAssetsCreateWithoutAssetInput = {
    workOrder: WorkOrderCreateNestedOneWithoutAssetsInput
  }

  export type WorkOrderAssetsUncheckedCreateWithoutAssetInput = {
    workOrderId: string
  }

  export type WorkOrderAssetsCreateOrConnectWithoutAssetInput = {
    where: WorkOrderAssetsWhereUniqueInput
    create: XOR<WorkOrderAssetsCreateWithoutAssetInput, WorkOrderAssetsUncheckedCreateWithoutAssetInput>
  }

  export type WorkOrderAssetsCreateManyAssetInputEnvelope = {
    data: WorkOrderAssetsCreateManyAssetInput | WorkOrderAssetsCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type IncidentCreateWithoutAssetInput = {
    id?: string
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutIncidentsInput
    reportedBy?: UserCreateNestedOneWithoutIncidentsInput
  }

  export type IncidentUncheckedCreateWithoutAssetInput = {
    id?: string
    tenantId: string
    reportedById?: string | null
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type IncidentCreateOrConnectWithoutAssetInput = {
    where: IncidentWhereUniqueInput
    create: XOR<IncidentCreateWithoutAssetInput, IncidentUncheckedCreateWithoutAssetInput>
  }

  export type IncidentCreateManyAssetInputEnvelope = {
    data: IncidentCreateManyAssetInput | IncidentCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutAssetsInput = {
    update: XOR<TenantUpdateWithoutAssetsInput, TenantUncheckedUpdateWithoutAssetsInput>
    create: XOR<TenantCreateWithoutAssetsInput, TenantUncheckedCreateWithoutAssetsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutAssetsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutAssetsInput, TenantUncheckedUpdateWithoutAssetsInput>
  }

  export type TenantUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AssetTypeUpsertWithoutAssetsInput = {
    update: XOR<AssetTypeUpdateWithoutAssetsInput, AssetTypeUncheckedUpdateWithoutAssetsInput>
    create: XOR<AssetTypeCreateWithoutAssetsInput, AssetTypeUncheckedCreateWithoutAssetsInput>
    where?: AssetTypeWhereInput
  }

  export type AssetTypeUpdateToOneWithWhereWithoutAssetsInput = {
    where?: AssetTypeWhereInput
    data: XOR<AssetTypeUpdateWithoutAssetsInput, AssetTypeUncheckedUpdateWithoutAssetsInput>
  }

  export type AssetTypeUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutAssetTypesNestedInput
    category?: AssetCategoryUpdateOneWithoutAssetTypesNestedInput
  }

  export type AssetTypeUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetMeterUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetMeterWhereUniqueInput
    update: XOR<AssetMeterUpdateWithoutAssetInput, AssetMeterUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetMeterCreateWithoutAssetInput, AssetMeterUncheckedCreateWithoutAssetInput>
  }

  export type AssetMeterUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetMeterWhereUniqueInput
    data: XOR<AssetMeterUpdateWithoutAssetInput, AssetMeterUncheckedUpdateWithoutAssetInput>
  }

  export type AssetMeterUpdateManyWithWhereWithoutAssetInput = {
    where: AssetMeterScalarWhereInput
    data: XOR<AssetMeterUpdateManyMutationInput, AssetMeterUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetMeterScalarWhereInput = {
    AND?: AssetMeterScalarWhereInput | AssetMeterScalarWhereInput[]
    OR?: AssetMeterScalarWhereInput[]
    NOT?: AssetMeterScalarWhereInput | AssetMeterScalarWhereInput[]
    id?: UuidFilter<"AssetMeter"> | string
    assetId?: UuidFilter<"AssetMeter"> | string
    meterId?: UuidFilter<"AssetMeter"> | string
    initialReading?: DecimalFilter<"AssetMeter"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"AssetMeter"> | Date | string
    updatedAt?: DateTimeFilter<"AssetMeter"> | Date | string
  }

  export type MaintenanceAssetsUpsertWithWhereUniqueWithoutAssetInput = {
    where: MaintenanceAssetsWhereUniqueInput
    update: XOR<MaintenanceAssetsUpdateWithoutAssetInput, MaintenanceAssetsUncheckedUpdateWithoutAssetInput>
    create: XOR<MaintenanceAssetsCreateWithoutAssetInput, MaintenanceAssetsUncheckedCreateWithoutAssetInput>
  }

  export type MaintenanceAssetsUpdateWithWhereUniqueWithoutAssetInput = {
    where: MaintenanceAssetsWhereUniqueInput
    data: XOR<MaintenanceAssetsUpdateWithoutAssetInput, MaintenanceAssetsUncheckedUpdateWithoutAssetInput>
  }

  export type MaintenanceAssetsUpdateManyWithWhereWithoutAssetInput = {
    where: MaintenanceAssetsScalarWhereInput
    data: XOR<MaintenanceAssetsUpdateManyMutationInput, MaintenanceAssetsUncheckedUpdateManyWithoutAssetInput>
  }

  export type MaintenanceAssetsScalarWhereInput = {
    AND?: MaintenanceAssetsScalarWhereInput | MaintenanceAssetsScalarWhereInput[]
    OR?: MaintenanceAssetsScalarWhereInput[]
    NOT?: MaintenanceAssetsScalarWhereInput | MaintenanceAssetsScalarWhereInput[]
    maintenanceId?: UuidFilter<"MaintenanceAssets"> | string
    assetId?: UuidFilter<"MaintenanceAssets"> | string
  }

  export type WorkOrderAssetsUpsertWithWhereUniqueWithoutAssetInput = {
    where: WorkOrderAssetsWhereUniqueInput
    update: XOR<WorkOrderAssetsUpdateWithoutAssetInput, WorkOrderAssetsUncheckedUpdateWithoutAssetInput>
    create: XOR<WorkOrderAssetsCreateWithoutAssetInput, WorkOrderAssetsUncheckedCreateWithoutAssetInput>
  }

  export type WorkOrderAssetsUpdateWithWhereUniqueWithoutAssetInput = {
    where: WorkOrderAssetsWhereUniqueInput
    data: XOR<WorkOrderAssetsUpdateWithoutAssetInput, WorkOrderAssetsUncheckedUpdateWithoutAssetInput>
  }

  export type WorkOrderAssetsUpdateManyWithWhereWithoutAssetInput = {
    where: WorkOrderAssetsScalarWhereInput
    data: XOR<WorkOrderAssetsUpdateManyMutationInput, WorkOrderAssetsUncheckedUpdateManyWithoutAssetInput>
  }

  export type WorkOrderAssetsScalarWhereInput = {
    AND?: WorkOrderAssetsScalarWhereInput | WorkOrderAssetsScalarWhereInput[]
    OR?: WorkOrderAssetsScalarWhereInput[]
    NOT?: WorkOrderAssetsScalarWhereInput | WorkOrderAssetsScalarWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderAssets"> | string
    assetId?: UuidFilter<"WorkOrderAssets"> | string
  }

  export type IncidentUpsertWithWhereUniqueWithoutAssetInput = {
    where: IncidentWhereUniqueInput
    update: XOR<IncidentUpdateWithoutAssetInput, IncidentUncheckedUpdateWithoutAssetInput>
    create: XOR<IncidentCreateWithoutAssetInput, IncidentUncheckedCreateWithoutAssetInput>
  }

  export type IncidentUpdateWithWhereUniqueWithoutAssetInput = {
    where: IncidentWhereUniqueInput
    data: XOR<IncidentUpdateWithoutAssetInput, IncidentUncheckedUpdateWithoutAssetInput>
  }

  export type IncidentUpdateManyWithWhereWithoutAssetInput = {
    where: IncidentScalarWhereInput
    data: XOR<IncidentUpdateManyMutationInput, IncidentUncheckedUpdateManyWithoutAssetInput>
  }

  export type TenantCreateWithoutMetersInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutMetersInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutMetersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutMetersInput, TenantUncheckedCreateWithoutMetersInput>
  }

  export type AssetMeterCreateWithoutMeterInput = {
    id?: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutAssetMetersInput
    readings?: MeterReadingCreateNestedManyWithoutAssetMeterInput
  }

  export type AssetMeterUncheckedCreateWithoutMeterInput = {
    id?: string
    assetId: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    readings?: MeterReadingUncheckedCreateNestedManyWithoutAssetMeterInput
  }

  export type AssetMeterCreateOrConnectWithoutMeterInput = {
    where: AssetMeterWhereUniqueInput
    create: XOR<AssetMeterCreateWithoutMeterInput, AssetMeterUncheckedCreateWithoutMeterInput>
  }

  export type AssetMeterCreateManyMeterInputEnvelope = {
    data: AssetMeterCreateManyMeterInput | AssetMeterCreateManyMeterInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceScheduleCreateWithoutMeterInput = {
    id?: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutMaintenanceInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutMaintenanceInput
    assets?: MaintenanceAssetsCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleUncheckedCreateWithoutMeterInput = {
    id?: string
    tenantId: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutMaintenanceInput
    assets?: MaintenanceAssetsUncheckedCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleCreateOrConnectWithoutMeterInput = {
    where: MaintenanceScheduleWhereUniqueInput
    create: XOR<MaintenanceScheduleCreateWithoutMeterInput, MaintenanceScheduleUncheckedCreateWithoutMeterInput>
  }

  export type MaintenanceScheduleCreateManyMeterInputEnvelope = {
    data: MaintenanceScheduleCreateManyMeterInput | MaintenanceScheduleCreateManyMeterInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutMetersInput = {
    update: XOR<TenantUpdateWithoutMetersInput, TenantUncheckedUpdateWithoutMetersInput>
    create: XOR<TenantCreateWithoutMetersInput, TenantUncheckedCreateWithoutMetersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutMetersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutMetersInput, TenantUncheckedUpdateWithoutMetersInput>
  }

  export type TenantUpdateWithoutMetersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutMetersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AssetMeterUpsertWithWhereUniqueWithoutMeterInput = {
    where: AssetMeterWhereUniqueInput
    update: XOR<AssetMeterUpdateWithoutMeterInput, AssetMeterUncheckedUpdateWithoutMeterInput>
    create: XOR<AssetMeterCreateWithoutMeterInput, AssetMeterUncheckedCreateWithoutMeterInput>
  }

  export type AssetMeterUpdateWithWhereUniqueWithoutMeterInput = {
    where: AssetMeterWhereUniqueInput
    data: XOR<AssetMeterUpdateWithoutMeterInput, AssetMeterUncheckedUpdateWithoutMeterInput>
  }

  export type AssetMeterUpdateManyWithWhereWithoutMeterInput = {
    where: AssetMeterScalarWhereInput
    data: XOR<AssetMeterUpdateManyMutationInput, AssetMeterUncheckedUpdateManyWithoutMeterInput>
  }

  export type MaintenanceScheduleUpsertWithWhereUniqueWithoutMeterInput = {
    where: MaintenanceScheduleWhereUniqueInput
    update: XOR<MaintenanceScheduleUpdateWithoutMeterInput, MaintenanceScheduleUncheckedUpdateWithoutMeterInput>
    create: XOR<MaintenanceScheduleCreateWithoutMeterInput, MaintenanceScheduleUncheckedCreateWithoutMeterInput>
  }

  export type MaintenanceScheduleUpdateWithWhereUniqueWithoutMeterInput = {
    where: MaintenanceScheduleWhereUniqueInput
    data: XOR<MaintenanceScheduleUpdateWithoutMeterInput, MaintenanceScheduleUncheckedUpdateWithoutMeterInput>
  }

  export type MaintenanceScheduleUpdateManyWithWhereWithoutMeterInput = {
    where: MaintenanceScheduleScalarWhereInput
    data: XOR<MaintenanceScheduleUpdateManyMutationInput, MaintenanceScheduleUncheckedUpdateManyWithoutMeterInput>
  }

  export type AssetCreateWithoutAssetMetersInput = {
    id?: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutAssetsInput
    assetType?: AssetTypeCreateNestedOneWithoutAssetsInput
    maintenance?: MaintenanceAssetsCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsCreateNestedManyWithoutAssetInput
    incidents?: IncidentCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutAssetMetersInput = {
    id?: string
    tenantId: string
    assetTypeId?: string | null
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    maintenance?: MaintenanceAssetsUncheckedCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsUncheckedCreateNestedManyWithoutAssetInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutAssetMetersInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutAssetMetersInput, AssetUncheckedCreateWithoutAssetMetersInput>
  }

  export type MeterCreateWithoutAssetMetersInput = {
    id?: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutMetersInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutMeterInput
  }

  export type MeterUncheckedCreateWithoutAssetMetersInput = {
    id?: string
    tenantId: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutMeterInput
  }

  export type MeterCreateOrConnectWithoutAssetMetersInput = {
    where: MeterWhereUniqueInput
    create: XOR<MeterCreateWithoutAssetMetersInput, MeterUncheckedCreateWithoutAssetMetersInput>
  }

  export type MeterReadingCreateWithoutAssetMeterInput = {
    id?: string
    readingValue: Decimal | DecimalJsLike | number | string
    readingDate?: Date | string
    createdAt?: Date | string
  }

  export type MeterReadingUncheckedCreateWithoutAssetMeterInput = {
    id?: string
    readingValue: Decimal | DecimalJsLike | number | string
    readingDate?: Date | string
    createdAt?: Date | string
  }

  export type MeterReadingCreateOrConnectWithoutAssetMeterInput = {
    where: MeterReadingWhereUniqueInput
    create: XOR<MeterReadingCreateWithoutAssetMeterInput, MeterReadingUncheckedCreateWithoutAssetMeterInput>
  }

  export type MeterReadingCreateManyAssetMeterInputEnvelope = {
    data: MeterReadingCreateManyAssetMeterInput | MeterReadingCreateManyAssetMeterInput[]
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithoutAssetMetersInput = {
    update: XOR<AssetUpdateWithoutAssetMetersInput, AssetUncheckedUpdateWithoutAssetMetersInput>
    create: XOR<AssetCreateWithoutAssetMetersInput, AssetUncheckedCreateWithoutAssetMetersInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutAssetMetersInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutAssetMetersInput, AssetUncheckedUpdateWithoutAssetMetersInput>
  }

  export type AssetUpdateWithoutAssetMetersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutAssetsNestedInput
    assetType?: AssetTypeUpdateOneWithoutAssetsNestedInput
    maintenance?: MaintenanceAssetsUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutAssetMetersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maintenance?: MaintenanceAssetsUncheckedUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUncheckedUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type MeterUpsertWithoutAssetMetersInput = {
    update: XOR<MeterUpdateWithoutAssetMetersInput, MeterUncheckedUpdateWithoutAssetMetersInput>
    create: XOR<MeterCreateWithoutAssetMetersInput, MeterUncheckedCreateWithoutAssetMetersInput>
    where?: MeterWhereInput
  }

  export type MeterUpdateToOneWithWhereWithoutAssetMetersInput = {
    where?: MeterWhereInput
    data: XOR<MeterUpdateWithoutAssetMetersInput, MeterUncheckedUpdateWithoutAssetMetersInput>
  }

  export type MeterUpdateWithoutAssetMetersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutMetersNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutMeterNestedInput
  }

  export type MeterUncheckedUpdateWithoutAssetMetersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutMeterNestedInput
  }

  export type MeterReadingUpsertWithWhereUniqueWithoutAssetMeterInput = {
    where: MeterReadingWhereUniqueInput
    update: XOR<MeterReadingUpdateWithoutAssetMeterInput, MeterReadingUncheckedUpdateWithoutAssetMeterInput>
    create: XOR<MeterReadingCreateWithoutAssetMeterInput, MeterReadingUncheckedCreateWithoutAssetMeterInput>
  }

  export type MeterReadingUpdateWithWhereUniqueWithoutAssetMeterInput = {
    where: MeterReadingWhereUniqueInput
    data: XOR<MeterReadingUpdateWithoutAssetMeterInput, MeterReadingUncheckedUpdateWithoutAssetMeterInput>
  }

  export type MeterReadingUpdateManyWithWhereWithoutAssetMeterInput = {
    where: MeterReadingScalarWhereInput
    data: XOR<MeterReadingUpdateManyMutationInput, MeterReadingUncheckedUpdateManyWithoutAssetMeterInput>
  }

  export type MeterReadingScalarWhereInput = {
    AND?: MeterReadingScalarWhereInput | MeterReadingScalarWhereInput[]
    OR?: MeterReadingScalarWhereInput[]
    NOT?: MeterReadingScalarWhereInput | MeterReadingScalarWhereInput[]
    id?: UuidFilter<"MeterReading"> | string
    assetMeterId?: UuidFilter<"MeterReading"> | string
    readingValue?: DecimalFilter<"MeterReading"> | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFilter<"MeterReading"> | Date | string
    createdAt?: DateTimeFilter<"MeterReading"> | Date | string
  }

  export type AssetMeterCreateWithoutReadingsInput = {
    id?: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutAssetMetersInput
    meter: MeterCreateNestedOneWithoutAssetMetersInput
  }

  export type AssetMeterUncheckedCreateWithoutReadingsInput = {
    id?: string
    assetId: string
    meterId: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetMeterCreateOrConnectWithoutReadingsInput = {
    where: AssetMeterWhereUniqueInput
    create: XOR<AssetMeterCreateWithoutReadingsInput, AssetMeterUncheckedCreateWithoutReadingsInput>
  }

  export type AssetMeterUpsertWithoutReadingsInput = {
    update: XOR<AssetMeterUpdateWithoutReadingsInput, AssetMeterUncheckedUpdateWithoutReadingsInput>
    create: XOR<AssetMeterCreateWithoutReadingsInput, AssetMeterUncheckedCreateWithoutReadingsInput>
    where?: AssetMeterWhereInput
  }

  export type AssetMeterUpdateToOneWithWhereWithoutReadingsInput = {
    where?: AssetMeterWhereInput
    data: XOR<AssetMeterUpdateWithoutReadingsInput, AssetMeterUncheckedUpdateWithoutReadingsInput>
  }

  export type AssetMeterUpdateWithoutReadingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutAssetMetersNestedInput
    meter?: MeterUpdateOneRequiredWithoutAssetMetersNestedInput
  }

  export type AssetMeterUncheckedUpdateWithoutReadingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    meterId?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantCreateWithoutMaintenanceInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutMaintenanceInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutMaintenanceInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutMaintenanceInput, TenantUncheckedCreateWithoutMaintenanceInput>
  }

  export type MeterCreateWithoutMaintenanceInput = {
    id?: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutMetersInput
    assetMeters?: AssetMeterCreateNestedManyWithoutMeterInput
  }

  export type MeterUncheckedCreateWithoutMaintenanceInput = {
    id?: string
    tenantId: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutMeterInput
  }

  export type MeterCreateOrConnectWithoutMaintenanceInput = {
    where: MeterWhereUniqueInput
    create: XOR<MeterCreateWithoutMaintenanceInput, MeterUncheckedCreateWithoutMaintenanceInput>
  }

  export type MaintenanceAssignmentCreateWithoutMaintenanceInput = {
    user: UserCreateNestedOneWithoutAssignmentsInput
  }

  export type MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput = {
    userId: string
  }

  export type MaintenanceAssignmentCreateOrConnectWithoutMaintenanceInput = {
    where: MaintenanceAssignmentWhereUniqueInput
    create: XOR<MaintenanceAssignmentCreateWithoutMaintenanceInput, MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput>
  }

  export type MaintenanceAssignmentCreateManyMaintenanceInputEnvelope = {
    data: MaintenanceAssignmentCreateManyMaintenanceInput | MaintenanceAssignmentCreateManyMaintenanceInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceAssetsCreateWithoutMaintenanceInput = {
    asset: AssetCreateNestedOneWithoutMaintenanceInput
  }

  export type MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput = {
    assetId: string
  }

  export type MaintenanceAssetsCreateOrConnectWithoutMaintenanceInput = {
    where: MaintenanceAssetsWhereUniqueInput
    create: XOR<MaintenanceAssetsCreateWithoutMaintenanceInput, MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput>
  }

  export type MaintenanceAssetsCreateManyMaintenanceInputEnvelope = {
    data: MaintenanceAssetsCreateManyMaintenanceInput | MaintenanceAssetsCreateManyMaintenanceInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderCreateWithoutMaintenanceInput = {
    id?: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutWorkOrdersInput
    assignments?: WorkOrderAssignmentCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutMaintenanceInput = {
    id?: string
    tenantId: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsUncheckedCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsUncheckedCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutMaintenanceInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutMaintenanceInput, WorkOrderUncheckedCreateWithoutMaintenanceInput>
  }

  export type WorkOrderCreateManyMaintenanceInputEnvelope = {
    data: WorkOrderCreateManyMaintenanceInput | WorkOrderCreateManyMaintenanceInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutMaintenanceInput = {
    update: XOR<TenantUpdateWithoutMaintenanceInput, TenantUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<TenantCreateWithoutMaintenanceInput, TenantUncheckedCreateWithoutMaintenanceInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutMaintenanceInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutMaintenanceInput, TenantUncheckedUpdateWithoutMaintenanceInput>
  }

  export type TenantUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type MeterUpsertWithoutMaintenanceInput = {
    update: XOR<MeterUpdateWithoutMaintenanceInput, MeterUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<MeterCreateWithoutMaintenanceInput, MeterUncheckedCreateWithoutMaintenanceInput>
    where?: MeterWhereInput
  }

  export type MeterUpdateToOneWithWhereWithoutMaintenanceInput = {
    where?: MeterWhereInput
    data: XOR<MeterUpdateWithoutMaintenanceInput, MeterUncheckedUpdateWithoutMaintenanceInput>
  }

  export type MeterUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutMetersNestedInput
    assetMeters?: AssetMeterUpdateManyWithoutMeterNestedInput
  }

  export type MeterUncheckedUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutMeterNestedInput
  }

  export type MaintenanceAssignmentUpsertWithWhereUniqueWithoutMaintenanceInput = {
    where: MaintenanceAssignmentWhereUniqueInput
    update: XOR<MaintenanceAssignmentUpdateWithoutMaintenanceInput, MaintenanceAssignmentUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<MaintenanceAssignmentCreateWithoutMaintenanceInput, MaintenanceAssignmentUncheckedCreateWithoutMaintenanceInput>
  }

  export type MaintenanceAssignmentUpdateWithWhereUniqueWithoutMaintenanceInput = {
    where: MaintenanceAssignmentWhereUniqueInput
    data: XOR<MaintenanceAssignmentUpdateWithoutMaintenanceInput, MaintenanceAssignmentUncheckedUpdateWithoutMaintenanceInput>
  }

  export type MaintenanceAssignmentUpdateManyWithWhereWithoutMaintenanceInput = {
    where: MaintenanceAssignmentScalarWhereInput
    data: XOR<MaintenanceAssignmentUpdateManyMutationInput, MaintenanceAssignmentUncheckedUpdateManyWithoutMaintenanceInput>
  }

  export type MaintenanceAssetsUpsertWithWhereUniqueWithoutMaintenanceInput = {
    where: MaintenanceAssetsWhereUniqueInput
    update: XOR<MaintenanceAssetsUpdateWithoutMaintenanceInput, MaintenanceAssetsUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<MaintenanceAssetsCreateWithoutMaintenanceInput, MaintenanceAssetsUncheckedCreateWithoutMaintenanceInput>
  }

  export type MaintenanceAssetsUpdateWithWhereUniqueWithoutMaintenanceInput = {
    where: MaintenanceAssetsWhereUniqueInput
    data: XOR<MaintenanceAssetsUpdateWithoutMaintenanceInput, MaintenanceAssetsUncheckedUpdateWithoutMaintenanceInput>
  }

  export type MaintenanceAssetsUpdateManyWithWhereWithoutMaintenanceInput = {
    where: MaintenanceAssetsScalarWhereInput
    data: XOR<MaintenanceAssetsUpdateManyMutationInput, MaintenanceAssetsUncheckedUpdateManyWithoutMaintenanceInput>
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutMaintenanceInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutMaintenanceInput, WorkOrderUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<WorkOrderCreateWithoutMaintenanceInput, WorkOrderUncheckedCreateWithoutMaintenanceInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutMaintenanceInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutMaintenanceInput, WorkOrderUncheckedUpdateWithoutMaintenanceInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutMaintenanceInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutMaintenanceInput>
  }

  export type MaintenanceScheduleCreateWithoutAssignmentsInput = {
    id?: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutMaintenanceInput
    meter?: MeterCreateNestedOneWithoutMaintenanceInput
    assets?: MaintenanceAssetsCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    tenantId: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: string | null
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assets?: MaintenanceAssetsUncheckedCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleCreateOrConnectWithoutAssignmentsInput = {
    where: MaintenanceScheduleWhereUniqueInput
    create: XOR<MaintenanceScheduleCreateWithoutAssignmentsInput, MaintenanceScheduleUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborCreateNestedManyWithoutUserInput
    incidents?: IncidentCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
  }

  export type MaintenanceScheduleUpsertWithoutAssignmentsInput = {
    update: XOR<MaintenanceScheduleUpdateWithoutAssignmentsInput, MaintenanceScheduleUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<MaintenanceScheduleCreateWithoutAssignmentsInput, MaintenanceScheduleUncheckedCreateWithoutAssignmentsInput>
    where?: MaintenanceScheduleWhereInput
  }

  export type MaintenanceScheduleUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: MaintenanceScheduleWhereInput
    data: XOR<MaintenanceScheduleUpdateWithoutAssignmentsInput, MaintenanceScheduleUncheckedUpdateWithoutAssignmentsInput>
  }

  export type MaintenanceScheduleUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutMaintenanceNestedInput
    meter?: MeterUpdateOneWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: NullableStringFieldUpdateOperationsInput | string | null
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assets?: MaintenanceAssetsUncheckedUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type UserUpsertWithoutAssignmentsInput = {
    update: XOR<UserUpdateWithoutAssignmentsInput, UserUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentsInput, UserUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutUserNestedInput
    incidents?: IncidentUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MaintenanceScheduleCreateWithoutAssetsInput = {
    id?: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutMaintenanceInput
    meter?: MeterCreateNestedOneWithoutMaintenanceInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleUncheckedCreateWithoutAssetsInput = {
    id?: string
    tenantId: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: string | null
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutMaintenanceInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleCreateOrConnectWithoutAssetsInput = {
    where: MaintenanceScheduleWhereUniqueInput
    create: XOR<MaintenanceScheduleCreateWithoutAssetsInput, MaintenanceScheduleUncheckedCreateWithoutAssetsInput>
  }

  export type AssetCreateWithoutMaintenanceInput = {
    id?: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutAssetsInput
    assetType?: AssetTypeCreateNestedOneWithoutAssetsInput
    assetMeters?: AssetMeterCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsCreateNestedManyWithoutAssetInput
    incidents?: IncidentCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutMaintenanceInput = {
    id?: string
    tenantId: string
    assetTypeId?: string | null
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsUncheckedCreateNestedManyWithoutAssetInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutMaintenanceInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutMaintenanceInput, AssetUncheckedCreateWithoutMaintenanceInput>
  }

  export type MaintenanceScheduleUpsertWithoutAssetsInput = {
    update: XOR<MaintenanceScheduleUpdateWithoutAssetsInput, MaintenanceScheduleUncheckedUpdateWithoutAssetsInput>
    create: XOR<MaintenanceScheduleCreateWithoutAssetsInput, MaintenanceScheduleUncheckedCreateWithoutAssetsInput>
    where?: MaintenanceScheduleWhereInput
  }

  export type MaintenanceScheduleUpdateToOneWithWhereWithoutAssetsInput = {
    where?: MaintenanceScheduleWhereInput
    data: XOR<MaintenanceScheduleUpdateWithoutAssetsInput, MaintenanceScheduleUncheckedUpdateWithoutAssetsInput>
  }

  export type MaintenanceScheduleUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutMaintenanceNestedInput
    meter?: MeterUpdateOneWithoutMaintenanceNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: NullableStringFieldUpdateOperationsInput | string | null
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type AssetUpsertWithoutMaintenanceInput = {
    update: XOR<AssetUpdateWithoutMaintenanceInput, AssetUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<AssetCreateWithoutMaintenanceInput, AssetUncheckedCreateWithoutMaintenanceInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutMaintenanceInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutMaintenanceInput, AssetUncheckedUpdateWithoutMaintenanceInput>
  }

  export type AssetUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutAssetsNestedInput
    assetType?: AssetTypeUpdateOneWithoutAssetsNestedInput
    assetMeters?: AssetMeterUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUncheckedUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type TenantCreateWithoutWorkOrdersInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutWorkOrdersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutWorkOrdersInput, TenantUncheckedCreateWithoutWorkOrdersInput>
  }

  export type MaintenanceScheduleCreateWithoutWorkOrdersInput = {
    id?: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutMaintenanceInput
    meter?: MeterCreateNestedOneWithoutMaintenanceInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutMaintenanceInput
    assets?: MaintenanceAssetsCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    tenantId: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: string | null
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutMaintenanceInput
    assets?: MaintenanceAssetsUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceScheduleCreateOrConnectWithoutWorkOrdersInput = {
    where: MaintenanceScheduleWhereUniqueInput
    create: XOR<MaintenanceScheduleCreateWithoutWorkOrdersInput, MaintenanceScheduleUncheckedCreateWithoutWorkOrdersInput>
  }

  export type WorkOrderAssignmentCreateWithoutWorkOrderInput = {
    user: UserCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput = {
    userId: string
  }

  export type WorkOrderAssignmentCreateOrConnectWithoutWorkOrderInput = {
    where: WorkOrderAssignmentWhereUniqueInput
    create: XOR<WorkOrderAssignmentCreateWithoutWorkOrderInput, WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderAssignmentCreateManyWorkOrderInputEnvelope = {
    data: WorkOrderAssignmentCreateManyWorkOrderInput | WorkOrderAssignmentCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderAssetsCreateWithoutWorkOrderInput = {
    asset: AssetCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput = {
    assetId: string
  }

  export type WorkOrderAssetsCreateOrConnectWithoutWorkOrderInput = {
    where: WorkOrderAssetsWhereUniqueInput
    create: XOR<WorkOrderAssetsCreateWithoutWorkOrderInput, WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderAssetsCreateManyWorkOrderInputEnvelope = {
    data: WorkOrderAssetsCreateManyWorkOrderInput | WorkOrderAssetsCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderPartsCreateWithoutWorkOrderInput = {
    quantityUsed: number
    part: PartCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderPartsUncheckedCreateWithoutWorkOrderInput = {
    partId: string
    quantityUsed: number
  }

  export type WorkOrderPartsCreateOrConnectWithoutWorkOrderInput = {
    where: WorkOrderPartsWhereUniqueInput
    create: XOR<WorkOrderPartsCreateWithoutWorkOrderInput, WorkOrderPartsUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderPartsCreateManyWorkOrderInputEnvelope = {
    data: WorkOrderPartsCreateManyWorkOrderInput | WorkOrderPartsCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderLaborCreateWithoutWorkOrderInput = {
    id?: string
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutLaborInput
  }

  export type WorkOrderLaborUncheckedCreateWithoutWorkOrderInput = {
    id?: string
    userId?: string | null
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
  }

  export type WorkOrderLaborCreateOrConnectWithoutWorkOrderInput = {
    where: WorkOrderLaborWhereUniqueInput
    create: XOR<WorkOrderLaborCreateWithoutWorkOrderInput, WorkOrderLaborUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderLaborCreateManyWorkOrderInputEnvelope = {
    data: WorkOrderLaborCreateManyWorkOrderInput | WorkOrderLaborCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderLogCreateWithoutWorkOrderInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutWorkOrderLogsInput
  }

  export type WorkOrderLogUncheckedCreateWithoutWorkOrderInput = {
    id?: string
    userId?: string | null
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type WorkOrderLogCreateOrConnectWithoutWorkOrderInput = {
    where: WorkOrderLogWhereUniqueInput
    create: XOR<WorkOrderLogCreateWithoutWorkOrderInput, WorkOrderLogUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderLogCreateManyWorkOrderInputEnvelope = {
    data: WorkOrderLogCreateManyWorkOrderInput | WorkOrderLogCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutWorkOrdersInput = {
    update: XOR<TenantUpdateWithoutWorkOrdersInput, TenantUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<TenantCreateWithoutWorkOrdersInput, TenantUncheckedCreateWithoutWorkOrdersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutWorkOrdersInput, TenantUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type TenantUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type MaintenanceScheduleUpsertWithoutWorkOrdersInput = {
    update: XOR<MaintenanceScheduleUpdateWithoutWorkOrdersInput, MaintenanceScheduleUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<MaintenanceScheduleCreateWithoutWorkOrdersInput, MaintenanceScheduleUncheckedCreateWithoutWorkOrdersInput>
    where?: MaintenanceScheduleWhereInput
  }

  export type MaintenanceScheduleUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: MaintenanceScheduleWhereInput
    data: XOR<MaintenanceScheduleUpdateWithoutWorkOrdersInput, MaintenanceScheduleUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type MaintenanceScheduleUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutMaintenanceNestedInput
    meter?: MeterUpdateOneWithoutMaintenanceNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: NullableStringFieldUpdateOperationsInput | string | null
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type WorkOrderAssignmentUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderAssignmentWhereUniqueInput
    update: XOR<WorkOrderAssignmentUpdateWithoutWorkOrderInput, WorkOrderAssignmentUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkOrderAssignmentCreateWithoutWorkOrderInput, WorkOrderAssignmentUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderAssignmentUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderAssignmentWhereUniqueInput
    data: XOR<WorkOrderAssignmentUpdateWithoutWorkOrderInput, WorkOrderAssignmentUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkOrderAssignmentUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkOrderAssignmentScalarWhereInput
    data: XOR<WorkOrderAssignmentUpdateManyMutationInput, WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderAssetsUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderAssetsWhereUniqueInput
    update: XOR<WorkOrderAssetsUpdateWithoutWorkOrderInput, WorkOrderAssetsUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkOrderAssetsCreateWithoutWorkOrderInput, WorkOrderAssetsUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderAssetsUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderAssetsWhereUniqueInput
    data: XOR<WorkOrderAssetsUpdateWithoutWorkOrderInput, WorkOrderAssetsUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkOrderAssetsUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkOrderAssetsScalarWhereInput
    data: XOR<WorkOrderAssetsUpdateManyMutationInput, WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderPartsUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderPartsWhereUniqueInput
    update: XOR<WorkOrderPartsUpdateWithoutWorkOrderInput, WorkOrderPartsUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkOrderPartsCreateWithoutWorkOrderInput, WorkOrderPartsUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderPartsUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderPartsWhereUniqueInput
    data: XOR<WorkOrderPartsUpdateWithoutWorkOrderInput, WorkOrderPartsUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkOrderPartsUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkOrderPartsScalarWhereInput
    data: XOR<WorkOrderPartsUpdateManyMutationInput, WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderPartsScalarWhereInput = {
    AND?: WorkOrderPartsScalarWhereInput | WorkOrderPartsScalarWhereInput[]
    OR?: WorkOrderPartsScalarWhereInput[]
    NOT?: WorkOrderPartsScalarWhereInput | WorkOrderPartsScalarWhereInput[]
    workOrderId?: UuidFilter<"WorkOrderParts"> | string
    partId?: UuidFilter<"WorkOrderParts"> | string
    quantityUsed?: IntFilter<"WorkOrderParts"> | number
  }

  export type WorkOrderLaborUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderLaborWhereUniqueInput
    update: XOR<WorkOrderLaborUpdateWithoutWorkOrderInput, WorkOrderLaborUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkOrderLaborCreateWithoutWorkOrderInput, WorkOrderLaborUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderLaborUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderLaborWhereUniqueInput
    data: XOR<WorkOrderLaborUpdateWithoutWorkOrderInput, WorkOrderLaborUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkOrderLaborUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkOrderLaborScalarWhereInput
    data: XOR<WorkOrderLaborUpdateManyMutationInput, WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderLogUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderLogWhereUniqueInput
    update: XOR<WorkOrderLogUpdateWithoutWorkOrderInput, WorkOrderLogUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkOrderLogCreateWithoutWorkOrderInput, WorkOrderLogUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderLogUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderLogWhereUniqueInput
    data: XOR<WorkOrderLogUpdateWithoutWorkOrderInput, WorkOrderLogUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkOrderLogUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkOrderLogScalarWhereInput
    data: XOR<WorkOrderLogUpdateManyMutationInput, WorkOrderLogUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderCreateWithoutAssignmentsInput = {
    id?: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutWorkOrdersInput
    maintenance?: MaintenanceScheduleCreateNestedOneWithoutWorkOrdersInput
    assets?: WorkOrderAssetsCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    tenantId: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assets?: WorkOrderAssetsUncheckedCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsUncheckedCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutAssignmentsInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutAssignmentsInput, WorkOrderUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserCreateWithoutWorkOrdersInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborCreateNestedManyWithoutUserInput
    incidents?: IncidentCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkOrdersInput, UserUncheckedCreateWithoutWorkOrdersInput>
  }

  export type WorkOrderUpsertWithoutAssignmentsInput = {
    update: XOR<WorkOrderUpdateWithoutAssignmentsInput, WorkOrderUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<WorkOrderCreateWithoutAssignmentsInput, WorkOrderUncheckedCreateWithoutAssignmentsInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutAssignmentsInput, WorkOrderUncheckedUpdateWithoutAssignmentsInput>
  }

  export type WorkOrderUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutWorkOrdersNestedInput
    maintenance?: MaintenanceScheduleUpdateOneWithoutWorkOrdersNestedInput
    assets?: WorkOrderAssetsUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assets?: WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type UserUpsertWithoutWorkOrdersInput = {
    update: XOR<UserUpdateWithoutWorkOrdersInput, UserUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<UserCreateWithoutWorkOrdersInput, UserUncheckedCreateWithoutWorkOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkOrdersInput, UserUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type UserUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutUserNestedInput
    incidents?: IncidentUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkOrderCreateWithoutAssetsInput = {
    id?: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutWorkOrdersInput
    maintenance?: MaintenanceScheduleCreateNestedOneWithoutWorkOrdersInput
    assignments?: WorkOrderAssignmentCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutAssetsInput = {
    id?: string
    tenantId: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsUncheckedCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutAssetsInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutAssetsInput, WorkOrderUncheckedCreateWithoutAssetsInput>
  }

  export type AssetCreateWithoutWorkOrdersInput = {
    id?: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutAssetsInput
    assetType?: AssetTypeCreateNestedOneWithoutAssetsInput
    assetMeters?: AssetMeterCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsCreateNestedManyWithoutAssetInput
    incidents?: IncidentCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    tenantId: string
    assetTypeId?: string | null
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsUncheckedCreateNestedManyWithoutAssetInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutWorkOrdersInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutWorkOrdersInput, AssetUncheckedCreateWithoutWorkOrdersInput>
  }

  export type WorkOrderUpsertWithoutAssetsInput = {
    update: XOR<WorkOrderUpdateWithoutAssetsInput, WorkOrderUncheckedUpdateWithoutAssetsInput>
    create: XOR<WorkOrderCreateWithoutAssetsInput, WorkOrderUncheckedCreateWithoutAssetsInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutAssetsInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutAssetsInput, WorkOrderUncheckedUpdateWithoutAssetsInput>
  }

  export type WorkOrderUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutWorkOrdersNestedInput
    maintenance?: MaintenanceScheduleUpdateOneWithoutWorkOrdersNestedInput
    assignments?: WorkOrderAssignmentUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type AssetUpsertWithoutWorkOrdersInput = {
    update: XOR<AssetUpdateWithoutWorkOrdersInput, AssetUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<AssetCreateWithoutWorkOrdersInput, AssetUncheckedCreateWithoutWorkOrdersInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutWorkOrdersInput, AssetUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type AssetUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutAssetsNestedInput
    assetType?: AssetTypeUpdateOneWithoutAssetsNestedInput
    assetMeters?: AssetMeterUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUncheckedUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type WorkOrderCreateWithoutPartsInput = {
    id?: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutWorkOrdersInput
    maintenance?: MaintenanceScheduleCreateNestedOneWithoutWorkOrdersInput
    assignments?: WorkOrderAssignmentCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutPartsInput = {
    id?: string
    tenantId: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsUncheckedCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutPartsInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutPartsInput, WorkOrderUncheckedCreateWithoutPartsInput>
  }

  export type PartCreateWithoutWorkOrdersInput = {
    id?: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutPartsInput
    vendors?: PartVendorCreateNestedManyWithoutPartInput
  }

  export type PartUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    tenantId: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    vendors?: PartVendorUncheckedCreateNestedManyWithoutPartInput
  }

  export type PartCreateOrConnectWithoutWorkOrdersInput = {
    where: PartWhereUniqueInput
    create: XOR<PartCreateWithoutWorkOrdersInput, PartUncheckedCreateWithoutWorkOrdersInput>
  }

  export type WorkOrderUpsertWithoutPartsInput = {
    update: XOR<WorkOrderUpdateWithoutPartsInput, WorkOrderUncheckedUpdateWithoutPartsInput>
    create: XOR<WorkOrderCreateWithoutPartsInput, WorkOrderUncheckedCreateWithoutPartsInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutPartsInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutPartsInput, WorkOrderUncheckedUpdateWithoutPartsInput>
  }

  export type WorkOrderUpdateWithoutPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutWorkOrdersNestedInput
    maintenance?: MaintenanceScheduleUpdateOneWithoutWorkOrdersNestedInput
    assignments?: WorkOrderAssignmentUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type PartUpsertWithoutWorkOrdersInput = {
    update: XOR<PartUpdateWithoutWorkOrdersInput, PartUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<PartCreateWithoutWorkOrdersInput, PartUncheckedCreateWithoutWorkOrdersInput>
    where?: PartWhereInput
  }

  export type PartUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: PartWhereInput
    data: XOR<PartUpdateWithoutWorkOrdersInput, PartUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type PartUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutPartsNestedInput
    vendors?: PartVendorUpdateManyWithoutPartNestedInput
  }

  export type PartUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vendors?: PartVendorUncheckedUpdateManyWithoutPartNestedInput
  }

  export type TenantCreateWithoutPartsInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutPartsInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutPartsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPartsInput, TenantUncheckedCreateWithoutPartsInput>
  }

  export type PartVendorCreateWithoutPartInput = {
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
    vendor: VendorCreateNestedOneWithoutPartsInput
  }

  export type PartVendorUncheckedCreateWithoutPartInput = {
    vendorId: string
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
  }

  export type PartVendorCreateOrConnectWithoutPartInput = {
    where: PartVendorWhereUniqueInput
    create: XOR<PartVendorCreateWithoutPartInput, PartVendorUncheckedCreateWithoutPartInput>
  }

  export type PartVendorCreateManyPartInputEnvelope = {
    data: PartVendorCreateManyPartInput | PartVendorCreateManyPartInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderPartsCreateWithoutPartInput = {
    quantityUsed: number
    workOrder: WorkOrderCreateNestedOneWithoutPartsInput
  }

  export type WorkOrderPartsUncheckedCreateWithoutPartInput = {
    workOrderId: string
    quantityUsed: number
  }

  export type WorkOrderPartsCreateOrConnectWithoutPartInput = {
    where: WorkOrderPartsWhereUniqueInput
    create: XOR<WorkOrderPartsCreateWithoutPartInput, WorkOrderPartsUncheckedCreateWithoutPartInput>
  }

  export type WorkOrderPartsCreateManyPartInputEnvelope = {
    data: WorkOrderPartsCreateManyPartInput | WorkOrderPartsCreateManyPartInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutPartsInput = {
    update: XOR<TenantUpdateWithoutPartsInput, TenantUncheckedUpdateWithoutPartsInput>
    create: XOR<TenantCreateWithoutPartsInput, TenantUncheckedCreateWithoutPartsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPartsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPartsInput, TenantUncheckedUpdateWithoutPartsInput>
  }

  export type TenantUpdateWithoutPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type PartVendorUpsertWithWhereUniqueWithoutPartInput = {
    where: PartVendorWhereUniqueInput
    update: XOR<PartVendorUpdateWithoutPartInput, PartVendorUncheckedUpdateWithoutPartInput>
    create: XOR<PartVendorCreateWithoutPartInput, PartVendorUncheckedCreateWithoutPartInput>
  }

  export type PartVendorUpdateWithWhereUniqueWithoutPartInput = {
    where: PartVendorWhereUniqueInput
    data: XOR<PartVendorUpdateWithoutPartInput, PartVendorUncheckedUpdateWithoutPartInput>
  }

  export type PartVendorUpdateManyWithWhereWithoutPartInput = {
    where: PartVendorScalarWhereInput
    data: XOR<PartVendorUpdateManyMutationInput, PartVendorUncheckedUpdateManyWithoutPartInput>
  }

  export type PartVendorScalarWhereInput = {
    AND?: PartVendorScalarWhereInput | PartVendorScalarWhereInput[]
    OR?: PartVendorScalarWhereInput[]
    NOT?: PartVendorScalarWhereInput | PartVendorScalarWhereInput[]
    partId?: UuidFilter<"PartVendor"> | string
    vendorId?: UuidFilter<"PartVendor"> | string
    cost?: DecimalFilter<"PartVendor"> | Decimal | DecimalJsLike | number | string
    leadTime?: IntNullableFilter<"PartVendor"> | number | null
  }

  export type WorkOrderPartsUpsertWithWhereUniqueWithoutPartInput = {
    where: WorkOrderPartsWhereUniqueInput
    update: XOR<WorkOrderPartsUpdateWithoutPartInput, WorkOrderPartsUncheckedUpdateWithoutPartInput>
    create: XOR<WorkOrderPartsCreateWithoutPartInput, WorkOrderPartsUncheckedCreateWithoutPartInput>
  }

  export type WorkOrderPartsUpdateWithWhereUniqueWithoutPartInput = {
    where: WorkOrderPartsWhereUniqueInput
    data: XOR<WorkOrderPartsUpdateWithoutPartInput, WorkOrderPartsUncheckedUpdateWithoutPartInput>
  }

  export type WorkOrderPartsUpdateManyWithWhereWithoutPartInput = {
    where: WorkOrderPartsScalarWhereInput
    data: XOR<WorkOrderPartsUpdateManyMutationInput, WorkOrderPartsUncheckedUpdateManyWithoutPartInput>
  }

  export type TenantCreateWithoutVendorsInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    incidents?: IncidentCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutVendorsInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutVendorsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutVendorsInput, TenantUncheckedCreateWithoutVendorsInput>
  }

  export type PartVendorCreateWithoutVendorInput = {
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
    part: PartCreateNestedOneWithoutVendorsInput
  }

  export type PartVendorUncheckedCreateWithoutVendorInput = {
    partId: string
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
  }

  export type PartVendorCreateOrConnectWithoutVendorInput = {
    where: PartVendorWhereUniqueInput
    create: XOR<PartVendorCreateWithoutVendorInput, PartVendorUncheckedCreateWithoutVendorInput>
  }

  export type PartVendorCreateManyVendorInputEnvelope = {
    data: PartVendorCreateManyVendorInput | PartVendorCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutVendorsInput = {
    update: XOR<TenantUpdateWithoutVendorsInput, TenantUncheckedUpdateWithoutVendorsInput>
    create: XOR<TenantCreateWithoutVendorsInput, TenantUncheckedCreateWithoutVendorsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutVendorsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutVendorsInput, TenantUncheckedUpdateWithoutVendorsInput>
  }

  export type TenantUpdateWithoutVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type PartVendorUpsertWithWhereUniqueWithoutVendorInput = {
    where: PartVendorWhereUniqueInput
    update: XOR<PartVendorUpdateWithoutVendorInput, PartVendorUncheckedUpdateWithoutVendorInput>
    create: XOR<PartVendorCreateWithoutVendorInput, PartVendorUncheckedCreateWithoutVendorInput>
  }

  export type PartVendorUpdateWithWhereUniqueWithoutVendorInput = {
    where: PartVendorWhereUniqueInput
    data: XOR<PartVendorUpdateWithoutVendorInput, PartVendorUncheckedUpdateWithoutVendorInput>
  }

  export type PartVendorUpdateManyWithWhereWithoutVendorInput = {
    where: PartVendorScalarWhereInput
    data: XOR<PartVendorUpdateManyMutationInput, PartVendorUncheckedUpdateManyWithoutVendorInput>
  }

  export type PartCreateWithoutVendorsInput = {
    id?: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutPartsInput
    workOrders?: WorkOrderPartsCreateNestedManyWithoutPartInput
  }

  export type PartUncheckedCreateWithoutVendorsInput = {
    id?: string
    tenantId: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    workOrders?: WorkOrderPartsUncheckedCreateNestedManyWithoutPartInput
  }

  export type PartCreateOrConnectWithoutVendorsInput = {
    where: PartWhereUniqueInput
    create: XOR<PartCreateWithoutVendorsInput, PartUncheckedCreateWithoutVendorsInput>
  }

  export type VendorCreateWithoutPartsInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutVendorsInput
  }

  export type VendorUncheckedCreateWithoutPartsInput = {
    id?: string
    tenantId: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type VendorCreateOrConnectWithoutPartsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutPartsInput, VendorUncheckedCreateWithoutPartsInput>
  }

  export type PartUpsertWithoutVendorsInput = {
    update: XOR<PartUpdateWithoutVendorsInput, PartUncheckedUpdateWithoutVendorsInput>
    create: XOR<PartCreateWithoutVendorsInput, PartUncheckedCreateWithoutVendorsInput>
    where?: PartWhereInput
  }

  export type PartUpdateToOneWithWhereWithoutVendorsInput = {
    where?: PartWhereInput
    data: XOR<PartUpdateWithoutVendorsInput, PartUncheckedUpdateWithoutVendorsInput>
  }

  export type PartUpdateWithoutVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutPartsNestedInput
    workOrders?: WorkOrderPartsUpdateManyWithoutPartNestedInput
  }

  export type PartUncheckedUpdateWithoutVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workOrders?: WorkOrderPartsUncheckedUpdateManyWithoutPartNestedInput
  }

  export type VendorUpsertWithoutPartsInput = {
    update: XOR<VendorUpdateWithoutPartsInput, VendorUncheckedUpdateWithoutPartsInput>
    create: XOR<VendorCreateWithoutPartsInput, VendorUncheckedCreateWithoutPartsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutPartsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutPartsInput, VendorUncheckedUpdateWithoutPartsInput>
  }

  export type VendorUpdateWithoutPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutVendorsNestedInput
  }

  export type VendorUncheckedUpdateWithoutPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkOrderCreateWithoutLaborInput = {
    id?: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutWorkOrdersInput
    maintenance?: MaintenanceScheduleCreateNestedOneWithoutWorkOrdersInput
    assignments?: WorkOrderAssignmentCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutLaborInput = {
    id?: string
    tenantId: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsUncheckedCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsUncheckedCreateNestedManyWithoutWorkOrderInput
    logs?: WorkOrderLogUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutLaborInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutLaborInput, WorkOrderUncheckedCreateWithoutLaborInput>
  }

  export type UserCreateWithoutLaborInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentCreateNestedManyWithoutUserInput
    incidents?: IncidentCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLaborInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutReportedByInput
    workOrderLogs?: WorkOrderLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLaborInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLaborInput, UserUncheckedCreateWithoutLaborInput>
  }

  export type WorkOrderUpsertWithoutLaborInput = {
    update: XOR<WorkOrderUpdateWithoutLaborInput, WorkOrderUncheckedUpdateWithoutLaborInput>
    create: XOR<WorkOrderCreateWithoutLaborInput, WorkOrderUncheckedCreateWithoutLaborInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutLaborInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutLaborInput, WorkOrderUncheckedUpdateWithoutLaborInput>
  }

  export type WorkOrderUpdateWithoutLaborInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutWorkOrdersNestedInput
    maintenance?: MaintenanceScheduleUpdateOneWithoutWorkOrdersNestedInput
    assignments?: WorkOrderAssignmentUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutLaborInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type UserUpsertWithoutLaborInput = {
    update: XOR<UserUpdateWithoutLaborInput, UserUncheckedUpdateWithoutLaborInput>
    create: XOR<UserCreateWithoutLaborInput, UserUncheckedCreateWithoutLaborInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLaborInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLaborInput, UserUncheckedUpdateWithoutLaborInput>
  }

  export type UserUpdateWithoutLaborInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUpdateManyWithoutUserNestedInput
    incidents?: IncidentUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLaborInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TenantCreateWithoutIncidentsInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    parent?: TenantCreateNestedOneWithoutChildrenInput
    settings?: TenantSettingsCreateNestedOneWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeCreateNestedManyWithoutTenantInput
    assets?: AssetCreateNestedManyWithoutTenantInput
    meters?: MeterCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderCreateNestedManyWithoutTenantInput
    parts?: PartCreateNestedManyWithoutTenantInput
    vendors?: VendorCreateNestedManyWithoutTenantInput
    children?: TenantCreateNestedManyWithoutParentInput
  }

  export type TenantUncheckedCreateWithoutIncidentsInput = {
    id?: string
    name: string
    subdomain: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    settings?: TenantSettingsUncheckedCreateNestedOneWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    categories?: AssetCategoryUncheckedCreateNestedManyWithoutTenantInput
    assetTypes?: AssetTypeUncheckedCreateNestedManyWithoutTenantInput
    assets?: AssetUncheckedCreateNestedManyWithoutTenantInput
    meters?: MeterUncheckedCreateNestedManyWithoutTenantInput
    maintenance?: MaintenanceScheduleUncheckedCreateNestedManyWithoutTenantInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutTenantInput
    parts?: PartUncheckedCreateNestedManyWithoutTenantInput
    vendors?: VendorUncheckedCreateNestedManyWithoutTenantInput
    children?: TenantUncheckedCreateNestedManyWithoutParentInput
  }

  export type TenantCreateOrConnectWithoutIncidentsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutIncidentsInput, TenantUncheckedCreateWithoutIncidentsInput>
  }

  export type AssetCreateWithoutIncidentsInput = {
    id?: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutAssetsInput
    assetType?: AssetTypeCreateNestedOneWithoutAssetsInput
    assetMeters?: AssetMeterCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutIncidentsInput = {
    id?: string
    tenantId: string
    assetTypeId?: string | null
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assetMeters?: AssetMeterUncheckedCreateNestedManyWithoutAssetInput
    maintenance?: MaintenanceAssetsUncheckedCreateNestedManyWithoutAssetInput
    workOrders?: WorkOrderAssetsUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutIncidentsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutIncidentsInput, AssetUncheckedCreateWithoutIncidentsInput>
  }

  export type UserCreateWithoutIncidentsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborCreateNestedManyWithoutUserInput
    workOrderLogs?: WorkOrderLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutIncidentsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput
    workOrderLogs?: WorkOrderLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutIncidentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIncidentsInput, UserUncheckedCreateWithoutIncidentsInput>
  }

  export type TenantUpsertWithoutIncidentsInput = {
    update: XOR<TenantUpdateWithoutIncidentsInput, TenantUncheckedUpdateWithoutIncidentsInput>
    create: XOR<TenantCreateWithoutIncidentsInput, TenantUncheckedCreateWithoutIncidentsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutIncidentsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutIncidentsInput, TenantUncheckedUpdateWithoutIncidentsInput>
  }

  export type TenantUpdateWithoutIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: TenantUpdateOneWithoutChildrenNestedInput
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AssetUpsertWithoutIncidentsInput = {
    update: XOR<AssetUpdateWithoutIncidentsInput, AssetUncheckedUpdateWithoutIncidentsInput>
    create: XOR<AssetCreateWithoutIncidentsInput, AssetUncheckedCreateWithoutIncidentsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutIncidentsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutIncidentsInput, AssetUncheckedUpdateWithoutIncidentsInput>
  }

  export type AssetUpdateWithoutIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutAssetsNestedInput
    assetType?: AssetTypeUpdateOneWithoutAssetsNestedInput
    assetMeters?: AssetMeterUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUncheckedUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutIncidentsInput = {
    update: XOR<UserUpdateWithoutIncidentsInput, UserUncheckedUpdateWithoutIncidentsInput>
    create: XOR<UserCreateWithoutIncidentsInput, UserUncheckedCreateWithoutIncidentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutIncidentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutIncidentsInput, UserUncheckedUpdateWithoutIncidentsInput>
  }

  export type UserUpdateWithoutIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutUserNestedInput
    workOrderLogs?: WorkOrderLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput
    workOrderLogs?: WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkOrderCreateWithoutLogsInput = {
    id?: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutWorkOrdersInput
    maintenance?: MaintenanceScheduleCreateNestedOneWithoutWorkOrdersInput
    assignments?: WorkOrderAssignmentCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutLogsInput = {
    id?: string
    tenantId: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assignments?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutWorkOrderInput
    assets?: WorkOrderAssetsUncheckedCreateNestedManyWithoutWorkOrderInput
    parts?: WorkOrderPartsUncheckedCreateNestedManyWithoutWorkOrderInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutLogsInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutLogsInput, WorkOrderUncheckedCreateWithoutLogsInput>
  }

  export type UserCreateWithoutWorkOrderLogsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborCreateNestedManyWithoutUserInput
    incidents?: IncidentCreateNestedManyWithoutReportedByInput
  }

  export type UserUncheckedCreateWithoutWorkOrderLogsInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    tenantId: string
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignments?: MaintenanceAssignmentUncheckedCreateNestedManyWithoutUserInput
    workOrders?: WorkOrderAssignmentUncheckedCreateNestedManyWithoutUserInput
    labor?: WorkOrderLaborUncheckedCreateNestedManyWithoutUserInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutReportedByInput
  }

  export type UserCreateOrConnectWithoutWorkOrderLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkOrderLogsInput, UserUncheckedCreateWithoutWorkOrderLogsInput>
  }

  export type WorkOrderUpsertWithoutLogsInput = {
    update: XOR<WorkOrderUpdateWithoutLogsInput, WorkOrderUncheckedUpdateWithoutLogsInput>
    create: XOR<WorkOrderCreateWithoutLogsInput, WorkOrderUncheckedCreateWithoutLogsInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutLogsInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutLogsInput, WorkOrderUncheckedUpdateWithoutLogsInput>
  }

  export type WorkOrderUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutWorkOrdersNestedInput
    maintenance?: MaintenanceScheduleUpdateOneWithoutWorkOrdersNestedInput
    assignments?: WorkOrderAssignmentUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type UserUpsertWithoutWorkOrderLogsInput = {
    update: XOR<UserUpdateWithoutWorkOrderLogsInput, UserUncheckedUpdateWithoutWorkOrderLogsInput>
    create: XOR<UserCreateWithoutWorkOrderLogsInput, UserUncheckedCreateWithoutWorkOrderLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkOrderLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkOrderLogsInput, UserUncheckedUpdateWithoutWorkOrderLogsInput>
  }

  export type UserUpdateWithoutWorkOrderLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutUserNestedInput
    incidents?: IncidentUpdateManyWithoutReportedByNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkOrderLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutReportedByNestedInput
  }

  export type UserCreateManyTenantInput = {
    id?: string
    name: string
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    employeeId: string
    password?: string | null
    role: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AssetCategoryCreateManyTenantInput = {
    id?: string
    name: string
    industry: $Enums.IndustryType
    description?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetTypeCreateManyTenantInput = {
    id?: string
    categoryId?: string | null
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCreateManyTenantInput = {
    id?: string
    assetTypeId?: string | null
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type MeterCreateManyTenantInput = {
    id?: string
    name: string
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceScheduleCreateManyTenantInput = {
    id?: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: string | null
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type WorkOrderCreateManyTenantInput = {
    id?: string
    maintenanceId?: string | null
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PartCreateManyTenantInput = {
    id?: string
    name: string
    partNumber?: string | null
    description?: string | null
    quantity?: number
    minStock?: number
    unitCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type VendorCreateManyTenantInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type IncidentCreateManyTenantInput = {
    id?: string
    assetId?: string | null
    reportedById?: string | null
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type TenantCreateManyParentInput = {
    id?: string
    name: string
    subdomain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutUserNestedInput
    incidents?: IncidentUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutUserNestedInput
    workOrders?: WorkOrderAssignmentUncheckedUpdateManyWithoutUserNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutUserNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutReportedByNestedInput
    workOrderLogs?: WorkOrderLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetCategoryUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetTypes?: AssetTypeUpdateManyWithoutCategoryNestedInput
  }

  export type AssetCategoryUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type AssetCategoryUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    industry?: EnumIndustryTypeFieldUpdateOperationsInput | $Enums.IndustryType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetTypeUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: AssetCategoryUpdateOneWithoutAssetTypesNestedInput
    assets?: AssetUpdateManyWithoutAssetTypeNestedInput
  }

  export type AssetTypeUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutAssetTypeNestedInput
  }

  export type AssetTypeUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assetType?: AssetTypeUpdateOneWithoutAssetsNestedInput
    assetMeters?: AssetMeterUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUncheckedUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUncheckedUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MeterUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetMeters?: AssetMeterUpdateManyWithoutMeterNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutMeterNestedInput
  }

  export type MeterUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutMeterNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutMeterNestedInput
  }

  export type MeterUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceScheduleUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    meter?: MeterUpdateOneWithoutMaintenanceNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: NullableStringFieldUpdateOperationsInput | string | null
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUncheckedUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    meterId?: NullableStringFieldUpdateOperationsInput | string | null
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkOrderUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maintenance?: MaintenanceScheduleUpdateOneWithoutWorkOrdersNestedInput
    assignments?: WorkOrderAssignmentUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PartUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vendors?: PartVendorUpdateManyWithoutPartNestedInput
    workOrders?: WorkOrderPartsUpdateManyWithoutPartNestedInput
  }

  export type PartUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vendors?: PartVendorUncheckedUpdateManyWithoutPartNestedInput
    workOrders?: WorkOrderPartsUncheckedUpdateManyWithoutPartNestedInput
  }

  export type PartUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    unitCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VendorUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parts?: PartVendorUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parts?: PartVendorUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asset?: AssetUpdateOneWithoutIncidentsNestedInput
    reportedBy?: UserUpdateOneWithoutIncidentsNestedInput
  }

  export type IncidentUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TenantUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUpdateOneWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUpdateManyWithoutTenantNestedInput
    assets?: AssetUpdateManyWithoutTenantNestedInput
    meters?: MeterUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUpdateManyWithoutTenantNestedInput
    parts?: PartUpdateManyWithoutTenantNestedInput
    vendors?: VendorUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUpdateManyWithoutTenantNestedInput
    children?: TenantUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: TenantSettingsUncheckedUpdateOneWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    categories?: AssetCategoryUncheckedUpdateManyWithoutTenantNestedInput
    assetTypes?: AssetTypeUncheckedUpdateManyWithoutTenantNestedInput
    assets?: AssetUncheckedUpdateManyWithoutTenantNestedInput
    meters?: MeterUncheckedUpdateManyWithoutTenantNestedInput
    maintenance?: MaintenanceScheduleUncheckedUpdateManyWithoutTenantNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutTenantNestedInput
    parts?: PartUncheckedUpdateManyWithoutTenantNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutTenantNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutTenantNestedInput
    children?: TenantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type TenantUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceAssignmentCreateManyUserInput = {
    maintenanceId: string
  }

  export type WorkOrderAssignmentCreateManyUserInput = {
    workOrderId: string
  }

  export type WorkOrderLaborCreateManyUserInput = {
    id?: string
    workOrderId: string
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
  }

  export type IncidentCreateManyReportedByInput = {
    id?: string
    tenantId: string
    assetId?: string | null
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type WorkOrderLogCreateManyUserInput = {
    id?: string
    workOrderId: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceAssignmentUpdateWithoutUserInput = {
    maintenance?: MaintenanceScheduleUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type MaintenanceAssignmentUncheckedUpdateWithoutUserInput = {
    maintenanceId?: StringFieldUpdateOperationsInput | string
  }

  export type MaintenanceAssignmentUncheckedUpdateManyWithoutUserInput = {
    maintenanceId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssignmentUpdateWithoutUserInput = {
    workOrder?: WorkOrderUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type WorkOrderAssignmentUncheckedUpdateWithoutUserInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssignmentUncheckedUpdateManyWithoutUserInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderLaborUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrder?: WorkOrderUpdateOneRequiredWithoutLaborNestedInput
  }

  export type WorkOrderLaborUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLaborUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncidentUpdateWithoutReportedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutIncidentsNestedInput
    asset?: AssetUpdateOneWithoutIncidentsNestedInput
  }

  export type IncidentUncheckedUpdateWithoutReportedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentUncheckedUpdateManyWithoutReportedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkOrderLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrder?: WorkOrderUpdateOneRequiredWithoutLogsNestedInput
  }

  export type WorkOrderLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetTypeCreateManyCategoryInput = {
    id?: string
    tenantId: string
    name: string
    description?: string | null
    expectedLifespan?: number | null
    maintenanceFrequency?: number | null
    criticality?: number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetTypeUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutAssetTypesNestedInput
    assets?: AssetUpdateManyWithoutAssetTypeNestedInput
  }

  export type AssetTypeUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutAssetTypeNestedInput
  }

  export type AssetTypeUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expectedLifespan?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceFrequency?: NullableIntFieldUpdateOperationsInput | number | null
    criticality?: NullableIntFieldUpdateOperationsInput | number | null
    customFields?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCreateManyAssetTypeInput = {
    id?: string
    tenantId: string
    name: string
    location?: string | null
    status?: $Enums.AssetStatus
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    lastMaintenanceDate?: Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AssetUpdateWithoutAssetTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutAssetsNestedInput
    assetMeters?: AssetMeterUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutAssetTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assetMeters?: AssetMeterUncheckedUpdateManyWithoutAssetNestedInput
    maintenance?: MaintenanceAssetsUncheckedUpdateManyWithoutAssetNestedInput
    workOrders?: WorkOrderAssetsUncheckedUpdateManyWithoutAssetNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutAssetTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenanceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetMeterCreateManyAssetInput = {
    id?: string
    meterId: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceAssetsCreateManyAssetInput = {
    maintenanceId: string
  }

  export type WorkOrderAssetsCreateManyAssetInput = {
    workOrderId: string
  }

  export type IncidentCreateManyAssetInput = {
    id?: string
    tenantId: string
    reportedById?: string | null
    description: string
    status?: $Enums.CallStatus
    priority?: $Enums.CallPriority
    reportedAt?: Date | string
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AssetMeterUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meter?: MeterUpdateOneRequiredWithoutAssetMetersNestedInput
    readings?: MeterReadingUpdateManyWithoutAssetMeterNestedInput
  }

  export type AssetMeterUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    meterId?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readings?: MeterReadingUncheckedUpdateManyWithoutAssetMeterNestedInput
  }

  export type AssetMeterUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    meterId?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceAssetsUpdateWithoutAssetInput = {
    maintenance?: MaintenanceScheduleUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type MaintenanceAssetsUncheckedUpdateWithoutAssetInput = {
    maintenanceId?: StringFieldUpdateOperationsInput | string
  }

  export type MaintenanceAssetsUncheckedUpdateManyWithoutAssetInput = {
    maintenanceId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssetsUpdateWithoutAssetInput = {
    workOrder?: WorkOrderUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type WorkOrderAssetsUncheckedUpdateWithoutAssetInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssetsUncheckedUpdateManyWithoutAssetInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
  }

  export type IncidentUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutIncidentsNestedInput
    reportedBy?: UserUpdateOneWithoutIncidentsNestedInput
  }

  export type IncidentUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    reportedById?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    reportedById?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCallStatusFieldUpdateOperationsInput | $Enums.CallStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetMeterCreateManyMeterInput = {
    id?: string
    assetId: string
    initialReading?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceScheduleCreateManyMeterInput = {
    id?: string
    tenantId: string
    description: string
    triggerType?: $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: Decimal | DecimalJsLike | number | string | null
    nextRun?: Date | string | null
    lastRun?: Date | string | null
    status?: $Enums.MaintenanceStatus
    priority?: $Enums.CallPriority
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AssetMeterUpdateWithoutMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutAssetMetersNestedInput
    readings?: MeterReadingUpdateManyWithoutAssetMeterNestedInput
  }

  export type AssetMeterUncheckedUpdateWithoutMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readings?: MeterReadingUncheckedUpdateManyWithoutAssetMeterNestedInput
  }

  export type AssetMeterUncheckedUpdateManyWithoutMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    initialReading?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceScheduleUpdateWithoutMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutMaintenanceNestedInput
    assignments?: MaintenanceAssignmentUpdateManyWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleUncheckedUpdateWithoutMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: MaintenanceAssignmentUncheckedUpdateManyWithoutMaintenanceNestedInput
    assets?: MaintenanceAssetsUncheckedUpdateManyWithoutMaintenanceNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceScheduleUncheckedUpdateManyWithoutMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    triggerType?: EnumMaintenanceTriggerFieldUpdateOperationsInput | $Enums.MaintenanceTrigger
    recurrence?: NullableJsonNullValueInput | InputJsonValue
    thresholdValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MeterReadingCreateManyAssetMeterInput = {
    id?: string
    readingValue: Decimal | DecimalJsLike | number | string
    readingDate?: Date | string
    createdAt?: Date | string
  }

  export type MeterReadingUpdateWithoutAssetMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeterReadingUncheckedUpdateWithoutAssetMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeterReadingUncheckedUpdateManyWithoutAssetMeterInput = {
    id?: StringFieldUpdateOperationsInput | string
    readingValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    readingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceAssignmentCreateManyMaintenanceInput = {
    userId: string
  }

  export type MaintenanceAssetsCreateManyMaintenanceInput = {
    assetId: string
  }

  export type WorkOrderCreateManyMaintenanceInput = {
    id?: string
    tenantId: string
    description: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.CallPriority
    dueDate?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type MaintenanceAssignmentUpdateWithoutMaintenanceInput = {
    user?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type MaintenanceAssignmentUncheckedUpdateWithoutMaintenanceInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MaintenanceAssignmentUncheckedUpdateManyWithoutMaintenanceInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MaintenanceAssetsUpdateWithoutMaintenanceInput = {
    asset?: AssetUpdateOneRequiredWithoutMaintenanceNestedInput
  }

  export type MaintenanceAssetsUncheckedUpdateWithoutMaintenanceInput = {
    assetId?: StringFieldUpdateOperationsInput | string
  }

  export type MaintenanceAssetsUncheckedUpdateManyWithoutMaintenanceInput = {
    assetId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignments?: WorkOrderAssignmentUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderNestedInput
    assets?: WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderNestedInput
    parts?: WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderNestedInput
    labor?: WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderNestedInput
    logs?: WorkOrderLogUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateManyWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumCallPriorityFieldUpdateOperationsInput | $Enums.CallPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkOrderAssignmentCreateManyWorkOrderInput = {
    userId: string
  }

  export type WorkOrderAssetsCreateManyWorkOrderInput = {
    assetId: string
  }

  export type WorkOrderPartsCreateManyWorkOrderInput = {
    partId: string
    quantityUsed: number
  }

  export type WorkOrderLaborCreateManyWorkOrderInput = {
    id?: string
    userId?: string | null
    hours: Decimal | DecimalJsLike | number | string
    taskDescription?: string | null
    createdAt?: Date | string
  }

  export type WorkOrderLogCreateManyWorkOrderInput = {
    id?: string
    userId?: string | null
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type WorkOrderAssignmentUpdateWithoutWorkOrderInput = {
    user?: UserUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderAssignmentUncheckedUpdateWithoutWorkOrderInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssignmentUncheckedUpdateManyWithoutWorkOrderInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssetsUpdateWithoutWorkOrderInput = {
    asset?: AssetUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderAssetsUncheckedUpdateWithoutWorkOrderInput = {
    assetId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderAssetsUncheckedUpdateManyWithoutWorkOrderInput = {
    assetId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkOrderPartsUpdateWithoutWorkOrderInput = {
    quantityUsed?: IntFieldUpdateOperationsInput | number
    part?: PartUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderPartsUncheckedUpdateWithoutWorkOrderInput = {
    partId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: IntFieldUpdateOperationsInput | number
  }

  export type WorkOrderPartsUncheckedUpdateManyWithoutWorkOrderInput = {
    partId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: IntFieldUpdateOperationsInput | number
  }

  export type WorkOrderLaborUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLaborNestedInput
  }

  export type WorkOrderLaborUncheckedUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLaborUncheckedUpdateManyWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taskDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLogUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutWorkOrderLogsNestedInput
  }

  export type WorkOrderLogUncheckedUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderLogUncheckedUpdateManyWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartVendorCreateManyPartInput = {
    vendorId: string
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
  }

  export type WorkOrderPartsCreateManyPartInput = {
    workOrderId: string
    quantityUsed: number
  }

  export type PartVendorUpdateWithoutPartInput = {
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
    vendor?: VendorUpdateOneRequiredWithoutPartsNestedInput
  }

  export type PartVendorUncheckedUpdateWithoutPartInput = {
    vendorId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PartVendorUncheckedUpdateManyWithoutPartInput = {
    vendorId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WorkOrderPartsUpdateWithoutPartInput = {
    quantityUsed?: IntFieldUpdateOperationsInput | number
    workOrder?: WorkOrderUpdateOneRequiredWithoutPartsNestedInput
  }

  export type WorkOrderPartsUncheckedUpdateWithoutPartInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: IntFieldUpdateOperationsInput | number
  }

  export type WorkOrderPartsUncheckedUpdateManyWithoutPartInput = {
    workOrderId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: IntFieldUpdateOperationsInput | number
  }

  export type PartVendorCreateManyVendorInput = {
    partId: string
    cost: Decimal | DecimalJsLike | number | string
    leadTime?: number | null
  }

  export type PartVendorUpdateWithoutVendorInput = {
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
    part?: PartUpdateOneRequiredWithoutVendorsNestedInput
  }

  export type PartVendorUncheckedUpdateWithoutVendorInput = {
    partId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PartVendorUncheckedUpdateManyWithoutVendorInput = {
    partId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    leadTime?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}