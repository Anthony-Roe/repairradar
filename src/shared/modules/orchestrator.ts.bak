import * as fs from "fs/promises";
import path from "path";
import { ComponentType } from "react";

type Plugin = {
  name: string;
  version: string;
  api?: { handlers: Record<string, ComponentType<{tenant: string}>>; basePath: string };
  ui?: { component: ComponentType<{tenant: string}>; routes: string[] };
  schema?: string;
  config?: any;
  dependencies?: string[];
  hooks?: { onLoad?: () => Promise<void> };
};

const moduleDir = path.join(__dirname, ".");

export class ModuleOrchestrator {
  private modules: Map<string, Plugin> = new Map();

  async loadModules() {
    const dirs = await fs.readdir(moduleDir, { withFileTypes: true });
    for (const dir of dirs) {
      if (dir.isDirectory()) {
        const pluginPath = path.join(moduleDir, dir.name, "plugin.ts");
        try {
          const { [dir.name + "Plugin"]: plugin } = await import(pluginPath);
          this.modules.set(plugin.name, plugin);
          if (plugin.hooks?.onLoad) await plugin.hooks.onLoad();
        } catch (e) {
          console.warn(`Failed to load module ${dir.name}: ${e}`);
        }
      }
    }
    this.validateDependencies();
  }

  validateDependencies() {
    for (const [name, plugin] of this.modules) {
      if (plugin.dependencies) {
        for (const dep of plugin.dependencies) {
          if (!this.modules.has(dep)) {
            throw new Error(`Module ${name} requires missing dependency ${dep}`);
          }
        }
      }
    }
  }

  getApiHandlers() {
    const handlers: Record<string, any> = {};
    for (const plugin of this.modules.values()) {
      if (plugin.api) {
        handlers[plugin.api.basePath] = plugin.api.handlers;
      }
    }
    return handlers;
  }

  getUiComponents() {
    const components: Record<string, any> = {};
    for (const plugin of this.modules.values()) {
      if (plugin.ui) {
        components[plugin.name] = plugin.ui.component;
      }
    }
    return components;
  }

  getSchemas() {
    return Array.from(this.modules.values())
      .filter(p => p.schema)
      .map(p => p.schema);
  }
}

export const orchestrator = new ModuleOrchestrator();