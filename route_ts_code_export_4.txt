// File: E:\Dev\websites\repairradar\src\shared\modules\moduleImports.generated.ts

export const moduleImports={assets:()=>import("@/shared/modules/assets/components/AssetsPage"),calls:()=>import("@/shared/modules/calls/components/CallsPage"),dashboard:()=>import("@/shared/modules/dashboard/components/DashboardPage"),inventory:()=>import("@/shared/modules/inventory/components/InventoryPage"),"preventative-maintenance":()=>import("@/shared/modules/preventative-maintenance/components/PreventativeMaintenancePage"),"work-orders":()=>import("@/shared/modules/work-orders/components/WorkOrdersPage")};

// File: E:\Dev\websites\repairradar\src\shared\modules\moduleManager.ts

import{moduleImports as t}from"./moduleImports.generated";export class ModuleManager{static getActiveModules(n){return n?Object.keys(n.modules).filter(e=>e&&t[e]).map(e=>({name:e,component:t[e],apiRoute:`/api/${e}`})):[]}static getAllModules(){return Object.keys(t)}}

// File: E:\Dev\websites\repairradar\src\shared\modules\preventative-maintenance\components\PreventativeMaintenancePage.tsx

// File: E:\Dev\websites\repairradar\src\shared\modules\preventative-maintenance\components\PreventativeMaintenancePage.tsx
"use client";
import { useState, useEffect, useCallback } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { toast } from "sonner";
import { Loader2, Plus, RefreshCw, Search } from "lucide-react";
import { MaintenanceSchedule, Asset } from "@prisma/client";
import { usePMData, useAssetData, dynamicFetch } from "@/shared/lib/hooks";

type MaintenanceScheduleWithRelations = MaintenanceSchedule & {
  assets: { asset: Asset }[];
  assignedTo?: { email: string } | null;
};

// Utility to format recurrence for display
const formatRecurrence = (type: string, interval: number) =>
  `${interval} ${type}${interval > 1 ? "s" : ""}`;

export default function PreventativeMaintenancePage({ tenant }: { tenant: string }) {
  const { status } = useSession();
  const router = useRouter();

  // Data hooks
  const { data: schedules = [], isLoading: pmLoading, refetch: refetchPM } = usePMData(tenant);
  const { data: assets = [], isLoading: assetsLoading, refetch: refetchAssets } = useAssetData(tenant);

  // Local state
  const [searchTerm, setSearchTerm] = useState("");
  const [isCreating, setIsCreating] = useState(false);
  const [formData, setFormData] = useState({
    description: "",
    recurrence: { type: "monthly" as "daily" | "weekly" | "monthly", interval: 1 },
    nextRun: new Date().toISOString().slice(0, 16),
    assetIds: [] as string[],
    priority: "MEDIUM" as "LOW" | "MEDIUM" | "HIGH",
  });

  // Refresh handler
  const handleRefresh = useCallback(async () => {
    try {
      await Promise.all([refetchPM(), refetchAssets()]);
      toast.success("Maintenance schedules and assets refreshed");
    } catch (error) {
      toast.error("Failed to refresh data");
    }
  }, [refetchPM, refetchAssets]);

  // Filter schedules
  const filteredSchedules = useCallback(() => {
    return schedules.filter((schedule) => {
      const description = schedule.description || "";
      const assetNames = schedule.assets.map((a) => a.asset.name || "").join(" ");
      return (
        searchTerm === "" ||
        description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        assetNames.toLowerCase().includes(searchTerm.toLowerCase())
      );
    });
  }, [schedules, searchTerm]);

  // Submit handler
  const handleSubmit = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      if (!formData.description || formData.assetIds.length === 0) {
        toast.error("Description and at least one asset are required");
        return;
      }

      try {
        await dynamicFetch<MaintenanceScheduleWithRelations>("preventative-maintenance", tenant, "POST", {
          body: { subdomain: tenant, ...formData },
        });
        setFormData({
          description: "",
          recurrence: { type: "monthly", interval: 1 },
          nextRun: new Date().toISOString().slice(0, 16),
          assetIds: [],
          priority: "MEDIUM",
        });
        setIsCreating(false);
        await handleRefresh();
        toast.success("Maintenance scheduled successfully");
      } catch (error) {
        toast.error(error instanceof Error ? error.message : "Failed to schedule maintenance");
      }
    },
    [formData, tenant, handleRefresh]
  );

  useEffect(() => {
    if (status === "loading") return;
    if (status === "unauthenticated") {
      router.push("/auth/signin");
    } else if (status === "authenticated") {
      handleRefresh();
    }
  }, [status, router, handleRefresh]);

  // Loading state
  if (pmLoading || assetsLoading || status === "loading") {
    return (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold">Preventative Maintenance - {tenant}</h1>
          <p className="text-sm text-muted-foreground">Schedule and manage maintenance tasks</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleRefresh} disabled={pmLoading || assetsLoading}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
          <Button onClick={() => setIsCreating(true)}>
            <Plus className="h-4 w-4 mr-2" />
            New Schedule
          </Button>
        </div>
      </div>

      {/* Main Card */}
      <Card>
        <CardHeader>
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
              <CardTitle>Maintenance Schedules</CardTitle>
              <CardDescription>
                {filteredSchedules().length} {filteredSchedules().length === 1 ? "schedule" : "schedules"} found
              </CardDescription>
            </div>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search by description or asset..."
                className="pl-9 w-full md:w-64"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {/* Create Form */}
          {isCreating && (
            <form onSubmit={handleSubmit} className="mb-6 p-4 border rounded-lg bg-muted/50">
              <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
                <div className="col-span-1 md:col-span-2">
                  <label className="block text-sm font-medium mb-1">Description *</label>
                  <Input
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    placeholder="Describe the maintenance task..."
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Recurrence Type *</label>
                  <Select
                    value={formData.recurrence.type}
                    onValueChange={(value) =>
                      setFormData({
                        ...formData,
                        recurrence: { ...formData.recurrence, type: value as "daily" | "weekly" | "monthly" },
                      })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="daily">Daily</SelectItem>
                      <SelectItem value="weekly">Weekly</SelectItem>
                      <SelectItem value="monthly">Monthly</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Interval *</label>
                  <Input
                    type="number"
                    value={formData.recurrence.interval}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        recurrence: { ...formData.recurrence, interval: parseInt(e.target.value) || 1 },
                      })
                    }
                    min="1"
                    placeholder="Interval"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Next Run *</label>
                  <Input
                    type="datetime-local"
                    value={formData.nextRun}
                    onChange={(e) => setFormData({ ...formData, nextRun: e.target.value })}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Priority</label>
                  <Select
                    value={formData.priority}
                    onValueChange={(value) =>
                      setFormData({ ...formData, priority: value as "LOW" | "MEDIUM" | "HIGH" })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="LOW">Low</SelectItem>
                      <SelectItem value="MEDIUM">Medium</SelectItem>
                      <SelectItem value="HIGH">High</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="col-span-1 md:col-span-2">
                  <label className="block text-sm font-medium mb-1">Assets *</label>
                  <Select
                    onValueChange={(value) => {
                      if (!formData.assetIds.includes(value)) {
                        setFormData({ ...formData, assetIds: [...formData.assetIds, value] });
                      }
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Add an asset" />
                    </SelectTrigger>
                    <SelectContent>
                      {assets
                        .filter((a) => !formData.assetIds.includes(a.id))
                        .map((asset) => (
                          <SelectItem key={asset.id} value={asset.id}>
                            {asset.name}
                          </SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                  {formData.assetIds.length > 0 && (
                    <div className="mt-2 flex flex-wrap gap-2">
                      {formData.assetIds.map((id) => {
                        const asset = assets.find((a) => a.id === id);
                        return asset ? (
                          <Badge key={id} variant="secondary" className="flex items-center gap-1">
                            {asset.name}
                            <button
                              type="button"
                              onClick={() =>
                                setFormData({
                                  ...formData,
                                  assetIds: formData.assetIds.filter((aid) => aid !== id),
                                })
                              }
                              className="text-muted-foreground hover:text-destructive"
                            >
                              ×
                            </button>
                          </Badge>
                        ) : null;
                      })}
                    </div>
                  )}
                </div>
                <div className="flex items-end gap-2">
                  <Button type="submit" disabled={!formData.description || formData.assetIds.length === 0}>
                    Schedule
                  </Button>
                  <Button variant="outline" type="button" onClick={() => setIsCreating(false)}>
                    Cancel
                  </Button>
                </div>
              </div>
            </form>
          )}

          {/* Schedules Table */}
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Description</TableHead>
                <TableHead>Assets</TableHead>
                <TableHead>Recurrence</TableHead>
                <TableHead>Next Run</TableHead>
                <TableHead>Priority</TableHead>
                <TableHead>Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredSchedules().length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-6">
                    {searchTerm ? "No matching schedules found" : "No schedules available"}
                  </TableCell>
                </TableRow>
              ) : (
                filteredSchedules().map((schedule) => (
                  <TableRow key={schedule.id}>
                    <TableCell className="font-medium">{schedule.description || "N/A"}</TableCell>
                    <TableCell>
                      <div className="flex flex-wrap gap-1">
                        {schedule.assets.length > 0 ? (
                          schedule.assets.map(({ asset }) => (
                            <Badge key={asset.id} variant="outline">
                              {asset.name}
                            </Badge>
                          ))
                        ) : (
                          <span className="text-muted-foreground">None</span>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>{formatRecurrence(schedule.recurrence.type, schedule.recurrence.interval)}</TableCell>
                    <TableCell>{new Date(schedule.nextRun).toLocaleString()}</TableCell>
                    <TableCell>
                      <Badge
                        variant={
                          schedule.priority === "HIGH"
                            ? "destructive"
                            : schedule.priority === "MEDIUM"
                            ? "secondary"
                            : "default"
                        }
                      >
                        {schedule.priority.charAt(0) + schedule.priority.slice(1).toLowerCase()}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge
                        variant={
                          schedule.status === "COMPLETED"
                            ? "default"
                            : schedule.status === "SCHEDULED"
                            ? "secondary"
                            : "outline"
                        }
                      >
                        {schedule.status.charAt(0) + schedule.status.slice(1).toLowerCase()}
                      </Badge>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
// File: E:\Dev\websites\repairradar\src\shared\modules\preventative-maintenance\types.ts


// File: E:\Dev\websites\repairradar\src\shared\modules\types.ts

export*from"@prisma/client";

// File: E:\Dev\websites\repairradar\src\shared\modules\work-orders\components\WorkOrdersPage.tsx

// File: E:\Dev\websites\repairradar\src\shared\modules\work-orders\components\WorkOrdersPage.tsx
"use client";
import { useState, useEffect, useCallback } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { toast } from "sonner";
import { ChevronDown, Edit, Loader2, Plus, RefreshCw, Search, Trash2 } from "lucide-react";
import { WorkOrder, Asset, WorkOrderPriority, WorkOrderStatus } from "@prisma/client";
import { EditDialog } from "@/components/EditDialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useWorkOrderData, useAssetData, dynamicFetch } from "@/shared/lib/hooks";

type WorkOrderWithRelations = WorkOrder & {
  assets: { asset: Asset }[];
  notes: { note: string; createdAt: Date }[];
  assignedTo?: { email: string } | null;
};

// Utility to format status for display
const formatStatus = (status: WorkOrderStatus) =>
  status.split("_").map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(" ");

export default function WorkOrdersPage({ tenant }: { tenant: string }) {
  const { status } = useSession();
  const router = useRouter();

  // Data hooks
  const { data: workOrders = [], isLoading: woLoading, refetch: refetchWorkOrders } = useWorkOrderData(tenant);
  const { data: assets = [], isLoading: assetsLoading, refetch: refetchAssets } = useAssetData(tenant);

  // Local state
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState<WorkOrderStatus | "all">("all");
  const [priorityFilter, setPriorityFilter] = useState<WorkOrderPriority | "all">("all");
  const [isCreating, setIsCreating] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [currentWorkOrder, setCurrentWorkOrder] = useState<WorkOrderWithRelations | null>(null);
  const [newWorkOrder, setNewWorkOrder] = useState({
    description: "",
    assetIds: [] as string[],
    priority: "MEDIUM" as WorkOrderPriority,
    dueDate: "",
  });

  // Refresh handler
  const handleRefresh = useCallback(async () => {
    try {
      await Promise.all([refetchWorkOrders(), refetchAssets()]);
      toast.success("Work orders and assets refreshed");
    } catch (error) {
      toast.error("Failed to refresh data");
    }
  }, [refetchWorkOrders, refetchAssets]);

  // Filter and sort work orders
  const filteredWorkOrders = useCallback(() => {
    return workOrders
      .filter((wo) => {
        const description = wo.description || "";
        const assetNames = wo.assets.map((a) => a.asset.name || "").join(" ");
        const matchesSearch =
          searchTerm === "" ||
          description.toLowerCase().includes(searchTerm.toLowerCase()) ||
          assetNames.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = filterStatus === "all" || wo.status === filterStatus;
        const matchesPriority = priorityFilter === "all" || wo.priority === priorityFilter;
        return matchesSearch && matchesStatus && matchesPriority;
      })
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
  }, [workOrders, searchTerm, filterStatus, priorityFilter]);

  // CRUD handlers
  const handleCreateWorkOrder = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      if (!newWorkOrder.description || newWorkOrder.assetIds.length === 0) {
        toast.error("Description and at least one asset are required");
        return;
      }

      try {
        await dynamicFetch<WorkOrderWithRelations>("work-orders", tenant, "POST", {
          body: { subdomain: tenant, ...newWorkOrder },
        });
        setNewWorkOrder({ description: "", assetIds: [], priority: "MEDIUM", dueDate: "" });
        setIsCreating(false);
        await handleRefresh();
        toast.success("Work order created successfully");
      } catch (error) {
        toast.error(error instanceof Error ? error.message : "Failed to create work order");
      }
    },
    [newWorkOrder, tenant, handleRefresh]
  );

  const handleUpdateWorkOrder = useCallback(
    async (updates: Partial<WorkOrder>) => {
      if (!currentWorkOrder) return;

      try {
        await dynamicFetch<WorkOrderWithRelations>("work-orders", tenant, "PUT", {
          id: currentWorkOrder.id,
          body: updates,
        });
        await handleRefresh();
        setEditDialogOpen(false);
        toast.success("Work order updated successfully");
      } catch (error) {
        toast.error(error instanceof Error ? error.message : "Failed to update work order");
      }
    },
    [currentWorkOrder, tenant, handleRefresh]
  );

  const handleDeleteWorkOrder = useCallback(
    async (id: string) => {
      if (!confirm("Are you sure you want to delete this work order?")) return;

      try {
        await dynamicFetch("work-orders", tenant, "DELETE", { id });
        await handleRefresh();
        toast.success("Work order deleted successfully");
      } catch (error) {
        toast.error(error instanceof Error ? error.message : "Failed to delete work order");
      }
    },
    [tenant, handleRefresh]
  );

  // Initial load and auth check
  useEffect(() => {
    if (status === "loading") return;
    if (status === "unauthenticated") {
      router.push("/auth/signin");
    } else if (status === "authenticated") {
      handleRefresh();
    }
  }, [status, router, handleRefresh]);

  // Loading state
  if (woLoading || assetsLoading || status === "loading") {
    return (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold">Work Orders - {tenant}</h1>
          <p className="text-sm text-muted-foreground">Manage maintenance and service requests</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleRefresh} disabled={woLoading || assetsLoading}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
          <Button onClick={() => setIsCreating(true)}>
            <Plus className="h-4 w-4 mr-2" />
            New Work Order
          </Button>
        </div>
      </div>

      {/* Main Card */}
      <Card>
        <CardHeader>
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
              <CardTitle>Work Orders</CardTitle>
              <CardDescription>
                {filteredWorkOrders().length} {filteredWorkOrders().length === 1 ? "order" : "orders"} found
              </CardDescription>
            </div>
            <div className="flex flex-col md:flex-row gap-3">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search by description or asset..."
                  className="pl-9 w-full md:w-64"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
              <Select value={filterStatus} onValueChange={(val) => setFilterStatus(val as WorkOrderStatus | "all")}>
                <SelectTrigger className="w-full md:w-40">
                  <SelectValue placeholder="Filter by Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Statuses</SelectItem>
                  {["PENDING", "IN_PROGRESS", "COMPLETED", "CANCELLED"].map((status) => (
                    <SelectItem key={status} value={status}>
                      {formatStatus(status as WorkOrderStatus)}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Select
                value={priorityFilter}
                onValueChange={(val) => setPriorityFilter(val as WorkOrderPriority | "all")}
              >
                <SelectTrigger className="w-full md:w-40">
                  <SelectValue placeholder="Filter by Priority" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Priorities</SelectItem>
                  {["LOW", "MEDIUM", "HIGH"].map((priority) => (
                    <SelectItem key={priority} value={priority}>
                      {priority.charAt(0) + priority.slice(1).toLowerCase()}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {/* Create Form */}
          {isCreating && (
            <form onSubmit={handleCreateWorkOrder} className="mb-6 p-4 border rounded-lg bg-muted/50">
              <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
                <div className="col-span-1 md:col-span-2">
                  <label className="block text-sm font-medium mb-1">Description *</label>
                  <Input
                    value={newWorkOrder.description}
                    onChange={(e) => setNewWorkOrder({ ...newWorkOrder, description: e.target.value })}
                    placeholder="Describe the work needed..."
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Priority *</label>
                  <Select
                    value={newWorkOrder.priority}
                    onValueChange={(val) => setNewWorkOrder({ ...newWorkOrder, priority: val as WorkOrderPriority })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {["LOW", "MEDIUM", "HIGH"].map((priority) => (
                        <SelectItem key={priority} value={priority}>
                          {priority.charAt(0) + priority.slice(1).toLowerCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Due Date</label>
                  <Input
                    type="date"
                    value={newWorkOrder.dueDate}
                    onChange={(e) => setNewWorkOrder({ ...newWorkOrder, dueDate: e.target.value })}
                  />
                </div>
                <div className="col-span-1 md:col-span-2">
                  <label className="block text-sm font-medium mb-1">Assets *</label>
                  <Select
                    onValueChange={(value) => {
                      if (!newWorkOrder.assetIds.includes(value)) {
                        setNewWorkOrder({
                          ...newWorkOrder,
                          assetIds: [...newWorkOrder.assetIds, value],
                        });
                      }
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Add an asset" />
                    </SelectTrigger>
                    <SelectContent>
                      {assets
                        .filter((a) => !newWorkOrder.assetIds.includes(a.id))
                        .map((asset) => (
                          <SelectItem key={asset.id} value={asset.id}>
                            {asset.name}
                          </SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                  {newWorkOrder.assetIds.length > 0 && (
                    <div className="mt-2 flex flex-wrap gap-2">
                      {newWorkOrder.assetIds.map((id) => {
                        const asset = assets.find((a) => a.id === id);
                        return asset ? (
                          <Badge key={id} variant="secondary" className="flex items-center gap-1">
                            {asset.name}
                            <button
                              type="button"
                              onClick={() =>
                                setNewWorkOrder({
                                  ...newWorkOrder,
                                  assetIds: newWorkOrder.assetIds.filter((aid) => aid !== id),
                                })
                              }
                              className="text-muted-foreground hover:text-destructive"
                            >
                              ×
                            </button>
                          </Badge>
                        ) : null;
                      })}
                    </div>
                  )}
                </div>
                <div className="flex items-end gap-2">
                  <Button type="submit" disabled={!newWorkOrder.description || newWorkOrder.assetIds.length === 0}>
                    Create
                  </Button>
                  <Button variant="outline" type="button" onClick={() => setIsCreating(false)}>
                    Cancel
                  </Button>
                </div>
              </div>
            </form>
          )}

          {/* Work Orders Table */}
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Description</TableHead>
                <TableHead>Assets</TableHead>
                <TableHead>Priority</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Due Date</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredWorkOrders().length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-6">
                    {searchTerm ? "No matching work orders found" : "No work orders available"}
                  </TableCell>
                </TableRow>
              ) : (
                filteredWorkOrders().map((wo) => (
                  <TableRow key={wo.id}>
                    <TableCell className="font-medium">{wo.description || "N/A"}</TableCell>
                    <TableCell>
                      <div className="flex flex-wrap gap-1">
                        {wo.assets.length > 0 ? (
                          wo.assets.map(({ asset }) => (
                            <Badge key={asset.id} variant="outline">
                              {asset.name}
                            </Badge>
                          ))
                        ) : (
                          <span className="text-muted-foreground">None</span>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge
                        variant={
                          wo.priority === "HIGH" ? "destructive" : wo.priority === "MEDIUM" ? "secondary" : "default"
                        }
                      >
                        {wo.priority.charAt(0) + wo.priority.slice(1).toLowerCase()}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge
                        variant={
                          wo.status === "COMPLETED"
                            ? "default"
                            : wo.status === "IN_PROGRESS"
                            ? "secondary"
                            : wo.status === "CANCELLED"
                            ? "destructive"
                            : "outline"
                        }
                      >
                        {formatStatus(wo.status)}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      {wo.dueDate ? new Date(wo.dueDate).toLocaleDateString() : "Not set"}
                    </TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <ChevronDown className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem
                            onClick={() => {
                              setCurrentWorkOrder(wo);
                              setEditDialogOpen(true);
                            }}
                          >
                            <Edit className="h-4 w-4 mr-2" />
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => handleDeleteWorkOrder(wo.id)}
                            className="text-destructive"
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Edit Dialog */}
      <EditDialog
        open={editDialogOpen}
        onOpenChange={(open) => {
          setEditDialogOpen(open);
          if (!open) setCurrentWorkOrder(null);
        }}
        title="Edit Work Order"
        description="Update work order details"
        initialData={{
          description: currentWorkOrder?.description || "",
          priority: currentWorkOrder?.priority || "MEDIUM",
          status: currentWorkOrder?.status || "PENDING",
          dueDate: currentWorkOrder?.dueDate ? new Date(currentWorkOrder.dueDate).toISOString().split("T")[0] : "",
        }}
        fields={[
          { name: "description", label: "Description", type: "text", required: true },
          {
            name: "priority",
            label: "Priority",
            type: "select",
            options: [
              { value: "LOW", label: "Low" },
              { value: "MEDIUM", label: "Medium" },
              { value: "HIGH", label: "High" },
            ],
          },
          {
            name: "status",
            label: "Status",
            type: "select",
            options: [
              { value: "PENDING", label: "Pending" },
              { value: "IN_PROGRESS", label: "In Progress" },
              { value: "COMPLETED", label: "Completed" },
              { value: "CANCELLED", label: "Cancelled" },
            ],
          },
          { name: "dueDate", label: "Due Date", type: "date", required: true },
        ]}
        onSubmit={handleUpdateWorkOrder}
      />
    </div>
  );
}
