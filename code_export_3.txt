/* start: E:/Dev/websites/repairradar\src\lib\types.ts*/ export enum CallStatus { OPEN = 'OPEN', IN_PROGRESS = 'IN_PROGRESS', COMPLETED = 'COMPLETED', CLOSED = 'CLOSED' } export enum MaintenanceStatus { SCHEDULED = 'SCHEDULED', IN_PROGRESS = 'IN_PROGRESS', COMPLETED = 'COMPLETED', OVERDUE = 'OVERDUE' } export enum MaintenancePriority { LOW = 'LOW', MEDIUM = 'MEDIUM', HIGH = 'HIGH', CRITICAL = 'CRITICAL' } export enum UserRole { USER = 'USER', TECHNICIAN = 'TECHNICIAN', ADMIN = 'ADMIN', SUPER_ADMIN = 'SUPER_ADMIN' } export enum WorkOrderStatus { PENDING = 'PENDING', ASSIGNED = 'ASSIGNED', IN_PROGRESS = 'IN_PROGRESS', COMPLETED = 'COMPLETED', CANCELLED = 'CANCELLED' } export enum WorkOrderPriority { LOW = 'LOW', MEDIUM = 'MEDIUM', HIGH = 'HIGH', CRITICAL = 'CRITICAL' } export enum AssetStatus { operational = "Operational", maintenance = "Under Maintenance", outOfService = "Out of Service" } export enum AssetType { } export interface Asset { id: string; tenantId: string; name: string; location: string; createdAt: string | string; deletedAt: string | null | string; updatedAt: string | string; status: AssetStatus; type: AssetType; } export interface Call { id: string; tenantId: string; assetId: string; reportedById: string; issue: string; callTime: string | string; createdAt: string | string; updatedAt: string | string; status: CallStatus | string; deletedAt: string | null | string; } export interface MaintenanceAsset { maintenanceId: string; assetId: string; } export interface MaintenanceSchedule { id: string; tenantId: string; description: string; recurrence: any; nextRun: string; lastRun: string | null; status: MaintenanceStatus; priority: MaintenancePriority; assignedToId: string | null; createdAt: string; updatedAt: string; deletedAt: string | null; } export interface Part { id: string; name: string; description: string | null; quantity: number; minStock: number; tenantId: string; createdAt: string; updatedAt: string; deletedAt: string | null; } export interface PartVendor { partId: string; vendorId: string; cost: number | null; } export interface TenantConfig { id: string; tenantId: string; modules: any; createdAt: string; updatedAt: string; deletedAt: string | null; } export interface Tenant { id: string; name: string; subdomain: string; parentId: string | null; createdAt: string; updatedAt: string; deletedAt: string | null; } export interface User { id: string; tenantId: string | null; email: string; password: string; createdAt: string; deletedAt: string | null; updatedAt: string; role: UserRole; } export interface Vendor { id: string; name: string; contact: string | null; email: string | null; tenantId: string; createdAt: string; updatedAt: string; deletedAt: string | null; } export interface WorkOrder { id: string; tenantId: string; description: string; status: WorkOrderStatus; createdAt: string; updatedAt: string | string; assignedToId: string | null; deletedAt: string | string | null; dueDate: string | string | null; priority: WorkOrderPriority; } export interface WorkOrderAsset { workOrderId: string; assetId: string; } export interface WorkOrderNote { id: string; workOrderId: string; note: string; createdById: string | null; createdAt: string; deletedAt: string | null; } // 4. Helper Types export type AuthUserMeta = { name: string, tenant_id: string | "error"; role: UserRole | UserRole.USER; subdomain: string | "error"; modules: Record<string, boolean> | []; }; export interface DashboardData { assets: Asset[]; calls: Call[]; workOrders: WorkOrder[]; parts: Part[]; vendors: Vendor[]; } export interface DynamicDashboardProps { initialData: DashboardData; } export type UserSignUp = { email: string; password: string; metaData: Record<string, object>; }; export type PaginatedResult<T> = { data: T[]; page: number; pageSize: number; totalCount: number; }; /* end: E:/Dev/websites/repairradar\src\lib\types.ts *//* start: E:/Dev/websites/repairradar\src\lib\utils.ts*/ import { clsx, type ClassValue } from "clsx" import { twMerge } from "tailwind-merge" export function cn(...inputs: ClassValue[]) { return twMerge(clsx(inputs)) } // Define a type for the transformed data type TransformedData<T> = T extends object ? { [K in keyof T as K extends string ? K extends `${infer First}_${infer Rest}` ? `${First}${Capitalize<Rest>}` : K : K]: T[K] extends string ? T[K] extends `${number}-${number}-${number}T${string}` ? Date : T[K] : TransformedData<T[K]>; } : T; // Annotate the function with the type export const transformData = <T>(data: T): TransformedData<T> => !data || typeof data !== "object" ? (data as TransformedData<T>) // Cast primitive types to the return type : Object.fromEntries( Object.entries(data).map(([key, value]) => [ key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase()), typeof value === "string" && /\d{4}-\d{2}-\d{2}T/.test(value) ? new Date(value) : transformData(value), ]) ) as TransformedData<T>; // Cast the result to the expected type /* end: E:/Dev/websites/repairradar\src\lib\utils.ts *//* start: E:/Dev/websites/repairradar\src\middleware.ts*/ // middleware.ts import { NextResponse, type NextRequest } from 'next/server' import {middleware as handler} from '@/lib/middleware' export async function middleware(request: NextRequest) { return await handler(request) } export const config = { matcher: [ '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)', ], } /* end: E:/Dev/websites/repairradar\src\middleware.ts *//* start: E:/Dev/websites/repairradar\src\types\dashboard.ts*/ import { Asset, WorkOrder, Part, Vendor, Incident } from "@prisma/client"; export interface DashboardData { assets: Asset[]; // Replace with actual type workOrders: WorkOrder[]; // Replace with actual type incident: Incident[]; // Replace with actual type parts: Part[]; // Replace with actual type vendors: Vendor[]; // Replace with actual type }; /* end: E:/Dev/websites/repairradar\src\types\dashboard.ts *//* start: E:/Dev/websites/repairradar\src\types\next-auth.d.ts*/ import NextAuth from "next-auth"; import { Tenant, UserRole } from "@prisma/client"; declare module "next-auth" { interface Session { user: { id: string; name?: string; email?: string; image?: string; employeeId: string; tenantId: string; role: UserRole; }; } interface User { id: string; name?: string; email?: string; employeeId: string; tenantId: string; role: UserRole; } interface JWT { id: string; employeeId: string; tenantId: string; role: UserRole; } } /* end: E:/Dev/websites/repairradar\src\types\next-auth.d.ts */